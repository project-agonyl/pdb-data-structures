#ifndef _STRUCTURES_H
#define _STRUCTURES_H

// File generated by PDBRipper ver 1.13 (http://www.ntinfo.biz)
// Bugreports : horsicq@gmail.com


enum std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Mref
{
    _FROZEN=255
};
enum CDB::__unnamed
{
    IDX_ERR_PROTOCOL=0,
    IDX_ERR_RESULT=1,
    IDX_ERR_ERRCODE=2,
    IDX_ERR_ERRSTR=3
};
enum STUB_PHASE
{
    STUB_UNMARSHAL=0,
    STUB_CALL_SERVER=1,
    STUB_MARSHAL=2,
    STUB_CALL_SERVER_NO_HRESULT=3
};
enum LATENCY_TIME
{
    LT_DONT_CARE=0,
    LT_LOWEST_LATENCY=1
};
enum FilterType
{
    FILTERSPECV4=1,
    FILTERSPECV6=2,
    FILTERSPECV6_FLOW=3,
    FILTERSPECV4_GPI=4,
    FILTERSPECV6_GPI=5,
    FILTERSPEC_END=6
};
enum PROXY_PHASE
{
    PROXY_CALCSIZE=0,
    PROXY_GETBUFFER=1,
    PROXY_MARSHAL=2,
    PROXY_SENDRECEIVE=3,
    PROXY_UNMARSHAL=4
};
enum XLAT_SIDE
{
    XLAT_SERVER=1,
    XLAT_CLIENT=2
};
enum _RPC_ASYNC_EVENT
{
    RpcCallComplete=0,
    RpcSendComplete=1,
    RpcReceiveComplete=2
};
enum std::_Tree<unsigned long,std::pair<unsigned long const ,_Party_Info_>,std::map<unsigned long,_Party_Info_,std::less<unsigned long>,std::allocator<_Party_Info_> >::_Kfn,std::less<unsigned long>,std::allocator<_Party_Info_> >::_Redbl
{
    _Red=0,
    _Black=1
};
enum std::_Tree<int,std::pair<int const ,_PCINFO_ *>,std::map<int,_PCINFO_ *,std::less<int>,std::allocator<_PCINFO_ *> >::_Kfn,std::less<int>,std::allocator<_PCINFO_ *> >::_Redbl
{
    _Red=0,
    _Black=1
};
enum ___unnamed_1162286907
{
    DB_KIND_CHARAC=0,
    DB_KIND_STORAGE=1
};
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone=0,
    RpcNotificationTypeEvent=1,
    RpcNotificationTypeApc=2,
    RpcNotificationTypeIoc=3,
    RpcNotificationTypeHwnd=4,
    RpcNotificationTypeCallback=5
};
enum CDBCharac::__unnamed
{
    IDX_EXP=0,
    IDX_SKILL=1,
    IDX_PK=2,
    IDX_RTM=3,
    IDX_SINFO=4,
    IDX_WEAR=5,
    IDX_INVEN=6,
    IDX_SAVE=7,
    IDX_PETINVEN=8,
    IDX_PETACTIVE=9,
    IDX_LORE=10,
    IDX_LQUEST=11,
    IDX_CQUEST=12,
    IDX_RESRV0=13,
    IDX_RESRV1=14,
    IDX_NONE=255
};
enum ios::io_state
{
    goodbit=0,
    eofbit=1,
    failbit=2,
    badbit=4
};
enum ios::open_mode
{
    in=1,
    out=2,
    ate=4,
    app=8,
    trunc=16,
    nocreate=32,
    noreplace=64,
    binary=128
};
enum ios::seek_dir
{
    beg=0,
    cur=1,
    end=2
};
enum ios::__unnamed
{
    skipws=1,
    left=2,
    right=4,
    internal=8,
    dec=16,
    oct=32,
    hex=64,
    showbase=128,
    showpoint=256,
    uppercase=512,
    showpos=1024,
    scientific=2048,
    fixed=4096,
    unitbuf=8192,
    stdio=16384
};
enum ADDRESS_MODE
{
    AddrMode1616=0,
    AddrMode1632=1,
    AddrModeReal=2,
    AddrModeFlat=3
};
enum SYM_TYPE
{
    SymNone=0,
    SymCoff=1,
    SymCv=2,
    SymPdb=3,
    SymExport=4,
    SymDeferred=5,
    SymSym=6
};
enum _IMAGEHLP_STATUS_REASON
{
    BindOutOfMemory=0,
    BindRvaToVaFailed=1,
    BindNoRoomInImage=2,
    BindImportModuleFailed=3,
    BindImportProcedureFailed=4,
    BindImportModule=5,
    BindImportProcedure=6,
    BindForwarder=7,
    BindForwarderNOT=8,
    BindImageModified=9,
    BindExpandFileHeaders=10,
    BindImageComplete=11,
    BindMismatchedSymbols=12,
    BindSymbolsNotUpdated=13
};
typedef union tagCY // Size=8
{
    struct
    {
        unsigned long Lo; // Size=4 Offset=0
        long Hi; // Size=4 Offset=4
    };
    __int64 int64; // Size=8 Offset=0
} *PtagCY;
typedef struct _FILETIME // Size=8
{
    unsigned long dwLowDateTime; // Size=4 Offset=0
    unsigned long dwHighDateTime; // Size=4 Offset=4
} FILETIME, *PFILETIME;
typedef struct _GUID // Size=16
{
    unsigned long Data1; // Size=4 Offset=0
    unsigned short Data2; // Size=2 Offset=4
    unsigned short Data3; // Size=2 Offset=6
    unsigned char Data4[8]; // Size=8 Offset=8
} GUID, *PGUID;
typedef struct tagBLOB // Size=8
{
    unsigned long cbSize; // Size=4 Offset=0
    unsigned char * pBlobData; // Size=4 Offset=4
} *PtagBLOB;
typedef struct tagCLIPDATA // Size=12
{
    unsigned long cbSize; // Size=4 Offset=0
    long ulClipFmt; // Size=4 Offset=4
    unsigned char * pClipData; // Size=4 Offset=8
} *PtagCLIPDATA;
typedef struct IStream // Size=4
{
} *PIStream;
typedef struct IStorage // Size=4
{
} *PIStorage;
typedef struct tagBSTRBLOB // Size=8
{
    unsigned long cbSize; // Size=4 Offset=0
    unsigned char * pData; // Size=4 Offset=4
} *PtagBSTRBLOB;
typedef struct tagCAUB // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    unsigned char * pElems; // Size=4 Offset=4
} *PtagCAUB;
typedef struct tagCAI // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    short * pElems; // Size=4 Offset=4
} *PtagCAI;
typedef struct tagCAUI // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    unsigned short * pElems; // Size=4 Offset=4
} *PtagCAUI;
typedef struct tagCABOOL // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    short * pElems; // Size=4 Offset=4
} *PtagCABOOL;
typedef struct tagCAL // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    long * pElems; // Size=4 Offset=4
} *PtagCAL;
typedef struct tagCAUL // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    unsigned long * pElems; // Size=4 Offset=4
} *PtagCAUL;
typedef struct tagCAFLT // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    float * pElems; // Size=4 Offset=4
} *PtagCAFLT;
typedef struct tagCASCODE // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    long * pElems; // Size=4 Offset=4
} *PtagCASCODE;
typedef struct tagCADBL // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    double * pElems; // Size=4 Offset=4
} *PtagCADBL;
typedef struct tagCADATE // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    double * pElems; // Size=4 Offset=4
} *PtagCADATE;
typedef struct tagCABSTR // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    unsigned short * * pElems; // Size=4 Offset=4
} *PtagCABSTR;
typedef struct tagCALPSTR // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    char * * pElems; // Size=4 Offset=4
} *PtagCALPSTR;
typedef struct tagCALPWSTR // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    unsigned short * * pElems; // Size=4 Offset=4
} *PtagCALPWSTR;
typedef struct in_addr::__unnamed::__unnamed // Size=4
{
    unsigned char s_b1; // Size=1 Offset=0
    unsigned char s_b2; // Size=1 Offset=1
    unsigned char s_b3; // Size=1 Offset=2
    unsigned char s_b4; // Size=1 Offset=3
} *Pin_addr::__unnamed::__unnamed;
typedef union _IN_ADDR_IPV4 // Size=4
{
    unsigned long Addr; // Size=4 Offset=0
    unsigned char AddrBytes[4]; // Size=4 Offset=0
} IN_ADDR_IPV4, *PIN_ADDR_IPV4;
typedef struct _IN_ADDR_IPV6 // Size=16
{
    unsigned char Addr[16]; // Size=16 Offset=0
} IN_ADDR_IPV6, *PIN_ADDR_IPV6;
typedef struct _flowspec // Size=32
{
    unsigned long TokenRate; // Size=4 Offset=0
    unsigned long TokenBucketSize; // Size=4 Offset=4
    unsigned long PeakBandwidth; // Size=4 Offset=8
    unsigned long Latency; // Size=4 Offset=12
    unsigned long DelayVariation; // Size=4 Offset=16
    unsigned long ServiceType; // Size=4 Offset=20
    unsigned long MaxSduSize; // Size=4 Offset=24
    unsigned long MinimumPolicedSize; // Size=4 Offset=28
} flowspec, *Pflowspec;
typedef struct QOS_OBJECT_HDR // Size=8
{
    unsigned long ObjectType; // Size=4 Offset=0
    unsigned long ObjectLength; // Size=4 Offset=4
} *PQOS_OBJECT_HDR;
typedef struct _AD_GENERAL_PARAMS // Size=20
{
    unsigned long IntServAwareHopCount; // Size=4 Offset=0
    unsigned long PathBandwidthEstimate; // Size=4 Offset=4
    unsigned long MinimumLatency; // Size=4 Offset=8
    unsigned long PathMTU; // Size=4 Offset=12
    unsigned long Flags; // Size=4 Offset=16
} AD_GENERAL_PARAMS, *PAD_GENERAL_PARAMS;
typedef struct _AD_GUARANTEED // Size=16
{
    unsigned long CTotal; // Size=4 Offset=0
    unsigned long DTotal; // Size=4 Offset=4
    unsigned long CSum; // Size=4 Offset=8
    unsigned long DSum; // Size=4 Offset=12
} AD_GUARANTEED, *PAD_GUARANTEED;
typedef struct _PARAM_BUFFER // Size=12
{
    unsigned long ParameterId; // Size=4 Offset=0
    unsigned long Length; // Size=4 Offset=4
    unsigned char Buffer[1]; // Size=1 Offset=8
} PARAM_BUFFER, *PPARAM_BUFFER;
typedef struct _WSABUF // Size=8
{
    unsigned long len; // Size=4 Offset=0
    char * buf; // Size=4 Offset=4
} WSABUF, *PWSABUF;
typedef struct _WSAPROTOCOLCHAIN // Size=32
{
    int ChainLen; // Size=4 Offset=0
    unsigned long ChainEntries[7]; // Size=28 Offset=4
} WSAPROTOCOLCHAIN, *PWSAPROTOCOLCHAIN;
typedef struct sockaddr // Size=16
{
    unsigned short sa_family; // Size=2 Offset=0
    char sa_data[14]; // Size=14 Offset=2
} *Psockaddr;
typedef struct _iobuf // Size=32
{
    char * _ptr; // Size=4 Offset=0
    int _cnt; // Size=4 Offset=4
    char * _base; // Size=4 Offset=8
    int _flag; // Size=4 Offset=12
    int _file; // Size=4 Offset=16
    int _charbuf; // Size=4 Offset=20
    int _bufsiz; // Size=4 Offset=24
    char * _tmpfname; // Size=4 Offset=28
} iobuf, *Piobuf;
typedef struct std::input_iterator_tag // Size=1
{
} *Pstd::input_iterator_tag;
typedef struct std::forward_iterator_tag // Size=1
{
} *Pstd::forward_iterator_tag;
typedef struct std::bidirectional_iterator_tag // Size=1
{
} *Pstd::bidirectional_iterator_tag;
typedef struct std::iterator<std::input_iterator_tag,_C,_D> // Size=0
{
} *Pstd::iterator<std::input_iterator_tag,_C,_D>;
typedef struct std::iterator<std::input_iterator_tag,_C,int> // Size=0
{
} *Pstd::iterator<std::input_iterator_tag,_C,int>;
typedef class exception // Size=12
{
    char * _m_what; // Size=4 Offset=4
    int _m_doFree; // Size=4 Offset=8
} *Pexception;
typedef class std::bad_exception // Size=12
{
} *Pstd::bad_exception;
typedef struct _TypeDescriptor // Size=8
{
    void * pVFTable; // Size=4 Offset=0
    void * spare; // Size=4 Offset=4
} TypeDescriptor, *PTypeDescriptor;
typedef class std::bad_alloc // Size=12
{
} *Pstd::bad_alloc;
typedef class std::logic_error // Size=28
{
    class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str; // Size=16 Offset=12
} *Pstd::logic_error;
typedef class std::reverse_iterator<char const *,char,char const &,char const *,int> // Size=0
{
} *Pstd::reverse_iterator<char const *,char,char const &,char const *,int>;
typedef class std::allocator<char> // Size=1
{
} *Pstd::allocator<char>;
typedef struct std::char_traits<char> // Size=1
{
} *Pstd::char_traits<char>;
typedef class std::domain_error // Size=28
{
} *Pstd::domain_error;
typedef class std::invalid_argument // Size=28
{
} *Pstd::invalid_argument;
typedef class std::length_error // Size=28
{
} *Pstd::length_error;
typedef class std::out_of_range // Size=28
{
} *Pstd::out_of_range;
typedef class std::runtime_error // Size=28
{
    class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str; // Size=16 Offset=12
} *Pstd::runtime_error;
typedef class std::overflow_error // Size=28
{
} *Pstd::overflow_error;
typedef class std::underflow_error // Size=28
{
} *Pstd::underflow_error;
typedef class std::range_error // Size=28
{
} *Pstd::range_error;
typedef struct std::iterator<std::bidirectional_iterator_tag,_C,_Ty> // Size=0
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_C,_Ty>;
typedef struct std::_Bidit<_D,_D> // Size=0
{
} *Pstd::_Bidit<_D,_D>;
typedef struct std::unary_function<std::pair<_A,_R>,_A> // Size=0
{
} *Pstd::unary_function<std::pair<_A,_R>,_A>;
typedef struct std::binary_function<std::pair<_A1,_A2>,std::pair<_A1,_A2>,bool> // Size=0
{
} *Pstd::binary_function<std::pair<_A1,_A2>,std::pair<_A1,_A2>,bool>;
typedef class std::_Tree<_K,std::pair<_K,_Ty>,std::map<_K,_Ty,_Kfn,_Pr>::_Kfn,_Kfn,_Pr> // Size=0
{
} *Pstd::_Tree<_K,std::pair<_K,_Ty>,std::map<_K,_Ty,_Kfn,_Pr>::_Kfn,_Kfn,_Pr>;
typedef class std::_Tree<_K,std::pair<_K,_Ty>,std::multimap<_K,_Ty,_Kfn,_Pr>::_Kfn,_Kfn,_Pr> // Size=0
{
} *Pstd::_Tree<_K,std::pair<_K,_Ty>,std::multimap<_K,_Ty,_Kfn,_Pr>::_Kfn,_Kfn,_Pr>;
typedef union _ITEM_ID_ // Size=8
{
    union
    {
        unsigned long dwID; // Size=4 Offset=0
        unsigned long id; // Size=4 Offset=0
    };
    union
    {
        unsigned long dwCode; // Size=4 Offset=4
        struct
        {
            unsigned long code: 14; // Size=4 Offset=4 BitOffset=0 BitCount=14
            unsigned long subcode: 18; // Size=4 Offset=4 BitOffset=14 BitCount=18
        };
    };
} ITEM_ID_, *PITEM_ID_;
typedef union _ITEM_INFO_ // Size=4
{
    unsigned long info; // Size=4 Offset=0
    struct
    {
        unsigned long level: 4; // Size=4 Offset=0 BitOffset=0 BitCount=4
        unsigned long option: 1; // Size=4 Offset=0 BitOffset=4 BitCount=1
        unsigned long confirm: 1; // Size=4 Offset=0 BitOffset=5 BitCount=1
        unsigned long subtype: 4; // Size=4 Offset=0 BitOffset=6 BitCount=4
        unsigned long wearIdx: 4; // Size=4 Offset=0 BitOffset=10 BitCount=4
        unsigned long iceAttr: 6; // Size=4 Offset=0 BitOffset=14 BitCount=6
        unsigned long fireAttr: 6; // Size=4 Offset=0 BitOffset=20 BitCount=6
        unsigned long lightAttr: 6; // Size=4 Offset=0 BitOffset=26 BitCount=6
    };
} ITEM_INFO_, *PITEM_INFO_;
typedef union _PET_ID_ // Size=8
{
    union
    {
        unsigned long dwId; // Size=4 Offset=0
        unsigned long id; // Size=4 Offset=0
    };
    union
    {
        unsigned long dwCode; // Size=4 Offset=4
        struct
        {
            unsigned long code: 16; // Size=4 Offset=4 BitOffset=0 BitCount=16
            unsigned long subcode: 16; // Size=4 Offset=4 BitOffset=16 BitCount=16
        };
    };
} PET_ID_, *PPET_ID_;
typedef union _PET_INFO_::_PET_DATA0_ // Size=4
{
    unsigned long PetData0; // Size=4 Offset=0
    struct
    {
        unsigned long Level: 8; // Size=4 Offset=0 BitOffset=0 BitCount=8
        unsigned long Exp: 14; // Size=4 Offset=0 BitOffset=8 BitCount=14
        unsigned long HP: 6; // Size=4 Offset=0 BitOffset=22 BitCount=6
        unsigned long FireAttk: 1; // Size=4 Offset=0 BitOffset=28 BitCount=1
        unsigned long FireDef: 1; // Size=4 Offset=0 BitOffset=29 BitCount=1
        unsigned long IceAttk: 1; // Size=4 Offset=0 BitOffset=30 BitCount=1
        unsigned long IceDef: 1; // Size=4 Offset=0 BitOffset=31 BitCount=1
    };
} PET_INFO_::_PET_DATA0_, *PPET_INFO_::_PET_DATA0_;
typedef union _PET_INFO_::_PET_DATA1_ // Size=4
{
    unsigned long PetData1; // Size=4 Offset=0
    struct
    {
        unsigned long LightAttk: 1; // Size=4 Offset=0 BitOffset=0 BitCount=1
        unsigned long LightDef: 1; // Size=4 Offset=0 BitOffset=1 BitCount=1
        unsigned long AttkRate: 1; // Size=4 Offset=0 BitOffset=2 BitCount=1
        unsigned long DefRate: 1; // Size=4 Offset=0 BitOffset=3 BitCount=1
        unsigned long MagicAttkRate: 1; // Size=4 Offset=0 BitOffset=4 BitCount=1
        unsigned long DownDropRate: 1; // Size=4 Offset=0 BitOffset=5 BitCount=1
        unsigned long UpExp: 1; // Size=4 Offset=0 BitOffset=6 BitCount=1
        unsigned long Food: 14; // Size=4 Offset=0 BitOffset=7 BitCount=14
        unsigned long InvenIndex: 8; // Size=4 Offset=0 BitOffset=21 BitCount=8
        unsigned long Confirm: 1; // Size=4 Offset=0 BitOffset=29 BitCount=1
        unsigned long bAlive: 1; // Size=4 Offset=0 BitOffset=30 BitCount=1
        unsigned long Reserved: 1; // Size=4 Offset=0 BitOffset=31 BitCount=1
    };
} PET_INFO_::_PET_DATA1_, *PPET_INFO_::_PET_DATA1_;
typedef struct _PC_QUEST_INFO_::_PC_QUEST_DATA_ // Size=3
{
    unsigned char QuestType; // Size=1 Offset=0
    unsigned char QuestOK; // Size=1 Offset=1
    unsigned char QuestVar; // Size=1 Offset=2
} PC_QUEST_INFO_::_PC_QUEST_DATA_, *PPC_QUEST_INFO_::_PC_QUEST_DATA_;
typedef union _SAVE_QUEST_INFO_::_SAVE_QUEST_DATA_ // Size=1
{
    unsigned char QuestData; // Size=1 Offset=0
    struct
    {
        unsigned char QuestOK: 1; // Size=1 Offset=0 BitOffset=0 BitCount=1
        unsigned char QuestVar: 7; // Size=1 Offset=0 BitOffset=1 BitCount=7
    };
} SAVE_QUEST_INFO_::_SAVE_QUEST_DATA_, *PSAVE_QUEST_INFO_::_SAVE_QUEST_DATA_;
typedef struct _SKILL_ // Size=12
{
    unsigned long skill_0; // Size=4 Offset=0
    unsigned long skill_1; // Size=4 Offset=4
    unsigned long skill_2; // Size=4 Offset=8
} SKILL_, *PSKILL_;
typedef struct _SOCIALINFO_ // Size=4
{
    unsigned long nation: 8; // Size=4 Offset=0 BitOffset=0 BitCount=8
    unsigned long rank: 8; // Size=4 Offset=0 BitOffset=8 BitCount=8
    unsigned long knight_index: 16; // Size=4 Offset=0 BitOffset=16 BitCount=16
} SOCIALINFO_, *PSOCIALINFO_;
typedef struct _LASTINGSKILL_INFO_ // Size=12
{
    unsigned char byClassIndex; // Size=1 Offset=0
    unsigned char bySkillIndex; // Size=1 Offset=1
    unsigned char bySkillLevel; // Size=1 Offset=2
    unsigned long dwCastingTime; // Size=4 Offset=4
    unsigned long dwRemainTime; // Size=4 Offset=8
} LASTINGSKILL_INFO_, *PLASTINGSKILL_INFO_;
typedef struct std::_Bidit<_LOGIN_DATA_ *,int> // Size=1
{
} *Pstd::_Bidit<_LOGIN_DATA_ *,int>;
typedef struct std::_Bidit<_PCINFO_ *,int> // Size=1
{
} *Pstd::_Bidit<_PCINFO_ *,int>;
typedef struct _PCINFO_ // Size=168
{
    char szPCName[13]; // Size=13 Offset=0
    char szAccountName[21]; // Size=21 Offset=13
    unsigned long dwPCID; // Size=4 Offset=36
    unsigned short wMapIndex; // Size=2 Offset=40
    unsigned char byZoneSvrID; // Size=1 Offset=42
    unsigned char byGateSvrID; // Size=1 Offset=43
    long lLoginTime; // Size=4 Offset=44
    unsigned char byPCType; // Size=1 Offset=48
    char szPasswd[21]; // Size=21 Offset=49
    char szIP[16]; // Size=16 Offset=70
    unsigned long RemainTime; // Size=4 Offset=88
    int PayMode; // Size=4 Offset=92
    int PayNo; // Size=4 Offset=96
    char Reserved1[33]; // Size=33 Offset=100
    char Reserved2[33]; // Size=33 Offset=133
} PCINFO_, *PPCINFO_;
typedef struct std::_Bidit<std::pair<int const ,_PCINFO_ *>,int> // Size=1
{
} *Pstd::_Bidit<std::pair<int const ,_PCINFO_ *>,int>;
typedef struct _STORAGE_ITEM_ // Size=16
{
    unsigned long dwItemCode; // Size=4 Offset=0
    unsigned long dwItemInfo; // Size=4 Offset=4
    unsigned long dwItemKey; // Size=4 Offset=8
    unsigned char byStorageIndex; // Size=1 Offset=12
} STORAGE_ITEM_, *PSTORAGE_ITEM_;
typedef struct _REC_BODY_ // Size=4292
{
    char exp[12]; // Size=12 Offset=0
    char skill[36]; // Size=36 Offset=12
    char pk_count[4]; // Size=4 Offset=48
    char r_time[8]; // Size=8 Offset=52
    char s_info[12]; // Size=12 Offset=60
    char wear_item[288]; // Size=288 Offset=72
    char inven[1152]; // Size=1152 Offset=360
    char save[2400]; // Size=2400 Offset=1512
    char pet_inven[240]; // Size=240 Offset=3912
    char pet_active[48]; // Size=48 Offset=4152
    char lore[12]; // Size=12 Offset=4200
    char last_quest[8]; // Size=8 Offset=4212
    char curr_quest[48]; // Size=48 Offset=4220
    char reserved0[12]; // Size=12 Offset=4268
    char reserved1[12]; // Size=12 Offset=4280
} REC_BODY_, *PREC_BODY_;
typedef struct std::_Bidit<_QUERY_DATA_ *,int> // Size=1
{
} *Pstd::_Bidit<_QUERY_DATA_ *,int>;
typedef struct _QUERY_DATA_ // Size=6172
{
    unsigned short wProtocol; // Size=2 Offset=0
    char szParam[6144]; // Size=6144 Offset=2
    char szPCName[13]; // Size=13 Offset=6146
    unsigned long dwPCID; // Size=4 Offset=6160
    unsigned char byGateSvrID; // Size=1 Offset=6164
    long tvTime; // Size=4 Offset=6168
} QUERY_DATA_, *PQUERY_DATA_;
typedef struct _CLAN_INFO_ // Size=80
{
    unsigned long dwClanID; // Size=4 Offset=0
    unsigned long dwMarkID; // Size=4 Offset=4
    unsigned long dwCDate; // Size=4 Offset=8
    unsigned long dwDDate; // Size=4 Offset=12
    char szClanName[32]; // Size=32 Offset=16
    char szClanPasswd[16]; // Size=16 Offset=48
    unsigned char nation; // Size=1 Offset=64
    unsigned char clanRank; // Size=1 Offset=65
    unsigned char clanStat; // Size=1 Offset=66
    unsigned char byReserved; // Size=1 Offset=67
    unsigned short wStorageIndex; // Size=2 Offset=68
    unsigned short wAgitID; // Size=2 Offset=70
    unsigned short wWinCnt; // Size=2 Offset=72
    unsigned short wLooseCnt; // Size=2 Offset=74
    unsigned short wReserved; // Size=2 Offset=76
} CLAN_INFO_, *PCLAN_INFO_;
typedef struct _KNIGHT_INFO_ // Size=28
{
    char szPCName[13]; // Size=13 Offset=0
    unsigned long dwPCID; // Size=4 Offset=16
    unsigned short wLevel; // Size=2 Offset=20
    unsigned char rankInClan; // Size=1 Offset=22
    unsigned char status; // Size=1 Offset=23
    unsigned char byPCType; // Size=1 Offset=24
} KNIGHT_INFO_, *PKNIGHT_INFO_;
typedef struct _CLAN_MEMBER_ // Size=22
{
    char szPCName[13]; // Size=13 Offset=0
    unsigned long dwPCID; // Size=4 Offset=13
    unsigned short wLevel; // Size=2 Offset=17
    unsigned char rankInClan; // Size=1 Offset=19
    unsigned char status; // Size=1 Offset=20
    unsigned char byPCType; // Size=1 Offset=21
} CLAN_MEMBER_, *PCLAN_MEMBER_;
typedef struct _LASTINGITEM_ARRAY_ // Size=8
{
    unsigned char byItemType; // Size=1 Offset=0
    unsigned long dwRemainTime; // Size=4 Offset=4
} LASTINGITEM_ARRAY_, *PLASTINGITEM_ARRAY_;
typedef struct _PARTISAN_ // Size=8
{
    unsigned long dwPCID; // Size=4 Offset=0
    unsigned char byGateSvr; // Size=1 Offset=4
} PARTISAN_, *PPARTISAN_;
typedef struct _APPRENTICE_INFO_ // Size=4
{
    unsigned long dwPCID; // Size=4 Offset=0
} APPRENTICE_INFO_, *PAPPRENTICE_INFO_;
typedef struct _BATTLE_WARP_DATA_ // Size=8
{
    unsigned char byWarpType; // Size=1 Offset=0
    unsigned long dwOtherPCID; // Size=4 Offset=4
} BATTLE_WARP_DATA_, *PBATTLE_WARP_DATA_;
typedef struct std::_Bidit<_WARP_DATA_ *,int> // Size=1
{
} *Pstd::_Bidit<_WARP_DATA_ *,int>;
typedef struct _WSANETWORKEVENTS // Size=44
{
    long lNetworkEvents; // Size=4 Offset=0
    int iErrorCode[10]; // Size=40 Offset=4
} WSANETWORKEVENTS, *PWSANETWORKEVENTS;
typedef class MSG_S2G_HEADER // Size=10
{
    unsigned long dwSize; // Size=4 Offset=0
    unsigned long dwPCID; // Size=4 Offset=4
    unsigned char byCtrl; // Size=1 Offset=8
    unsigned char byCmd; // Size=1 Offset=9
} *PMSG_S2G_HEADER;
typedef class MSG_S2C_HEADER // Size=12
{
    unsigned long dwSize; // Size=4 Offset=0
    unsigned long dwPCID; // Size=4 Offset=4
    unsigned char byCtrl; // Size=1 Offset=8
    unsigned char byCmd; // Size=1 Offset=9
    unsigned short wProtocol; // Size=2 Offset=10
} *PMSG_S2C_HEADER;
typedef class MSG_S2C_ERROR // Size=78
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wErrCode; // Size=2 Offset=12
    char szErrStr[64]; // Size=64 Offset=14
} *PMSG_S2C_ERROR;
typedef class MSG_S2S_HEADER // Size=2
{
    unsigned short wProtocol; // Size=2 Offset=0
} *PMSG_S2S_HEADER;
typedef class MSG_M2S_ERROR // Size=73
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned short wErrCode; // Size=2 Offset=7
    char szErrStr[64]; // Size=64 Offset=9
} *PMSG_M2S_ERROR;
typedef class MSG_S2M_SVR_LOGIN // Size=3
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byThisServerID; // Size=1 Offset=2
} *PMSG_S2M_SVR_LOGIN;
typedef class MSG_S2M_OP_CMD // Size=85
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szOPCharacter[13]; // Size=13 Offset=2
    unsigned short wOpCmd; // Size=2 Offset=15
    char szParam[64]; // Size=64 Offset=17
    int bFlag; // Size=4 Offset=81
} *PMSG_S2M_OP_CMD;
typedef class MSG_M2S_OP_CMD // Size=81
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szOPCharacter[13]; // Size=13 Offset=2
    unsigned short wOpCmd; // Size=2 Offset=15
    char szParam[64]; // Size=64 Offset=17
} *PMSG_M2S_OP_CMD;
typedef class MSG_S2M_ASK_CREATE_PLAYER // Size=43
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char byClassIndex; // Size=1 Offset=7
    unsigned char byNation; // Size=1 Offset=8
    char CharacterName[13]; // Size=13 Offset=9
    char szAccountName[21]; // Size=21 Offset=22
} *PMSG_S2M_ASK_CREATE_PLAYER;
typedef class MSG_M2S_ANS_CREATE_PLAYER // Size=20
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    char CharacterName[13]; // Size=13 Offset=7
} *PMSG_M2S_ANS_CREATE_PLAYER;
typedef class MSG_S2M_ASK_DELETE_PLAYER // Size=20
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    char CharacterName[13]; // Size=13 Offset=7
} *PMSG_S2M_ASK_DELETE_PLAYER;
typedef class MSG_M2S_ANS_DELETE_PLAYER // Size=20
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    char CharacterName[13]; // Size=13 Offset=7
} *PMSG_M2S_ANS_DELETE_PLAYER;
typedef class MSG_S2M_CHAR_LOGIN // Size=156
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    char szAccountName[21]; // Size=21 Offset=7
    char szPasswd[21]; // Size=21 Offset=28
    char szPCName[13]; // Size=13 Offset=49
    char szIP[16]; // Size=16 Offset=62
    unsigned long RemainTime; // Size=4 Offset=78
    char PayMode[4]; // Size=4 Offset=82
    long PayNo; // Size=4 Offset=86
    char Reserved1[33]; // Size=33 Offset=90
    char Reserved2[33]; // Size=33 Offset=123
} *PMSG_S2M_CHAR_LOGIN;
typedef class MSG_M2S_CHAR_LOGIN // Size=10
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char byNewZoneSvrID; // Size=1 Offset=7
    unsigned short wMapIndex; // Size=2 Offset=8
} *PMSG_M2S_CHAR_LOGIN;
typedef class MSG_S2M_WORLD_LOGIN // Size=19
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwPCID; // Size=4 Offset=15
} *PMSG_S2M_WORLD_LOGIN;
typedef class MSG_M2S_WARP_ZONE // Size=11
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    int bOK; // Size=4 Offset=7
} *PMSG_M2S_WARP_ZONE;
typedef class MSG_S2M_WARP_LOGIN // Size=7
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
} *PMSG_S2M_WARP_LOGIN;
typedef class MSG_M2S_PASS2GATE // Size=263
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    int nSize; // Size=4 Offset=3
    char Msg[256]; // Size=256 Offset=7
} *PMSG_M2S_PASS2GATE;
typedef class MSG_S2C_SAY // Size=94
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bySayType; // Size=1 Offset=12
    unsigned long dwSayPCID; // Size=4 Offset=13
    char szSayPC[13]; // Size=13 Offset=17
    char szWords[64]; // Size=64 Offset=30
} *PMSG_S2C_SAY;
typedef class MSG_S2M_SAY // Size=98
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char bySayType; // Size=1 Offset=2
    unsigned long dwSayPCID; // Size=4 Offset=3
    unsigned char bySayPCGateID; // Size=1 Offset=7
    char szSayPC[13]; // Size=13 Offset=8
    char szListenPC[13]; // Size=13 Offset=21
    char szWords[64]; // Size=64 Offset=34
} *PMSG_S2M_SAY;
typedef class MSG_S2M_LOAD_STORAGE // Size=15
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szCharacterName[13]; // Size=13 Offset=2
} *PMSG_S2M_LOAD_STORAGE;
typedef class MSG_S2M_PARTY_CREATE // Size=19
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwPartyID; // Size=4 Offset=15
} *PMSG_S2M_PARTY_CREATE;
typedef class MSG_S2M_PARTY_JOIN // Size=19
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwPartyID; // Size=4 Offset=15
} *PMSG_S2M_PARTY_JOIN;
typedef class MSG_S2M_PARTY_OUT // Size=10
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPartyID; // Size=4 Offset=2
    unsigned long dwPCID; // Size=4 Offset=6
} *PMSG_S2M_PARTY_OUT;
typedef class MSG_M2S_PARTY_OUT // Size=14
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long byGateSvrID; // Size=4 Offset=2
    unsigned long dwPCID; // Size=4 Offset=6
    unsigned long dwOutPCID; // Size=4 Offset=10
} *PMSG_M2S_PARTY_OUT;
typedef struct _PARTNER_INFO_ // Size=20
{
    unsigned long dwMemberID; // Size=4 Offset=0
    char szMemberName[13]; // Size=13 Offset=4
} PARTNER_INFO_, *PPARTNER_INFO_;
typedef struct _APPRENTICE_MEMBER_ // Size=32
{
    unsigned long dwMemberID; // Size=4 Offset=0
    char szMemberName[13]; // Size=13 Offset=4
    unsigned long dwCurCell; // Size=4 Offset=20
    unsigned short wCurMap; // Size=2 Offset=24
    unsigned short wHPRatio; // Size=2 Offset=26
    unsigned char byNowZoneServerID; // Size=1 Offset=28
} APPRENTICE_MEMBER_, *PAPPRENTICE_MEMBER_;
typedef class MSG_S2M_APPRENTICE_QUIT // Size=10
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwApprenticeID; // Size=4 Offset=2
    unsigned long dwPCID; // Size=4 Offset=6
} *PMSG_S2M_APPRENTICE_QUIT;
typedef class MSG_M2S_APPRENTICE_QUIT // Size=11
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    unsigned long dwQuitPCID; // Size=4 Offset=7
} *PMSG_M2S_APPRENTICE_QUIT;
typedef class MSG_M2S_ADMIN // Size=75
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char Cmd; // Size=1 Offset=2
    unsigned long dwVal1; // Size=4 Offset=3
    unsigned long dwVal2; // Size=4 Offset=7
    char szVal[64]; // Size=64 Offset=11
} *PMSG_M2S_ADMIN;
typedef class MSG_S2M_CHAR_DISCONNECT // Size=7
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateID; // Size=1 Offset=6
} *PMSG_S2M_CHAR_DISCONNECT;
typedef class MSG_S2G_DISCONNECT // Size=10
{
    class MSG_S2G_HEADER MsgHeader; // Size=10 Offset=0
} *PMSG_S2G_DISCONNECT;
typedef class MSG_S2G_SWITCH_ZONE // Size=11
{
    class MSG_S2G_HEADER MsgHeader; // Size=10 Offset=0
    unsigned char byNewServerID; // Size=1 Offset=10
} *PMSG_S2G_SWITCH_ZONE;
typedef class MSG_S2G_BROADCAST // Size=10
{
    class MSG_S2G_HEADER MsgHeader; // Size=10 Offset=0
} *PMSG_S2G_BROADCAST;
typedef class MSG_S2M_CLAN // Size=69
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char requestType; // Size=1 Offset=2
    char szMasterName[13]; // Size=13 Offset=3
    char szClanName[32]; // Size=32 Offset=16
    char szClanPasswd[16]; // Size=16 Offset=48
    unsigned long ClanID; // Size=4 Offset=64
    unsigned char byNation; // Size=1 Offset=68
} *PMSG_S2M_CLAN;
typedef class MSG_M2S_CLAN // Size=13
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char requestType; // Size=1 Offset=7
    unsigned char errorCode; // Size=1 Offset=8
    unsigned long ClanID; // Size=4 Offset=9
} *PMSG_M2S_CLAN;
typedef class MSG_S2M_KNIGHT // Size=25
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char requestType; // Size=1 Offset=2
    unsigned long ClanID; // Size=4 Offset=3
    unsigned char rank; // Size=1 Offset=7
    char szKnightName[13]; // Size=13 Offset=8
    unsigned long dwKnightID; // Size=4 Offset=21
} *PMSG_S2M_KNIGHT;
typedef class MSG_M2S_KNIGHT // Size=13
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char requestType; // Size=1 Offset=7
    unsigned long dwClanID; // Size=4 Offset=8
    unsigned char errorCode; // Size=1 Offset=12
} *PMSG_M2S_KNIGHT;
typedef class MSG_S2M_CLAN_INFO // Size=19
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwClanID; // Size=4 Offset=15
} *PMSG_S2M_CLAN_INFO;
typedef class MSG_S2M_CLAN_UPDATE // Size=6
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwClanID; // Size=4 Offset=2
} *PMSG_S2M_CLAN_UPDATE;
typedef class MSG_M2S_CLAN_FAIL // Size=12
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char byErrorCode; // Size=1 Offset=7
    unsigned long dwClanID; // Size=4 Offset=8
} *PMSG_M2S_CLAN_FAIL;
typedef class MSG_S2M_ASK_BLOCK // Size=16
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byClientID; // Size=1 Offset=2
    char szPCName[13]; // Size=13 Offset=3
} *PMSG_S2M_ASK_BLOCK;
typedef class MSG_S2M_ASK_UNBLOCK // Size=16
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byClientID; // Size=1 Offset=2
    char szPCName[13]; // Size=13 Offset=3
} *PMSG_S2M_ASK_UNBLOCK;
typedef class MSG_M2S_ANS_BLOCK // Size=17
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byErrCode; // Size=1 Offset=2
    unsigned char byClientID; // Size=1 Offset=3
    char szPCName[13]; // Size=13 Offset=4
} *PMSG_M2S_ANS_BLOCK;
typedef class MSG_M2S_ANS_UNBLOCK // Size=17
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byClientID; // Size=1 Offset=2
    unsigned char byResult; // Size=1 Offset=3
    char szPCName[13]; // Size=13 Offset=4
} *PMSG_M2S_ANS_UNBLOCK;
typedef class MSG_S2M_SHOUT2ALLZONE // Size=66
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szMsg[64]; // Size=64 Offset=2
} *PMSG_S2M_SHOUT2ALLZONE;
typedef class MSG_B2M_ASK_TMMSG_BROADCAST // Size=23
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byMsgNo; // Size=1 Offset=2
    unsigned long dwClanID[2]; // Size=8 Offset=3
    unsigned long dwExtra[3]; // Size=12 Offset=11
} *PMSG_B2M_ASK_TMMSG_BROADCAST;
typedef class MSG_M2S_ANS_WARP_Z2B // Size=9
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    unsigned char byBattleSvrID; // Size=1 Offset=7
    unsigned char byResult; // Size=1 Offset=8
} *PMSG_M2S_ANS_WARP_Z2B;
typedef class MSG_B2M_ASK_WARP_Z2B // Size=7
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
} *PMSG_B2M_ASK_WARP_Z2B;
typedef class MSG_M2B_ANS_WARP_B2Z // Size=8
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    unsigned char byResult; // Size=1 Offset=7
} *PMSG_M2B_ANS_WARP_B2Z;
typedef class MSG_S2M_ASK_WARP_B2Z // Size=7
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
} *PMSG_S2M_ASK_WARP_B2Z;
typedef class MSG_M2S_CHANGE_REIGN // Size=389
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byWhichTollan; // Size=1 Offset=2
    unsigned long arrToll[2]; // Size=8 Offset=3
    unsigned long arrErrt[4]; // Size=32 Offset=11
    char arrTollNames[32]; // Size=64 Offset=43
    char arrErrtNames[32]; // Size=256 Offset=107
    char arrTollPCNames[13]; // Size=26 Offset=363
} *PMSG_M2S_CHANGE_REIGN;
typedef class MSG_B2M_ASK_PREWEEK_MASTERS // Size=6
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    int iPreWeekTh; // Size=4 Offset=2
} *PMSG_B2M_ASK_PREWEEK_MASTERS;
typedef class MSG_M2B_ANS_PREWEEK_MASTERS // Size=43
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byAns; // Size=1 Offset=2
    unsigned long arrErrt[4]; // Size=32 Offset=3
    unsigned long arrToll[2]; // Size=8 Offset=35
} *PMSG_M2B_ANS_PREWEEK_MASTERS;
typedef class MSG_B2M_TM_RESULT // Size=46
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    int iTh; // Size=4 Offset=2
    unsigned long arrErrt[4]; // Size=32 Offset=6
    unsigned long arrToll[2]; // Size=8 Offset=38
} *PMSG_B2M_TM_RESULT;
typedef class MSG_Z2M_REGISTER_MARK // Size=19
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwClanID; // Size=4 Offset=15
} *PMSG_Z2M_REGISTER_MARK;
typedef class MSG_M2A_REGISTER_MARK // Size=28
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwPCID; // Size=4 Offset=15
    unsigned char byGateSvrID; // Size=1 Offset=19
    unsigned long dwClanID; // Size=4 Offset=20
    unsigned long dwMarkID; // Size=4 Offset=24
} *PMSG_M2A_REGISTER_MARK;
typedef class MSG_A2M_CONFIRM_MARK // Size=24
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwClanID; // Size=4 Offset=15
    unsigned long dwMarkID; // Size=4 Offset=19
    unsigned char byResultCode; // Size=1 Offset=23
} *PMSG_A2M_CONFIRM_MARK;
typedef class MSG_M2Z_CONFIRM_MARK // Size=12
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char byResultCode; // Size=1 Offset=7
    unsigned long dwMarkID; // Size=4 Offset=8
} *PMSG_M2Z_CONFIRM_MARK;
typedef class MSG_Z2M_CONFIRM_MARK // Size=24
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned char byResultCode; // Size=1 Offset=15
    unsigned long dwClanID; // Size=4 Offset=16
    unsigned long dwMarkID; // Size=4 Offset=20
} *PMSG_Z2M_CONFIRM_MARK;
typedef class MSG_M2Z_CHANGE_MARK // Size=11
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned long dwMarkID; // Size=4 Offset=7
} *PMSG_M2Z_CHANGE_MARK;
typedef class MSG_S2M_WGS_PAY // Size=44
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szAccountName[21]; // Size=21 Offset=2
    char szPasswd[21]; // Size=21 Offset=23
} *PMSG_S2M_WGS_PAY;
typedef class MSG_M2S_WGS_PAY // Size=44
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    unsigned char byPayMode; // Size=1 Offset=7
    char szAccountName[21]; // Size=21 Offset=8
    char szDeadLine[15]; // Size=15 Offset=29
} *PMSG_M2S_WGS_PAY;
typedef class CLoopThread // Size=16
{
    int m_bRunThread; // Size=4 Offset=4
    void * m_hThread; // Size=4 Offset=8
    unsigned long m_dwThreadID; // Size=4 Offset=12
} *PCLoopThread;
typedef struct std::_Bidit<_BLOCK_PC_ *,int> // Size=1
{
} *Pstd::_Bidit<_BLOCK_PC_ *,int>;
typedef struct _BLOCK_PC_ // Size=14
{
    char szPCName[13]; // Size=13 Offset=0
    unsigned char byOpClientID; // Size=1 Offset=13
} BLOCK_PC_, *PBLOCK_PC_;
typedef class COpServer // Size=4194404
{
    int m_bRunServer; // Size=4 Offset=4194372
    unsigned char m_bySvrID; // Size=1 Offset=4194376
    class std::list<_BLOCK_PC_ *,std::allocator<_BLOCK_PC_ *> > m_BlockPC; // Size=12 Offset=4194380
    class std::list<_BLOCK_PC_ *,std::allocator<_BLOCK_PC_ *> > m_WaitBlockPC; // Size=12 Offset=4194392
} *PCOpServer;
typedef class CAccountServer // Size=4194380
{
    int m_bRunServer; // Size=4 Offset=4194372
    unsigned char m_bySvrID; // Size=1 Offset=4194376
} *PCAccountServer;
typedef class CTimeFunc // Size=1
{
} *PCTimeFunc;
typedef class CShareObject // Size=8
{
    long m_lockFlag; // Size=4 Offset=0
    long m_refCnt; // Size=4 Offset=4
} *PCShareObject;
typedef class CFileLogMgr // Size=1
{
} *PCFileLogMgr;
typedef struct _REC_DATA_ERR_ // Size=1036
{
    unsigned short wProtocol; // Size=2 Offset=0
    int bResult; // Size=4 Offset=4
    int iErrCode; // Size=4 Offset=8
    char szErrStr[1024]; // Size=1024 Offset=12
} REC_DATA_ERR_, *PREC_DATA_ERR_;
typedef struct std::_Bidit<_STORAGE_DATA_ *,int> // Size=1
{
} *Pstd::_Bidit<_STORAGE_DATA_ *,int>;
typedef struct _Member_Info // Size=20
{
    unsigned long dwMemberID; // Size=4 Offset=0
    char szMemberName[13]; // Size=13 Offset=4
} Member_Info, *PMember_Info;
typedef struct std::_Bidit<std::pair<unsigned long const ,_Party_Info_>,int> // Size=1
{
} *Pstd::_Bidit<std::pair<unsigned long const ,_Party_Info_>,int>;
typedef class CUDPSock // Size=1036
{
    unsigned int m_hSocket; // Size=4 Offset=4
    void * m_wsaEvent; // Size=4 Offset=8
    char m_ReadBuf[1024]; // Size=1024 Offset=12
} *PCUDPSock;
typedef class MSG_HEADER // Size=2
{
    unsigned short wProtocol; // Size=2 Offset=0
} *PMSG_HEADER;
typedef class MSG_V2S_CMM_KILL // Size=2
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
} *PMSG_V2S_CMM_KILL;
typedef class MSG_S2V_CMM_KILL // Size=2
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
} *PMSG_S2V_CMM_KILL;
typedef class MSG_V2S_MAIN_SHOUT // Size=66
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
    char szMsg[64]; // Size=64 Offset=2
} *PMSG_V2S_MAIN_SHOUT;
typedef class MSG_V2S_MAIN_WHISPER // Size=79
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    char szMsg[64]; // Size=64 Offset=15
} *PMSG_V2S_MAIN_WHISPER;
typedef class MSG_S2V_CMM_ALIVE // Size=2
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
} *PMSG_S2V_CMM_ALIVE;
typedef class MSG_S2V_MAIN_SHOUT // Size=66
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
    char szMsg[64]; // Size=64 Offset=2
} *PMSG_S2V_MAIN_SHOUT;
typedef struct _MAP_INFO_ // Size=4
{
    unsigned short wMapNum; // Size=2 Offset=0
    unsigned short wCurUser; // Size=2 Offset=2
} MAP_INFO_, *PMAP_INFO_;
typedef struct std::_Bidit<_LOG_DATA_ *,int> // Size=1
{
} *Pstd::_Bidit<_LOG_DATA_ *,int>;
typedef struct _LOG_DATA_ // Size=2052
{
    long tvTime; // Size=4 Offset=0
    char LogStr[2048]; // Size=2048 Offset=4
} LOG_DATA_, *PLOG_DATA_;
typedef struct _REIGNCLAN_ // Size=44
{
    int iTh; // Size=4 Offset=0
    unsigned long arrErrt[4]; // Size=32 Offset=4
    unsigned long arrToll[2]; // Size=8 Offset=36
} REIGNCLAN_, *PREIGNCLAN_;
typedef struct std::_Bidit<CClan *,int> // Size=1
{
} *Pstd::_Bidit<CClan *,int>;
typedef struct _CLAN_NAME_TABLE_ // Size=40
{
    int iIndex; // Size=4 Offset=0
    int iStatus; // Size=4 Offset=4
    char szClanName[32]; // Size=32 Offset=8
} CLAN_NAME_TABLE_, *PCLAN_NAME_TABLE_;
typedef struct std::_Bidit<_WGS_DATA_ *,int> // Size=1
{
} *Pstd::_Bidit<_WGS_DATA_ *,int>;
typedef struct _WGS_DATA_ // Size=1028
{
    long tvTime; // Size=4 Offset=0
    char szWGSData[1024]; // Size=1024 Offset=4
} WGS_DATA_, *PWGS_DATA_;
typedef class CWGSServer // Size=4194380
{
    int m_bWaitResponse; // Size=4 Offset=4194372
    unsigned long m_dwLastReqTick; // Size=4 Offset=4194376
} *PCWGSServer;
typedef class CWGS // Size=4194396
{
    class CWGSServer m_WGSConn; // Size=4194380 Offset=0
    class std::list<_WGS_DATA_ *,std::allocator<_WGS_DATA_ *> > m_WGSDataQ; // Size=12 Offset=4194380
    int m_nWGSQSize; // Size=4 Offset=4194392
} *PCWGS;
typedef class std::allocator<CClan *> // Size=1
{
} *Pstd::allocator<CClan *>;
typedef class std::reverse_bidirectional_iterator<std::list<CClan *,std::allocator<CClan *> >::iterator,CClan *,CClan * &,CClan * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<CClan *,std::allocator<CClan *> >::iterator,CClan *,CClan * &,CClan * *,int>;
typedef struct std::not_equal_to<CClan *> // Size=1
{
} *Pstd::not_equal_to<CClan *>;
typedef struct std::greater<CClan *> // Size=1
{
} *Pstd::greater<CClan *>;
typedef class std::allocator<_WGS_DATA_ *> // Size=1
{
} *Pstd::allocator<_WGS_DATA_ *>;
typedef class std::reverse_bidirectional_iterator<std::list<_WGS_DATA_ *,std::allocator<_WGS_DATA_ *> >::iterator,_WGS_DATA_ *,_WGS_DATA_ * &,_WGS_DATA_ * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<_WGS_DATA_ *,std::allocator<_WGS_DATA_ *> >::iterator,_WGS_DATA_ *,_WGS_DATA_ * &,_WGS_DATA_ * *,int>;
typedef struct std::not_equal_to<_WGS_DATA_ *> // Size=1
{
} *Pstd::not_equal_to<_WGS_DATA_ *>;
typedef struct std::greater<_WGS_DATA_ *> // Size=1
{
} *Pstd::greater<_WGS_DATA_ *>;
typedef class std::basic_string // Size=0
{
} *Pstd::basic_string;
typedef struct std::char_traits<unsigned short> // Size=1
{
} *Pstd::char_traits<unsigned short>;
typedef class std::fpos<int> // Size=0
{
} *Pstd::fpos<int>;
typedef struct HWND__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHWND__;
typedef struct _ULARGE_INTEGER::__unnamed // Size=8
{
    unsigned long LowPart; // Size=4 Offset=0
    unsigned long HighPart; // Size=4 Offset=4
} ULARGE_INTEGER::__unnamed, *PULARGE_INTEGER::__unnamed;
typedef class std::allocator<_LOGIN_DATA_ *> // Size=1
{
} *Pstd::allocator<_LOGIN_DATA_ *>;
typedef class std::reverse_bidirectional_iterator<std::list<_LOGIN_DATA_ *,std::allocator<_LOGIN_DATA_ *> >::iterator,_LOGIN_DATA_ *,_LOGIN_DATA_ * &,_LOGIN_DATA_ * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<_LOGIN_DATA_ *,std::allocator<_LOGIN_DATA_ *> >::iterator,_LOGIN_DATA_ *,_LOGIN_DATA_ * &,_LOGIN_DATA_ * *,int>;
typedef struct std::not_equal_to<_LOGIN_DATA_ *> // Size=1
{
} *Pstd::not_equal_to<_LOGIN_DATA_ *>;
typedef struct std::greater<_LOGIN_DATA_ *> // Size=1
{
} *Pstd::greater<_LOGIN_DATA_ *>;
typedef class std::allocator<_LOG_DATA_ *> // Size=1
{
} *Pstd::allocator<_LOG_DATA_ *>;
typedef class std::reverse_bidirectional_iterator<std::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> >::iterator,_LOG_DATA_ *,_LOG_DATA_ * &,_LOG_DATA_ * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> >::iterator,_LOG_DATA_ *,_LOG_DATA_ * &,_LOG_DATA_ * *,int>;
typedef struct std::not_equal_to<_LOG_DATA_ *> // Size=1
{
} *Pstd::not_equal_to<_LOG_DATA_ *>;
typedef struct std::greater<_LOG_DATA_ *> // Size=1
{
} *Pstd::greater<_LOG_DATA_ *>;
typedef struct _PMD // Size=12
{
    int mdisp; // Size=4 Offset=0
    int pdisp; // Size=4 Offset=4
    int vdisp; // Size=4 Offset=8
} PMD, *PPMD;
typedef struct HDRVR__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHDRVR__;
typedef class std::allocator<_BLOCK_PC_ *> // Size=1
{
} *Pstd::allocator<_BLOCK_PC_ *>;
typedef class std::reverse_bidirectional_iterator<std::list<_BLOCK_PC_ *,std::allocator<_BLOCK_PC_ *> >::iterator,_BLOCK_PC_ *,_BLOCK_PC_ * &,_BLOCK_PC_ * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<_BLOCK_PC_ *,std::allocator<_BLOCK_PC_ *> >::iterator,_BLOCK_PC_ *,_BLOCK_PC_ * &,_BLOCK_PC_ * *,int>;
typedef struct std::not_equal_to<_BLOCK_PC_ *> // Size=1
{
} *Pstd::not_equal_to<_BLOCK_PC_ *>;
typedef struct std::greater<_BLOCK_PC_ *> // Size=1
{
} *Pstd::greater<_BLOCK_PC_ *>;
typedef struct tagLOGFONTW // Size=92
{
    long lfHeight; // Size=4 Offset=0
    long lfWidth; // Size=4 Offset=4
    long lfEscapement; // Size=4 Offset=8
    long lfOrientation; // Size=4 Offset=12
    long lfWeight; // Size=4 Offset=16
    unsigned char lfItalic; // Size=1 Offset=20
    unsigned char lfUnderline; // Size=1 Offset=21
    unsigned char lfStrikeOut; // Size=1 Offset=22
    unsigned char lfCharSet; // Size=1 Offset=23
    unsigned char lfOutPrecision; // Size=1 Offset=24
    unsigned char lfClipPrecision; // Size=1 Offset=25
    unsigned char lfQuality; // Size=1 Offset=26
    unsigned char lfPitchAndFamily; // Size=1 Offset=27
    unsigned short lfFaceName[32]; // Size=64 Offset=28
} *PtagLOGFONTW;
typedef struct tagTEXTMETRICW // Size=60
{
    long tmHeight; // Size=4 Offset=0
    long tmAscent; // Size=4 Offset=4
    long tmDescent; // Size=4 Offset=8
    long tmInternalLeading; // Size=4 Offset=12
    long tmExternalLeading; // Size=4 Offset=16
    long tmAveCharWidth; // Size=4 Offset=20
    long tmMaxCharWidth; // Size=4 Offset=24
    long tmWeight; // Size=4 Offset=28
    long tmOverhang; // Size=4 Offset=32
    long tmDigitizedAspectX; // Size=4 Offset=36
    long tmDigitizedAspectY; // Size=4 Offset=40
    unsigned short tmFirstChar; // Size=2 Offset=44
    unsigned short tmLastChar; // Size=2 Offset=46
    unsigned short tmDefaultChar; // Size=2 Offset=48
    unsigned short tmBreakChar; // Size=2 Offset=50
    unsigned char tmItalic; // Size=1 Offset=52
    unsigned char tmUnderlined; // Size=1 Offset=53
    unsigned char tmStruckOut; // Size=1 Offset=54
    unsigned char tmPitchAndFamily; // Size=1 Offset=55
    unsigned char tmCharSet; // Size=1 Offset=56
} *PtagTEXTMETRICW;
typedef class std::allocator<_STORAGE_DATA_ *> // Size=1
{
} *Pstd::allocator<_STORAGE_DATA_ *>;
typedef class std::reverse_bidirectional_iterator<std::list<_STORAGE_DATA_ *,std::allocator<_STORAGE_DATA_ *> >::iterator,_STORAGE_DATA_ *,_STORAGE_DATA_ * &,_STORAGE_DATA_ * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<_STORAGE_DATA_ *,std::allocator<_STORAGE_DATA_ *> >::iterator,_STORAGE_DATA_ *,_STORAGE_DATA_ * &,_STORAGE_DATA_ * *,int>;
typedef struct std::not_equal_to<_STORAGE_DATA_ *> // Size=1
{
} *Pstd::not_equal_to<_STORAGE_DATA_ *>;
typedef struct std::greater<_STORAGE_DATA_ *> // Size=1
{
} *Pstd::greater<_STORAGE_DATA_ *>;
typedef struct tagLOGFONTA // Size=60
{
    long lfHeight; // Size=4 Offset=0
    long lfWidth; // Size=4 Offset=4
    long lfEscapement; // Size=4 Offset=8
    long lfOrientation; // Size=4 Offset=12
    long lfWeight; // Size=4 Offset=16
    unsigned char lfItalic; // Size=1 Offset=20
    unsigned char lfUnderline; // Size=1 Offset=21
    unsigned char lfStrikeOut; // Size=1 Offset=22
    unsigned char lfCharSet; // Size=1 Offset=23
    unsigned char lfOutPrecision; // Size=1 Offset=24
    unsigned char lfClipPrecision; // Size=1 Offset=25
    unsigned char lfQuality; // Size=1 Offset=26
    unsigned char lfPitchAndFamily; // Size=1 Offset=27
    char lfFaceName[32]; // Size=32 Offset=28
} *PtagLOGFONTA;
typedef struct tagTEXTMETRICA // Size=56
{
    long tmHeight; // Size=4 Offset=0
    long tmAscent; // Size=4 Offset=4
    long tmDescent; // Size=4 Offset=8
    long tmInternalLeading; // Size=4 Offset=12
    long tmExternalLeading; // Size=4 Offset=16
    long tmAveCharWidth; // Size=4 Offset=20
    long tmMaxCharWidth; // Size=4 Offset=24
    long tmWeight; // Size=4 Offset=28
    long tmOverhang; // Size=4 Offset=32
    long tmDigitizedAspectX; // Size=4 Offset=36
    long tmDigitizedAspectY; // Size=4 Offset=40
    unsigned char tmFirstChar; // Size=1 Offset=44
    unsigned char tmLastChar; // Size=1 Offset=45
    unsigned char tmDefaultChar; // Size=1 Offset=46
    unsigned char tmBreakChar; // Size=1 Offset=47
    unsigned char tmItalic; // Size=1 Offset=48
    unsigned char tmUnderlined; // Size=1 Offset=49
    unsigned char tmStruckOut; // Size=1 Offset=50
    unsigned char tmPitchAndFamily; // Size=1 Offset=51
    unsigned char tmCharSet; // Size=1 Offset=52
} *PtagTEXTMETRICA;
typedef struct HINSTANCE__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHINSTANCE__;
typedef class std::allocator<_PCINFO_ *> // Size=1
{
} *Pstd::allocator<_PCINFO_ *>;
typedef class std::reverse_bidirectional_iterator<std::list<_PCINFO_ *,std::allocator<_PCINFO_ *> >::iterator,_PCINFO_ *,_PCINFO_ * &,_PCINFO_ * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<_PCINFO_ *,std::allocator<_PCINFO_ *> >::iterator,_PCINFO_ *,_PCINFO_ * &,_PCINFO_ * *,int>;
typedef struct std::not_equal_to<_PCINFO_ *> // Size=1
{
} *Pstd::not_equal_to<_PCINFO_ *>;
typedef struct std::greater<_PCINFO_ *> // Size=1
{
} *Pstd::greater<_PCINFO_ *>;
typedef struct HDC__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHDC__;
typedef struct _OVERLAPPED // Size=20
{
    unsigned long Internal; // Size=4 Offset=0
    unsigned long InternalHigh; // Size=4 Offset=4
    unsigned long Offset; // Size=4 Offset=8
    unsigned long OffsetHigh; // Size=4 Offset=12
    void * hEvent; // Size=4 Offset=16
} OVERLAPPED, *POVERLAPPED;
typedef struct val_context // Size=12
{
    int valuelen; // Size=4 Offset=0
    void * value_context; // Size=4 Offset=4
    void * val_buff_ptr; // Size=4 Offset=8
} *Pval_context;
typedef struct IUnknown // Size=4
{
} *PIUnknown;
typedef struct IEnumSTATSTG // Size=4
{
} *PIEnumSTATSTG;
typedef struct tagHANDLETABLE // Size=4
{
    void * objectHandle[1]; // Size=4 Offset=0
} *PtagHANDLETABLE;
typedef struct tagENHMETARECORD // Size=12
{
    unsigned long iType; // Size=4 Offset=0
    unsigned long nSize; // Size=4 Offset=4
    unsigned long dParm[1]; // Size=4 Offset=8
} *PtagENHMETARECORD;
typedef struct std::binary_function<_WGS_DATA_ *,_WGS_DATA_ *,bool> // Size=1
{
} *Pstd::binary_function<_WGS_DATA_ *,_WGS_DATA_ *,bool>;
typedef struct std::iterator<std::bidirectional_iterator_tag,_QUERY_DATA_ *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_QUERY_DATA_ *,int>;
typedef struct std::binary_function<_BLOCK_PC_ *,_BLOCK_PC_ *,bool> // Size=1
{
} *Pstd::binary_function<_BLOCK_PC_ *,_BLOCK_PC_ *,bool>;
typedef struct std::iterator<std::bidirectional_iterator_tag,_STORAGE_DATA_ *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_STORAGE_DATA_ *,int>;
typedef struct std::binary_function<_LOG_DATA_ *,_LOG_DATA_ *,bool> // Size=1
{
} *Pstd::binary_function<_LOG_DATA_ *,_LOG_DATA_ *,bool>;
typedef struct std::binary_function<CClan *,CClan *,bool> // Size=1
{
} *Pstd::binary_function<CClan *,CClan *,bool>;
typedef struct std::iterator<std::bidirectional_iterator_tag,CClan *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,CClan *,int>;
typedef struct std::unary_function<CClan *,bool> // Size=1
{
} *Pstd::unary_function<CClan *,bool>;
typedef struct std::binary_function<_PCINFO_ *,_PCINFO_ *,bool> // Size=1
{
} *Pstd::binary_function<_PCINFO_ *,_PCINFO_ *,bool>;
typedef struct std::iterator<std::bidirectional_iterator_tag,_BLOCK_PC_ *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_BLOCK_PC_ *,int>;
typedef struct std::unary_function<_BLOCK_PC_ *,bool> // Size=1
{
} *Pstd::unary_function<_BLOCK_PC_ *,bool>;
typedef struct std::binary_function<_LOGIN_DATA_ *,_LOGIN_DATA_ *,bool> // Size=1
{
} *Pstd::binary_function<_LOGIN_DATA_ *,_LOGIN_DATA_ *,bool>;
typedef struct std::binary_function<_STORAGE_DATA_ *,_STORAGE_DATA_ *,bool> // Size=1
{
} *Pstd::binary_function<_STORAGE_DATA_ *,_STORAGE_DATA_ *,bool>;
typedef struct std::iterator<std::bidirectional_iterator_tag,_WGS_DATA_ *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_WGS_DATA_ *,int>;
typedef struct std::iterator<std::bidirectional_iterator_tag,_LOG_DATA_ *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_LOG_DATA_ *,int>;
typedef class std::allocator<_QUERY_DATA_ *> // Size=1
{
} *Pstd::allocator<_QUERY_DATA_ *>;
typedef class std::reverse_bidirectional_iterator<std::list<_QUERY_DATA_ *,std::allocator<_QUERY_DATA_ *> >::iterator,_QUERY_DATA_ *,_QUERY_DATA_ * &,_QUERY_DATA_ * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<_QUERY_DATA_ *,std::allocator<_QUERY_DATA_ *> >::iterator,_QUERY_DATA_ *,_QUERY_DATA_ * &,_QUERY_DATA_ * *,int>;
typedef struct std::not_equal_to<_QUERY_DATA_ *> // Size=1
{
} *Pstd::not_equal_to<_QUERY_DATA_ *>;
typedef struct std::greater<_QUERY_DATA_ *> // Size=1
{
} *Pstd::greater<_QUERY_DATA_ *>;
typedef struct std::iterator<std::bidirectional_iterator_tag,std::pair<unsigned long const ,_Party_Info_>,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,std::pair<unsigned long const ,_Party_Info_>,int>;
typedef struct std::unary_function<_QUERY_DATA_ *,bool> // Size=1
{
} *Pstd::unary_function<_QUERY_DATA_ *,bool>;
typedef struct std::iterator<std::bidirectional_iterator_tag,_LOGIN_DATA_ *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_LOGIN_DATA_ *,int>;
typedef class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,_Party_Info_>,std::map<unsigned long,_Party_Info_,std::less<unsigned long>,std::allocator<_Party_Info_> >::_Kfn,std::less<unsigned long>,std::allocator<_Pade01151a // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,_Party_Info_>,std::map<unsigned long,_Party_Info_,std::less<unsigned long>,std::allocator<_Party_Info_> >::_Kfn,std::less<unsigned long>,std::allocator<_Pade01151a;
typedef struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,_Party_Info_>,std::map<unsigned long,_Party_Info_,std::less<unsigned long>,std::allocator<_Party_Info_> >::_Kfn,std::less<unsigned long>,std::allocator<_Party_Info_> >::iterator,bool> // Size=8
{
    class std::_Tree<unsigned long,std::pair<unsigned long const ,_Party_Info_>,std::map<unsigned long,_Party_Info_,std::less<unsigned long>,std::allocator<_Party_Info_> >::_Kfn,std::less<unsigned long>,std::allocator<_Party_Info_> >::iterator first; // Size=4 Offset=0
    unsigned char second; // Size=1 Offset=4
} *Pstd::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,_Party_Info_>,std::map<unsigned long,_Party_Info_,std::less<unsigned long>,std::allocator<_Party_Info_> >::_Kfn,std::less<unsigned long>,std::allocator<_Party_Info_> >::iterator,bool>;
typedef struct std::less<unsigned long> // Size=1
{
} *Pstd::less<unsigned long>;
typedef class std::allocator<_Party_Info_> // Size=1
{
} *Pstd::allocator<_Party_Info_>;
typedef struct std::unary_function<_LOGIN_DATA_ *,bool> // Size=1
{
} *Pstd::unary_function<_LOGIN_DATA_ *,bool>;
typedef class std::allocator<_APPRENTICE_GROUP_> // Size=1
{
} *Pstd::allocator<_APPRENTICE_GROUP_>;
typedef struct std::iterator<std::bidirectional_iterator_tag,_WARP_DATA_ *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_WARP_DATA_ *,int>;
typedef struct std::unary_function<_WGS_DATA_ *,bool> // Size=1
{
} *Pstd::unary_function<_WGS_DATA_ *,bool>;
typedef struct std::iterator<std::bidirectional_iterator_tag,_PCINFO_ *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_PCINFO_ *,int>;
typedef struct std::unary_function<_STORAGE_DATA_ *,bool> // Size=1
{
} *Pstd::unary_function<_STORAGE_DATA_ *,bool>;
typedef struct std::unary_function<_PCINFO_ *,bool> // Size=1
{
} *Pstd::unary_function<_PCINFO_ *,bool>;
typedef struct std::iterator<std::bidirectional_iterator_tag,std::pair<int const ,_PCINFO_ *>,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,std::pair<int const ,_PCINFO_ *>,int>;
typedef class std::allocator<_WARP_DATA_ *> // Size=1
{
} *Pstd::allocator<_WARP_DATA_ *>;
typedef class std::reverse_bidirectional_iterator<std::list<_WARP_DATA_ *,std::allocator<_WARP_DATA_ *> >::iterator,_WARP_DATA_ *,_WARP_DATA_ * &,_WARP_DATA_ * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<_WARP_DATA_ *,std::allocator<_WARP_DATA_ *> >::iterator,_WARP_DATA_ *,_WARP_DATA_ * &,_WARP_DATA_ * *,int>;
typedef struct std::not_equal_to<_WARP_DATA_ *> // Size=1
{
} *Pstd::not_equal_to<_WARP_DATA_ *>;
typedef struct std::greater<_WARP_DATA_ *> // Size=1
{
} *Pstd::greater<_WARP_DATA_ *>;
typedef struct std::binary_function<_WARP_DATA_ *,_WARP_DATA_ *,bool> // Size=1
{
} *Pstd::binary_function<_WARP_DATA_ *,_WARP_DATA_ *,bool>;
typedef struct std::unary_function<_LOG_DATA_ *,bool> // Size=1
{
} *Pstd::unary_function<_LOG_DATA_ *,bool>;
typedef class std::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,_PCINFO_ *>,std::map<int,_PCINFO_ *,std::less<int>,std::allocator<_PCINFO_ *> >::_Kfn,std::less<int>,std::allocator<_PCINFO_ *> >::iterator,std::pair<int const ,_PCINFO_ *>,stc49af849 // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::_Tree<int,std::pair<int const ,_PCINFO_ *>,std::map<int,_PCINFO_ *,std::less<int>,std::allocator<_PCINFO_ *> >::_Kfn,std::less<int>,std::allocator<_PCINFO_ *> >::iterator,std::pair<int const ,_PCINFO_ *>,stc49af849;
typedef struct std::pair<std::_Tree<int,std::pair<int const ,_PCINFO_ *>,std::map<int,_PCINFO_ *,std::less<int>,std::allocator<_PCINFO_ *> >::_Kfn,std::less<int>,std::allocator<_PCINFO_ *> >::iterator,bool> // Size=8
{
    class std::_Tree<int,std::pair<int const ,_PCINFO_ *>,std::map<int,_PCINFO_ *,std::less<int>,std::allocator<_PCINFO_ *> >::_Kfn,std::less<int>,std::allocator<_PCINFO_ *> >::iterator first; // Size=4 Offset=0
    unsigned char second; // Size=1 Offset=4
} *Pstd::pair<std::_Tree<int,std::pair<int const ,_PCINFO_ *>,std::map<int,_PCINFO_ *,std::less<int>,std::allocator<_PCINFO_ *> >::_Kfn,std::less<int>,std::allocator<_PCINFO_ *> >::iterator,bool>;
typedef struct std::less<int> // Size=1
{
} *Pstd::less<int>;
typedef struct std::unary_function<_WARP_DATA_ *,bool> // Size=1
{
} *Pstd::unary_function<_WARP_DATA_ *,bool>;
typedef struct std::binary_function<_QUERY_DATA_ *,_QUERY_DATA_ *,bool> // Size=1
{
} *Pstd::binary_function<_QUERY_DATA_ *,_QUERY_DATA_ *,bool>;
typedef struct std::binary_function<unsigned long,unsigned long,bool> // Size=1
{
} *Pstd::binary_function<unsigned long,unsigned long,bool>;
typedef struct std::binary_function<int,int,bool> // Size=1
{
} *Pstd::binary_function<int,int,bool>;
typedef struct _LARGE_INTEGER::__unnamed // Size=8
{
    unsigned long LowPart; // Size=4 Offset=0
    long HighPart; // Size=4 Offset=4
} LARGE_INTEGER::__unnamed, *PLARGE_INTEGER::__unnamed;
typedef struct _RPC_VERSION // Size=4
{
    unsigned short MajorVersion; // Size=2 Offset=0
    unsigned short MinorVersion; // Size=2 Offset=2
} RPC_VERSION, *PRPC_VERSION;
typedef struct ISequentialStream // Size=4
{
} *PISequentialStream;
typedef struct tagMETARECORD // Size=8
{
    unsigned long rdSize; // Size=4 Offset=0
    unsigned short rdFunction; // Size=2 Offset=4
    unsigned short rdParm[1]; // Size=2 Offset=6
} *PtagMETARECORD;
typedef struct DLGTEMPLATE // Size=18
{
    unsigned long style; // Size=4 Offset=0
    unsigned long dwExtendedStyle; // Size=4 Offset=4
    unsigned short cdit; // Size=2 Offset=8
    short x; // Size=2 Offset=10
    short y; // Size=2 Offset=12
    short cx; // Size=2 Offset=14
    short cy; // Size=2 Offset=16
} *PDLGTEMPLATE;
typedef struct HICON__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHICON__;
typedef struct tagPOINT // Size=8
{
    long x; // Size=4 Offset=0
    long y; // Size=4 Offset=4
} *PtagPOINT;
typedef struct _PSP // Size=0
{
} PSP, *PPSP;
typedef struct ___unnamed865 // Size=12
{
    void * pad[2]; // Size=8 Offset=0
    void * userContext; // Size=4 Offset=8
} __unnamed865, *P__unnamed865;
typedef struct IRpcChannelBuffer // Size=4
{
} *PIRpcChannelBuffer;
typedef struct ARRAY_INFO // Size=24
{
    long Dimension; // Size=4 Offset=0
    unsigned long * BufferConformanceMark; // Size=4 Offset=4
    unsigned long * BufferVarianceMark; // Size=4 Offset=8
    unsigned long * MaxCountArray; // Size=4 Offset=12
    unsigned long * OffsetArray; // Size=4 Offset=16
    unsigned long * ActualCountArray; // Size=4 Offset=20
} *PARRAY_INFO;
typedef struct _NDR_PIPE_DESC // Size=0
{
} NDR_PIPE_DESC, *PNDR_PIPE_DESC;
typedef struct _NDR_ASYNC_MESSAGE // Size=0
{
} NDR_ASYNC_MESSAGE, *PNDR_ASYNC_MESSAGE;
typedef struct _FLOATING_SAVE_AREA // Size=112
{
    unsigned long ControlWord; // Size=4 Offset=0
    unsigned long StatusWord; // Size=4 Offset=4
    unsigned long TagWord; // Size=4 Offset=8
    unsigned long ErrorOffset; // Size=4 Offset=12
    unsigned long ErrorSelector; // Size=4 Offset=16
    unsigned long DataOffset; // Size=4 Offset=20
    unsigned long DataSelector; // Size=4 Offset=24
    unsigned char RegisterArea[80]; // Size=80 Offset=28
    unsigned long Cr0NpxState; // Size=4 Offset=108
} FLOATING_SAVE_AREA, *PFLOATING_SAVE_AREA;
typedef struct __GENERIC_BINDING_INFO // Size=16
{
    void * pObj; // Size=4 Offset=0
    unsigned int Size; // Size=4 Offset=4
    void * ( * pfnBind)(void *); // Size=4 Offset=8
    void ( * pfnUnbind)(void *,unsigned char *); // Size=4 Offset=12
} _GENERIC_BINDING_INFO, *P_GENERIC_BINDING_INFO;
typedef struct _GENERIC_BINDING_ROUTINE_PAIR // Size=8
{
    void * ( * pfnBind)(void *); // Size=4 Offset=0
    void ( * pfnUnbind)(void *,unsigned char *); // Size=4 Offset=4
} GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;
typedef struct _XMIT_ROUTINE_QUINTUPLE // Size=16
{
    void ( * pfnTranslateToXmit)(struct _MIDL_STUB_MESSAGE *); // Size=4 Offset=0
    void ( * pfnTranslateFromXmit)(struct _MIDL_STUB_MESSAGE *); // Size=4 Offset=4
    void ( * pfnFreeXmit)(struct _MIDL_STUB_MESSAGE *); // Size=4 Offset=8
    void ( * pfnFreeInst)(struct _MIDL_STUB_MESSAGE *); // Size=4 Offset=12
} XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;
typedef struct _MALLOC_FREE_STRUCT // Size=8
{
    void * ( * pfnAllocate)(unsigned int); // Size=4 Offset=0
    void ( * pfnFree)(void *); // Size=4 Offset=4
} MALLOC_FREE_STRUCT, *PMALLOC_FREE_STRUCT;
typedef struct _COMM_FAULT_OFFSETS // Size=4
{
    short CommOffset; // Size=2 Offset=0
    short FaultOffset; // Size=2 Offset=2
} COMM_FAULT_OFFSETS, *PCOMM_FAULT_OFFSETS;
typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE // Size=16
{
    unsigned long ( * pfnBufferSize)(unsigned long *,unsigned long,void *); // Size=4 Offset=0
    unsigned char * ( * pfnMarshall)(unsigned long *,unsigned char *,void *); // Size=4 Offset=4
    unsigned char * ( * pfnUnmarshall)(unsigned long *,unsigned char *,void *); // Size=4 Offset=8
    void ( * pfnFree)(unsigned long *,void *); // Size=4 Offset=12
} USER_MARSHAL_ROUTINE_QUADRUPLE, *PUSER_MARSHAL_ROUTINE_QUADRUPLE;
typedef struct _FULL_PTR_XLAT_TABLES::__unnamed // Size=12
{
    void * * XlatTable; // Size=4 Offset=0
    unsigned char * StateTable; // Size=4 Offset=4
    unsigned long NumberOfEntries; // Size=4 Offset=8
} FULL_PTR_XLAT_TABLES::__unnamed, *PFULL_PTR_XLAT_TABLES::__unnamed;
typedef struct tagRPCOLEMESSAGE // Size=44
{
    void * reserved1; // Size=4 Offset=0
    unsigned long dataRepresentation; // Size=4 Offset=4
    void * Buffer; // Size=4 Offset=8
    unsigned long cbBuffer; // Size=4 Offset=12
    unsigned long iMethod; // Size=4 Offset=16
    void * reserved2[5]; // Size=20 Offset=20
    unsigned long rpcFlags; // Size=4 Offset=40
} *PtagRPCOLEMESSAGE;
typedef class CApprenticeManager // Size=16
{
    class std::map<unsigned long,_APPRENTICE_GROUP_,std::less<unsigned long>,std::allocator<_APPRENTICE_GROUP_> > m_mapApprentice; // Size=16 Offset=0
} *PCApprenticeManager;
typedef class std::map<unsigned long,_APPRENTICE_GROUP_,std::less<unsigned long>,std::allocator<_APPRENTICE_GROUP_> > // Size=16
{
    class std::_Tree<unsigned long,std::pair<unsigned long const ,_APPRENTICE_GROUP_>,std::map<unsigned long,_APPRENTICE_GROUP_,std::less<unsigned long>,std::allocator<_APPRENTICE_GROUP_> >::_Kfn,std::less<unsigned long>,std::allocator<_APPRENTICE_GROUP_> > _Tr; // Size=16 Offset=0
} *Pstd::map<unsigned long,_APPRENTICE_GROUP_,std::less<unsigned long>,std::allocator<_APPRENTICE_GROUP_> >;
typedef class CPCManage // Size=24056
{
    class std::list<_PCINFO_ *,std::allocator<_PCINFO_ *> > PCTable[1000]; // Size=12000 Offset=0
    class std::list<_PCINFO_ *,std::allocator<_PCINFO_ *> > AccntTable[1000]; // Size=12000 Offset=12000
    class std::list<_WARP_DATA_ *,std::allocator<_WARP_DATA_ *> > PCWarpQ; // Size=12 Offset=24000
    class std::list<_LOGIN_DATA_ *,std::allocator<_LOGIN_DATA_ *> > PCLoginQ; // Size=12 Offset=24012
    class CSyncSection m_PCLoginQSync; // Size=28 Offset=24024
    int nDailyRemainHash; // Size=4 Offset=24052
} *PCPCManage;
typedef class CSvrManage // Size=8388836
{
    class COpServer m_OpServer; // Size=4194404 Offset=0
    class CAccountServer m_AccountServer; // Size=4194380 Offset=4194404
    class CZoneServer * m_ZoneServer; // Size=4 Offset=8388784
    int m_iZoneServerNum; // Size=4 Offset=8388788
    class CStandbyServer * m_pStandbyServer[10]; // Size=40 Offset=8388792
    int m_iStandbyServerNum; // Size=4 Offset=8388832
} *PCSvrManage;
typedef class CZoneServer // Size=4194396
{
    int m_bRunServer; // Size=4 Offset=4194372
    unsigned char m_bySvrID; // Size=1 Offset=4194376
    class std::map<int,_PCINFO_ *,std::less<int>,std::allocator<_PCINFO_ *> > ZonePC; // Size=16 Offset=4194380
} *PCZoneServer;
typedef class CStandbyServer // Size=4194380
{
    int m_iIndex; // Size=4 Offset=4194372
    int m_bLogin; // Size=4 Offset=4194376
} *PCStandbyServer;
typedef class std::map<int,_PCINFO_ *,std::less<int>,std::allocator<_PCINFO_ *> > // Size=16
{
    class std::_Tree<int,std::pair<int const ,_PCINFO_ *>,std::map<int,_PCINFO_ *,std::less<int>,std::allocator<_PCINFO_ *> >::_Kfn,std::less<int>,std::allocator<_PCINFO_ *> > _Tr; // Size=16 Offset=0
} *Pstd::map<int,_PCINFO_ *,std::less<int>,std::allocator<_PCINFO_ *> >;
typedef class std::_Lockit // Size=1
{
} *Pstd::_Lockit;
typedef struct std::unary_function<std::pair<unsigned long const ,_APPRENTICE_GROUP_>,unsigned long> // Size=1
{
} *Pstd::unary_function<std::pair<unsigned long const ,_APPRENTICE_GROUP_>,unsigned long>;
typedef class std::_Tree // Size=0
{
} *Pstd::_Tree;
typedef struct std::binary_function<std::pair<unsigned long const ,_APPRENTICE_GROUP_>,std::pair<unsigned long const ,_APPRENTICE_GROUP_>,bool> // Size=1
{
} *Pstd::binary_function<std::pair<unsigned long const ,_APPRENTICE_GROUP_>,std::pair<unsigned long const ,_APPRENTICE_GROUP_>,bool>;
typedef struct std::unary_function<std::pair<int const ,_PCINFO_ *>,int> // Size=1
{
} *Pstd::unary_function<std::pair<int const ,_PCINFO_ *>,int>;
typedef struct std::binary_function<std::pair<int const ,_PCINFO_ *>,std::pair<int const ,_PCINFO_ *>,bool> // Size=1
{
} *Pstd::binary_function<std::pair<int const ,_PCINFO_ *>,std::pair<int const ,_PCINFO_ *>,bool>;
typedef struct _FDB_CLAN_LOG // Size=46
{
    unsigned char byLogType; // Size=1 Offset=0
    char szClanName[32]; // Size=32 Offset=1
    char szMemberName[13]; // Size=13 Offset=33
} FDB_CLAN_LOG, *PFDB_CLAN_LOG;
typedef struct tm // Size=36
{
    int tm_sec; // Size=4 Offset=0
    int tm_min; // Size=4 Offset=4
    int tm_hour; // Size=4 Offset=8
    int tm_mday; // Size=4 Offset=12
    int tm_mon; // Size=4 Offset=16
    int tm_year; // Size=4 Offset=20
    int tm_wday; // Size=4 Offset=24
    int tm_yday; // Size=4 Offset=28
    int tm_isdst; // Size=4 Offset=32
} *Ptm;
typedef class CTickManage // Size=40
{
    long m_lNowTick; // Size=4 Offset=0
    long m_lSecondNewDate; // Size=4 Offset=4
    long m_lSecondOClock; // Size=4 Offset=8
    long m_lSecond10Min; // Size=4 Offset=12
    long m_lSecond120; // Size=4 Offset=16
    long m_lSecond60; // Size=4 Offset=20
    long m_lSecond30; // Size=4 Offset=24
    long m_lSecond10; // Size=4 Offset=28
    long m_lSecond2; // Size=4 Offset=32
    long m_lSecond1; // Size=4 Offset=36
} *PCTickManage;
typedef struct _DBSVR_INFO_ // Size=20
{
    char szDBIP[16]; // Size=16 Offset=0
    int nDBPort; // Size=4 Offset=16
} DBSVR_INFO_, *PDBSVR_INFO_;
typedef class CLoopSleepMgr // Size=20
{
    int m_iInterval; // Size=4 Offset=4
    unsigned long m_dwLongSleep; // Size=4 Offset=8
    unsigned long m_dwShortSleep; // Size=4 Offset=12
    int m_iCounter; // Size=4 Offset=16
} *PCLoopSleepMgr;
typedef class CStorageMgr // Size=12028
{
    class std::list<_STORAGE_DATA_ *,std::allocator<_STORAGE_DATA_ *> > m_StorageTable[1000]; // Size=12000 Offset=0
    class CSyncSection m_StorageTableSync; // Size=28 Offset=12000
} *PCStorageMgr;
typedef class ostream // Size=88
{
    int x_floatused; // Size=4 Offset=4
} *Postream;
typedef class istream // Size=92
{
    int _fGline; // Size=4 Offset=4
    int x_gcount; // Size=4 Offset=8
} *Pistream;
typedef class istream_withassign // Size=92
{
} *Pistream_withassign;
typedef class ostream_withassign // Size=88
{
} *Postream_withassign;
typedef class iostream // Size=100
{
} *Piostream;
typedef struct WSAData // Size=400
{
    unsigned short wVersion; // Size=2 Offset=0
    unsigned short wHighVersion; // Size=2 Offset=2
    char szDescription[257]; // Size=257 Offset=4
    char szSystemStatus[129]; // Size=129 Offset=261
    unsigned short iMaxSockets; // Size=2 Offset=390
    unsigned short iMaxUdpDg; // Size=2 Offset=392
    char * lpVendorInfo; // Size=4 Offset=396
} *PWSAData;
typedef struct _KDHELP // Size=28
{
    unsigned long Thread; // Size=4 Offset=0
    unsigned long ThCallbackStack; // Size=4 Offset=4
    unsigned long NextCallback; // Size=4 Offset=8
    unsigned long FramePointer; // Size=4 Offset=12
    unsigned long KiCallUserMode; // Size=4 Offset=16
    unsigned long KeUserCallbackDispatcher; // Size=4 Offset=20
    unsigned long SystemRangeStart; // Size=4 Offset=24
} KDHELP, *PKDHELP;
typedef struct _IMAGEHLP_SYMBOL // Size=24
{
    unsigned long SizeOfStruct; // Size=4 Offset=0
    unsigned long Address; // Size=4 Offset=4
    unsigned long Size; // Size=4 Offset=8
    unsigned long Flags; // Size=4 Offset=12
    unsigned long MaxNameLength; // Size=4 Offset=16
    char Name[1]; // Size=1 Offset=20
} IMAGEHLP_SYMBOL, *PIMAGEHLP_SYMBOL;
typedef struct _FPO_DATA // Size=16
{
    unsigned long ulOffStart; // Size=4 Offset=0
    unsigned long cbProcSize; // Size=4 Offset=4
    unsigned long cdwLocals; // Size=4 Offset=8
    unsigned short cdwParams; // Size=2 Offset=12
    struct
    {
        unsigned short cbProlog: 8; // Size=2 Offset=14 BitOffset=0 BitCount=8
        unsigned short cbRegs: 3; // Size=2 Offset=14 BitOffset=8 BitCount=3
        unsigned short fHasSEH: 1; // Size=2 Offset=14 BitOffset=11 BitCount=1
        unsigned short fUseBP: 1; // Size=2 Offset=14 BitOffset=12 BitCount=1
        unsigned short reserved: 1; // Size=2 Offset=14 BitOffset=13 BitCount=1
        unsigned short cbFrame: 2; // Size=2 Offset=14 BitOffset=14 BitCount=2
    };
} FPO_DATA, *PFPO_DATA;
typedef class _InternalExceptionHandlerClass // Size=1
{
} InternalExceptionHandlerClass, *PInternalExceptionHandlerClass;
typedef class CPartyManage // Size=16
{
    class std::map<unsigned long,_Party_Info_,std::less<unsigned long>,std::allocator<_Party_Info_> > m_PartyMap; // Size=16 Offset=0
} *PCPartyManage;
typedef struct _Warp_Postion_ // Size=8
{
    unsigned short wMapIndex; // Size=2 Offset=0
    unsigned long dwCellIndex; // Size=4 Offset=4
} Warp_Postion_, *PWarp_Postion_;
typedef struct _SYSTEMTIME // Size=16
{
    unsigned short wYear; // Size=2 Offset=0
    unsigned short wMonth; // Size=2 Offset=2
    unsigned short wDayOfWeek; // Size=2 Offset=4
    unsigned short wDay; // Size=2 Offset=6
    unsigned short wHour; // Size=2 Offset=8
    unsigned short wMinute; // Size=2 Offset=10
    unsigned short wSecond; // Size=2 Offset=12
    unsigned short wMilliseconds; // Size=2 Offset=14
} SYSTEMTIME, *PSYSTEMTIME;
typedef struct HBRUSH__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHBRUSH__;
typedef struct tagRECT // Size=16
{
    long left; // Size=4 Offset=0
    long top; // Size=4 Offset=4
    long right; // Size=4 Offset=8
    long bottom; // Size=4 Offset=12
} *PtagRECT;
typedef struct _ITEM_DEFAULT_WEAR_ // Size=8
{
    unsigned long code; // Size=4 Offset=0
    unsigned char byWearIndex; // Size=1 Offset=4
} ITEM_DEFAULT_WEAR_, *PITEM_DEFAULT_WEAR_;
typedef union _LARGE_INTEGER // Size=8
{
    struct
    {
        unsigned long LowPart; // Size=4 Offset=0
        long HighPart; // Size=4 Offset=4
    };
    struct _LARGE_INTEGER::___unnamed43 u; // Size=8 Offset=0
    __int64 QuadPart; // Size=8 Offset=0
} LARGE_INTEGER, *PLARGE_INTEGER;
typedef union _ULARGE_INTEGER // Size=8
{
    struct
    {
        unsigned long LowPart; // Size=4 Offset=0
        unsigned long HighPart; // Size=4 Offset=4
    };
    struct _ULARGE_INTEGER::___unnamed46 u; // Size=8 Offset=0
    unsigned __int64 QuadPart; // Size=8 Offset=0
} ULARGE_INTEGER, *PULARGE_INTEGER;
typedef struct tagCAH // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    union _LARGE_INTEGER * pElems; // Size=4 Offset=4
} *PtagCAH;
typedef struct tagCAUH // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    union _ULARGE_INTEGER * pElems; // Size=4 Offset=4
} *PtagCAUH;
typedef struct tagCACY // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    union tagCY * pElems; // Size=4 Offset=4
} *PtagCACY;
typedef struct tagCAFILETIME // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    struct _FILETIME * pElems; // Size=4 Offset=4
} *PtagCAFILETIME;
typedef struct tagCACLSID // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    struct _GUID * pElems; // Size=4 Offset=4
} *PtagCACLSID;
typedef struct tagCACLIPDATA // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    struct tagCLIPDATA * pElems; // Size=4 Offset=4
} *PtagCACLIPDATA;
typedef struct tagCABSTRBLOB // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    struct tagBSTRBLOB * pElems; // Size=4 Offset=4
} *PtagCABSTRBLOB;
typedef struct tagCAPROPVARIANT // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    struct tagPROPVARIANT * pElems; // Size=4 Offset=4
} *PtagCAPROPVARIANT;
typedef struct in_addr // Size=4
{
    union in_addr::___unnamed94 S_un; // Size=4 Offset=0
} *Pin_addr;
typedef struct _RSVP_FILTERSPEC_V4 // Size=8
{
    union _IN_ADDR_IPV4 Address; // Size=4 Offset=0
    unsigned short Unused; // Size=2 Offset=4
    unsigned short Port; // Size=2 Offset=6
} RSVP_FILTERSPEC_V4, *PRSVP_FILTERSPEC_V4;
typedef struct _RSVP_FILTERSPEC_V6 // Size=20
{
    struct _IN_ADDR_IPV6 Address; // Size=16 Offset=0
    unsigned short UnUsed; // Size=2 Offset=16
    unsigned short Port; // Size=2 Offset=18
} RSVP_FILTERSPEC_V6, *PRSVP_FILTERSPEC_V6;
typedef struct _RSVP_FILTERSPEC_V6_FLOW // Size=20
{
    struct _IN_ADDR_IPV6 Address; // Size=16 Offset=0
    unsigned char UnUsed; // Size=1 Offset=16
    unsigned char FlowLabel[3]; // Size=3 Offset=17
} RSVP_FILTERSPEC_V6_FLOW, *PRSVP_FILTERSPEC_V6_FLOW;
typedef struct _RSVP_FILTERSPEC_V4_GPI // Size=8
{
    union _IN_ADDR_IPV4 Address; // Size=4 Offset=0
    unsigned long GeneralPortId; // Size=4 Offset=4
} RSVP_FILTERSPEC_V4_GPI, *PRSVP_FILTERSPEC_V4_GPI;
typedef struct _RSVP_FILTERSPEC_V6_GPI // Size=20
{
    struct _IN_ADDR_IPV6 Address; // Size=16 Offset=0
    unsigned long GeneralPortId; // Size=4 Offset=16
} RSVP_FILTERSPEC_V6_GPI, *PRSVP_FILTERSPEC_V6_GPI;
typedef struct _SOCKET_ADDRESS // Size=8
{
    struct sockaddr * lpSockaddr; // Size=4 Offset=0
    int iSockaddrLength; // Size=4 Offset=4
} SOCKET_ADDRESS, *PSOCKET_ADDRESS;
typedef struct _PC_QUEST_INFO_ // Size=28
{
    int QuestIndex; // Size=4 Offset=0
    struct _PC_QUEST_INFO_::_PC_QUEST_DATA_ QuestData[7]; // Size=21 Offset=4
} PC_QUEST_INFO_, *PPC_QUEST_INFO_;
typedef struct _SAVE_QUEST_INFO_ // Size=12
{
    int QuestIndex; // Size=4 Offset=0
    union _SAVE_QUEST_INFO_::_SAVE_QUEST_DATA_ QuestData[7]; // Size=7 Offset=4
} SAVE_QUEST_INFO_, *PSAVE_QUEST_INFO_;
typedef class std::list<_LOGIN_DATA_ *,std::allocator<_LOGIN_DATA_ *> > // Size=12
{
    class std::allocator<_LOGIN_DATA_ *> allocator; // Size=1 Offset=0
    struct std::list<_LOGIN_DATA_ *,std::allocator<_LOGIN_DATA_ *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<_LOGIN_DATA_ *,std::allocator<_LOGIN_DATA_ *> >;
typedef struct _LOGIN_DATA_ // Size=172
{
    char szPCName[13]; // Size=13 Offset=0
    char szAccountName[21]; // Size=21 Offset=13
    unsigned long dwPCID; // Size=4 Offset=36
    unsigned char byGateSvrID; // Size=1 Offset=40
    long tvTime; // Size=4 Offset=44
    struct _PCDATA_ * pPCData; // Size=4 Offset=48
    char szPasswd[21]; // Size=21 Offset=52
    char szIP[16]; // Size=16 Offset=73
    unsigned long RemainTime; // Size=4 Offset=92
    char PayMode[4]; // Size=4 Offset=96
    long PayNo; // Size=4 Offset=100
    char Reserved1[33]; // Size=33 Offset=104
    char Reserved2[33]; // Size=33 Offset=137
} LOGIN_DATA_, *PLOGIN_DATA_;
typedef class std::list<_PCINFO_ *,std::allocator<_PCINFO_ *> > // Size=12
{
    class std::allocator<_PCINFO_ *> allocator; // Size=1 Offset=0
    struct std::list<_PCINFO_ *,std::allocator<_PCINFO_ *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<_PCINFO_ *,std::allocator<_PCINFO_ *> >;
typedef struct std::pair<int const ,_PCINFO_ *> // Size=8
{
    int first; // Size=4 Offset=0
    struct _PCINFO_ * second; // Size=4 Offset=4
} *Pstd::pair<int const ,_PCINFO_ *>;
typedef class std::list<_QUERY_DATA_ *,std::allocator<_QUERY_DATA_ *> > // Size=12
{
    class std::allocator<_QUERY_DATA_ *> allocator; // Size=1 Offset=0
    struct std::list<_QUERY_DATA_ *,std::allocator<_QUERY_DATA_ *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<_QUERY_DATA_ *,std::allocator<_QUERY_DATA_ *> >;
typedef struct _LASTINGSKILL_MANAGEARRARY_ // Size=48
{
    struct _LASTINGSKILL_INFO_ LastingSkillInfo[4]; // Size=48 Offset=0
} LASTINGSKILL_MANAGEARRARY_, *PLASTINGSKILL_MANAGEARRARY_;
typedef class std::list<_WARP_DATA_ *,std::allocator<_WARP_DATA_ *> > // Size=12
{
    class std::allocator<_WARP_DATA_ *> allocator; // Size=1 Offset=0
    struct std::list<_WARP_DATA_ *,std::allocator<_WARP_DATA_ *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<_WARP_DATA_ *,std::allocator<_WARP_DATA_ *> >;
typedef class CBaseServer // Size=4194372
{
    int m_bConnect; // Size=4 Offset=4
    unsigned int m_sSocket; // Size=4 Offset=8
    void * m_wsaEvent; // Size=4 Offset=12
    struct _WSANETWORKEVENTS m_netEvent; // Size=44 Offset=16
########################################
    int m_nEndPos; // Size=4 Offset=4194368
} *PCBaseServer;
typedef class MSG_S2M_APPRENTICE_CREATE // Size=46
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    struct _PARTNER_INFO_ stMemberInfo[2]; // Size=40 Offset=2
    unsigned long dwApprenticeID; // Size=4 Offset=42
} *PMSG_S2M_APPRENTICE_CREATE;
typedef class MSG_S2M_APPRENTICE_UPDATE // Size=38
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwApprenticeID; // Size=4 Offset=2
    struct _APPRENTICE_MEMBER_ stMemberInfo; // Size=32 Offset=6
} *PMSG_S2M_APPRENTICE_UPDATE;
typedef class MSG_M2S_CLAN_INFO // Size=418
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    char szClanName[32]; // Size=32 Offset=7
    unsigned long dwClanID; // Size=4 Offset=39
    unsigned long dwMarkID; // Size=4 Offset=43
    unsigned long dwStorageID; // Size=4 Offset=47
    unsigned char Clan_Rank; // Size=1 Offset=51
    unsigned short wAgit_ID; // Size=2 Offset=52
    struct _KNIGHT_INFO_ arrKnightInfo[13]; // Size=364 Offset=54
} *PMSG_M2S_CLAN_INFO;
typedef class MSG_M2S_KNIGHT_INFO // Size=36
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char byCode; // Size=1 Offset=7
    struct _KNIGHT_INFO_ KnightInfo; // Size=28 Offset=8
} *PMSG_M2S_KNIGHT_INFO;
typedef struct _CLAN_DATA_ // Size=364
{
    unsigned long dwClanID; // Size=4 Offset=0
    unsigned long dwMarkID; // Size=4 Offset=4
    unsigned long dwCDate; // Size=4 Offset=8
    unsigned long dwDDate; // Size=4 Offset=12
    char szClanName[32]; // Size=32 Offset=16
    char szClanPasswd[16]; // Size=16 Offset=48
    unsigned char nation; // Size=1 Offset=64
    unsigned char clanRank; // Size=1 Offset=65
    unsigned char clanStat; // Size=1 Offset=66
    unsigned char byReserved; // Size=1 Offset=67
    unsigned short wStorageIndex; // Size=2 Offset=68
    unsigned short wAgitID; // Size=2 Offset=70
    unsigned short wWinCnt; // Size=2 Offset=72
    unsigned short wLooseCnt; // Size=2 Offset=74
    unsigned short wReserved; // Size=2 Offset=76
    struct _CLAN_MEMBER_ Member[13]; // Size=286 Offset=78
} CLAN_DATA_, *PCLAN_DATA_;
typedef class std::list<_BLOCK_PC_ *,std::allocator<_BLOCK_PC_ *> > // Size=12
{
    class std::allocator<_BLOCK_PC_ *> allocator; // Size=1 Offset=0
    struct std::list<_BLOCK_PC_ *,std::allocator<_BLOCK_PC_ *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<_BLOCK_PC_ *,std::allocator<_BLOCK_PC_ *> >;
typedef struct _RTL_CRITICAL_SECTION // Size=24
{
    struct _RTL_CRITICAL_SECTION_DEBUG * DebugInfo; // Size=4 Offset=0
    long LockCount; // Size=4 Offset=4
    long RecursionCount; // Size=4 Offset=8
    void * OwningThread; // Size=4 Offset=12
    void * LockSemaphore; // Size=4 Offset=16
    unsigned long SpinCount; // Size=4 Offset=20
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;
typedef struct _REC_DATA_ // Size=14104
{
    unsigned short wProtocol; // Size=2 Offset=0
    int bResult; // Size=4 Offset=4
    char id[21]; // Size=21 Offset=8
    char s_header_a[255]; // Size=255 Offset=29
    char s_header_b[255]; // Size=255 Offset=284
    char s_header_c[255]; // Size=255 Offset=539
    char header_a[255]; // Size=255 Offset=794
    char header_b[255]; // Size=255 Offset=1049
    char header_c[255]; // Size=255 Offset=1304
    char c_date[20]; // Size=20 Offset=1559
    char u_date[20]; // Size=20 Offset=1579
    char stauts[20]; // Size=20 Offset=1599
    char pbody[8192]; // Size=8192 Offset=1619
    struct _REC_BODY_ RecBody; // Size=4292 Offset=9811
} REC_DATA_, *PREC_DATA_;
typedef struct _STORAGE_DATA_ // Size=1308
{
    char szAccountName[21]; // Size=21 Offset=0
    unsigned long dwStorageMoney; // Size=4 Offset=24
    struct _STORAGE_ITEM_ StorageItem[80]; // Size=1280 Offset=28
} STORAGE_DATA_, *PSTORAGE_DATA_;
typedef class std::list<_STORAGE_DATA_ *,std::allocator<_STORAGE_DATA_ *> > // Size=12
{
    class std::allocator<_STORAGE_DATA_ *> allocator; // Size=1 Offset=0
    struct std::list<_STORAGE_DATA_ *,std::allocator<_STORAGE_DATA_ *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<_STORAGE_DATA_ *,std::allocator<_STORAGE_DATA_ *> >;
typedef struct _Party_Info_ // Size=80
{
    struct _Member_Info arrMember[4]; // Size=80 Offset=0
} Party_Info_, *PParty_Info_;
typedef struct _ZONE_SERVER_INFO_ // Size=40
{
    struct _MAP_INFO_ arrMap[10]; // Size=40 Offset=0
} ZONE_SERVER_INFO_, *PZONE_SERVER_INFO_;
typedef class std::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> > // Size=12
{
    class std::allocator<_LOG_DATA_ *> allocator; // Size=1 Offset=0
    struct std::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> >;
typedef class std::list<CClan *,std::allocator<CClan *> > // Size=12
{
    class std::allocator<CClan *> allocator; // Size=1 Offset=0
    struct std::list<CClan *,std::allocator<CClan *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<CClan *,std::allocator<CClan *> >;
typedef struct _APPRENTICE_GROUP_ // Size=64
{
    struct _APPRENTICE_MEMBER_ arrPartner[2]; // Size=64 Offset=0
} APPRENTICE_GROUP_, *PAPPRENTICE_GROUP_;
typedef class std::list<_WGS_DATA_ *,std::allocator<_WGS_DATA_ *> > // Size=12
{
    class std::allocator<_WGS_DATA_ *> allocator; // Size=1 Offset=0
    struct std::list<_WGS_DATA_ *,std::allocator<_WGS_DATA_ *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<_WGS_DATA_ *,std::allocator<_WGS_DATA_ *> >;
typedef class std::binder2nd<std::not_equal_to<CClan *> > // Size=8
{
    struct std::not_equal_to<CClan *> op; // Size=1 Offset=0
    class CClan * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<CClan *> >;
typedef struct _s__CatchableTypeArray // Size=4
{
    int nCatchableTypes; // Size=4 Offset=0
} s__CatchableTypeArray, *Ps__CatchableTypeArray;
typedef struct _s__ThrowInfo // Size=16
{
    unsigned int attributes; // Size=4 Offset=0
    void ( * pmfnUnwind)(); // Size=4 Offset=4
    int ( * pForwardCompat)(<NoType>); // Size=4 Offset=8
    struct _s__CatchableTypeArray * pCatchableTypeArray; // Size=4 Offset=12
} s__ThrowInfo, *Ps__ThrowInfo;
typedef struct _LIST_ENTRY // Size=8
{
    struct _LIST_ENTRY * Flink; // Size=4 Offset=0
    struct _LIST_ENTRY * Blink; // Size=4 Offset=4
} LIST_ENTRY, *PLIST_ENTRY;
typedef struct tagHELPINFO // Size=28
{
    unsigned int cbSize; // Size=4 Offset=0
    int iContextType; // Size=4 Offset=4
    int iCtrlId; // Size=4 Offset=8
    void * hItemHandle; // Size=4 Offset=12
    unsigned long dwContextId; // Size=4 Offset=16
    struct tagPOINT MousePos; // Size=8 Offset=20
} *PtagHELPINFO;
typedef struct _RPC_ASYNC_STATE::__unnamed::__unnamed // Size=8
{
    void ( * NotificationRoutine)(struct _RPC_ASYNC_STATE *,void *,enum _RPC_ASYNC_EVENT); // Size=4 Offset=0
    void * hThread; // Size=4 Offset=4
} RPC_ASYNC_STATE::__unnamed::__unnamed, *PRPC_ASYNC_STATE::__unnamed::__unnamed;
typedef struct _RPC_MESSAGE // Size=44
{
    void * Handle; // Size=4 Offset=0
    unsigned long DataRepresentation; // Size=4 Offset=4
    void * Buffer; // Size=4 Offset=8
    unsigned int BufferLength; // Size=4 Offset=12
    unsigned int ProcNum; // Size=4 Offset=16
    struct _RPC_SYNTAX_IDENTIFIER * TransferSyntax; // Size=4 Offset=20
    void * RpcInterfaceInformation; // Size=4 Offset=24
    void * ReservedForRuntime; // Size=4 Offset=28
    void * ManagerEpv; // Size=4 Offset=32
    void * ImportContext; // Size=4 Offset=36
    unsigned long RpcFlags; // Size=4 Offset=40
} RPC_MESSAGE, *PRPC_MESSAGE;
typedef struct _EXCEPTION_RECORD // Size=80
{
    unsigned long ExceptionCode; // Size=4 Offset=0
    unsigned long ExceptionFlags; // Size=4 Offset=4
    struct _EXCEPTION_RECORD * ExceptionRecord; // Size=4 Offset=8
    void * ExceptionAddress; // Size=4 Offset=12
    unsigned long NumberParameters; // Size=4 Offset=16
    unsigned long ExceptionInformation[15]; // Size=60 Offset=20
} EXCEPTION_RECORD, *PEXCEPTION_RECORD;
typedef struct _CONTEXT // Size=716
{
    unsigned long ContextFlags; // Size=4 Offset=0
    unsigned long Dr0; // Size=4 Offset=4
    unsigned long Dr1; // Size=4 Offset=8
    unsigned long Dr2; // Size=4 Offset=12
    unsigned long Dr3; // Size=4 Offset=16
    unsigned long Dr6; // Size=4 Offset=20
    unsigned long Dr7; // Size=4 Offset=24
    struct _FLOATING_SAVE_AREA FloatSave; // Size=112 Offset=28
    unsigned long SegGs; // Size=4 Offset=140
    unsigned long SegFs; // Size=4 Offset=144
    unsigned long SegEs; // Size=4 Offset=148
    unsigned long SegDs; // Size=4 Offset=152
    unsigned long Edi; // Size=4 Offset=156
    unsigned long Esi; // Size=4 Offset=160
    unsigned long Ebx; // Size=4 Offset=164
    unsigned long Edx; // Size=4 Offset=168
    unsigned long Ecx; // Size=4 Offset=172
    unsigned long Eax; // Size=4 Offset=176
    unsigned long Ebp; // Size=4 Offset=180
    unsigned long Eip; // Size=4 Offset=184
    unsigned long SegCs; // Size=4 Offset=188
    unsigned long EFlags; // Size=4 Offset=192
    unsigned long Esp; // Size=4 Offset=196
    unsigned long SegSs; // Size=4 Offset=200
    unsigned char ExtendedRegisters[512]; // Size=512 Offset=204
} CONTEXT, *PCONTEXT;
typedef union _MIDL_STUB_DESC::__unnamed // Size=4
{
    void * * pAutoHandle; // Size=4 Offset=0
    void * * pPrimitiveHandle; // Size=4 Offset=0
    struct __GENERIC_BINDING_INFO * pGenericBindingInfo; // Size=4 Offset=0
} MIDL_STUB_DESC::__unnamed, *PMIDL_STUB_DESC::__unnamed;
typedef struct _FULL_PTR_TO_REFID_ELEMENT // Size=16
{
    struct _FULL_PTR_TO_REFID_ELEMENT * Next; // Size=4 Offset=0
    void * Pointer; // Size=4 Offset=4
    unsigned long RefId; // Size=4 Offset=8
    unsigned char State; // Size=1 Offset=12
} FULL_PTR_TO_REFID_ELEMENT, *PFULL_PTR_TO_REFID_ELEMENT;
typedef struct std::pair<int,_PCINFO_ *> // Size=8
{
    int first; // Size=4 Offset=0
    struct _PCINFO_ * second; // Size=4 Offset=4
} *Pstd::pair<int,_PCINFO_ *>;
typedef class CDBManage // Size=48
{
    struct _DBSVR_INFO_ * m_DBCharacSvrInfo; // Size=4 Offset=16
    class CDBCharac * m_DBCharac; // Size=4 Offset=20
    int m_DBCharacSvrNum; // Size=4 Offset=24
    int m_DBCharacLoadBalance; // Size=4 Offset=28
    struct _DBSVR_INFO_ * m_DBStorageSvrInfo; // Size=4 Offset=32
    class CDBStorage * m_DBStorage; // Size=4 Offset=36
    int m_DBStorageSvrNum; // Size=4 Offset=40
    int m_DBStorageLoadBalance; // Size=4 Offset=44
} *PCDBManage;
typedef struct __CRT_LIST_ENTRY // Size=8
{
    struct __CRT_LIST_ENTRY * Flink; // Size=4 Offset=0
    struct __CRT_LIST_ENTRY * Blink; // Size=4 Offset=4
} _CRT_LIST_ENTRY, *P_CRT_LIST_ENTRY;
typedef struct _CRT_CRITICAL_SECTION // Size=24
{
    struct _CRT_CRITICAL_SECTION_DEBUG * DebugInfo; // Size=4 Offset=0
    long LockCount; // Size=4 Offset=4
    long RecursionCount; // Size=4 Offset=8
    void * OwningThread; // Size=4 Offset=12
    void * LockSemaphore; // Size=4 Offset=16
    unsigned long Reserved; // Size=4 Offset=20
} CRT_CRITICAL_SECTION, *PCRT_CRITICAL_SECTION;
typedef class CListenServer // Size=68
{
    unsigned int m_sSocket; // Size=4 Offset=16
    void * m_wsaEvent; // Size=4 Offset=20
    struct _WSANETWORKEVENTS m_netEvent; // Size=44 Offset=24
} *PCListenServer;
typedef struct _tagADDRESS // Size=12
{
    unsigned long Offset; // Size=4 Offset=0
    unsigned short Segment; // Size=2 Offset=4
    enum ADDRESS_MODE Mode; // Size=4 Offset=8
} tagADDRESS, *PtagADDRESS;
typedef struct _IMAGEHLP_MODULE // Size=572
{
    unsigned long SizeOfStruct; // Size=4 Offset=0
    unsigned long BaseOfImage; // Size=4 Offset=4
    unsigned long ImageSize; // Size=4 Offset=8
    unsigned long TimeDateStamp; // Size=4 Offset=12
    unsigned long CheckSum; // Size=4 Offset=16
    unsigned long NumSyms; // Size=4 Offset=20
    enum SYM_TYPE SymType; // Size=4 Offset=24
    char ModuleName[32]; // Size=32 Offset=28
    char ImageName[256]; // Size=256 Offset=60
    char LoadedImageName[256]; // Size=256 Offset=316
} IMAGEHLP_MODULE, *PIMAGEHLP_MODULE;
typedef union in_addr::__unnamed // Size=4
{
    struct in_addr::___unnamed95::___unnamed95 S_un_b; // Size=4 Offset=0
    struct in_addr::___unnamed96::___unnamed96 S_un_w; // Size=4 Offset=0
    unsigned long S_addr; // Size=4 Offset=0
} *Pin_addr::__unnamed;
typedef struct _ITEM_IN_WEAR_ // Size=20
{
    union _ITEM_ID_ ItemID; // Size=8 Offset=0
    union _ITEM_INFO_ ItemInfo; // Size=4 Offset=8
    unsigned long ItemKey; // Size=4 Offset=12
    unsigned char byWearIndex; // Size=1 Offset=16
} ITEM_IN_WEAR_, *PITEM_IN_WEAR_;
typedef struct _ITEM_IN_INVEN_ // Size=20
{
    union _ITEM_ID_ ItemID; // Size=8 Offset=0
    union _ITEM_INFO_ ItemInfo; // Size=4 Offset=8
    unsigned long ItemKey; // Size=4 Offset=12
    unsigned char byInvenIndex; // Size=1 Offset=16
} ITEM_IN_INVEN_, *PITEM_IN_INVEN_;
typedef struct _ACCOUNT_ITEM_ // Size=16
{
    union _ITEM_ID_ ItemID; // Size=8 Offset=0
    union _ITEM_INFO_ ItemInfo; // Size=4 Offset=8
    unsigned char byWearIndex; // Size=1 Offset=12
} ACCOUNT_ITEM_, *PACCOUNT_ITEM_;
typedef struct _ITEM_IN_STORAGE_ // Size=20
{
    union _ITEM_ID_ ItemID; // Size=8 Offset=0
    union _ITEM_INFO_ ItemInfo; // Size=4 Offset=8
    unsigned long ItemKey; // Size=4 Offset=12
    unsigned char byStorageIndex; // Size=1 Offset=16
} ITEM_IN_STORAGE_, *PITEM_IN_STORAGE_;
typedef class CSyncSection // Size=28
{
    struct _RTL_CRITICAL_SECTION m_cs; // Size=24 Offset=0
    unsigned char m_bLocked; // Size=1 Offset=24
} *PCSyncSection;
typedef struct std::pair<unsigned long const ,_Party_Info_> // Size=84
{
    unsigned long first; // Size=4 Offset=0
    struct _Party_Info_ second; // Size=80 Offset=4
} *Pstd::pair<unsigned long const ,_Party_Info_>;
typedef struct sockaddr_in // Size=16
{
    short sin_family; // Size=2 Offset=0
    unsigned short sin_port; // Size=2 Offset=2
    struct in_addr sin_addr; // Size=4 Offset=4
    char sin_zero[8]; // Size=8 Offset=8
} *Psockaddr_in;
typedef class MSG_S2V_ZONE_INFO // Size=42
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
    struct _ZONE_SERVER_INFO_ Info; // Size=40 Offset=2
} *PMSG_S2V_ZONE_INFO;
typedef class CClan // Size=448
{
    struct _CLAN_INFO_ m_ClanInfo; // Size=80 Offset=0
    struct _KNIGHT_INFO_ m_arrMembers[13]; // Size=364 Offset=80
    int m_bEmpty; // Size=4 Offset=444
} *PCClan;
typedef class CClanMainMgr // Size=400064
{
    struct _REIGNCLAN_ m_Reign; // Size=44 Offset=0
    class std::list<CClan *,std::allocator<CClan *> > m_ClanPtrList; // Size=12 Offset=44
    unsigned short m_wClanCount; // Size=2 Offset=56
    unsigned char m_byWorldID; // Size=1 Offset=58
    struct _CLAN_NAME_TABLE_ m_ClanNameTable[10000]; // Size=400000 Offset=60
    int m_nClanLogCnt; // Size=4 Offset=400060
} *PCClanMainMgr;
typedef class std::binder2nd<std::not_equal_to<_WGS_DATA_ *> > // Size=8
{
    struct std::not_equal_to<_WGS_DATA_ *> op; // Size=1 Offset=0
    struct _WGS_DATA_ * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<_WGS_DATA_ *> >;
typedef class std::binder2nd<std::not_equal_to<_LOGIN_DATA_ *> > // Size=8
{
    struct std::not_equal_to<_LOGIN_DATA_ *> op; // Size=1 Offset=0
    struct _LOGIN_DATA_ * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<_LOGIN_DATA_ *> >;
typedef struct _s__CatchableType // Size=28
{
    unsigned int properties; // Size=4 Offset=0
    struct _TypeDescriptor * pType; // Size=4 Offset=4
    struct _PMD thisDisplacement; // Size=12 Offset=8
    int sizeOrOffset; // Size=4 Offset=20
    void ( * copyFunction)(); // Size=4 Offset=24
} s__CatchableType, *Ps__CatchableType;
typedef class std::binder2nd<std::not_equal_to<_LOG_DATA_ *> > // Size=8
{
    struct std::not_equal_to<_LOG_DATA_ *> op; // Size=1 Offset=0
    struct _LOG_DATA_ * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<_LOG_DATA_ *> >;
typedef class std::binder2nd<std::not_equal_to<_BLOCK_PC_ *> > // Size=8
{
    struct std::not_equal_to<_BLOCK_PC_ *> op; // Size=1 Offset=0
    struct _BLOCK_PC_ * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<_BLOCK_PC_ *> >;
typedef struct _QualityOfService // Size=72
{
    struct _flowspec SendingFlowspec; // Size=32 Offset=0
    struct _flowspec ReceivingFlowspec; // Size=32 Offset=32
    struct _WSABUF ProviderSpecific; // Size=8 Offset=64
} QualityOfService, *PQualityOfService;
typedef class std::binder2nd<std::not_equal_to<_STORAGE_DATA_ *> > // Size=8
{
    struct std::not_equal_to<_STORAGE_DATA_ *> op; // Size=1 Offset=0
    struct _STORAGE_DATA_ * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<_STORAGE_DATA_ *> >;
typedef class std::binder2nd<std::not_equal_to<_PCINFO_ *> > // Size=8
{
    struct std::not_equal_to<_PCINFO_ *> op; // Size=1 Offset=0
    struct _PCINFO_ * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<_PCINFO_ *> >;
typedef struct _EXCEPTION_POINTERS // Size=8
{
    struct _EXCEPTION_RECORD * ExceptionRecord; // Size=4 Offset=0
    struct _CONTEXT * ContextRecord; // Size=4 Offset=4
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
typedef class std::binder2nd<std::not_equal_to<_QUERY_DATA_ *> > // Size=8
{
    struct std::not_equal_to<_QUERY_DATA_ *> op; // Size=1 Offset=0
    struct _QUERY_DATA_ * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<_QUERY_DATA_ *> >;
typedef class std::binder2nd<std::not_equal_to<_WARP_DATA_ *> > // Size=8
{
    struct std::not_equal_to<_WARP_DATA_ *> op; // Size=1 Offset=0
    struct _WARP_DATA_ * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<_WARP_DATA_ *> >;
typedef struct _RPC_SYNTAX_IDENTIFIER // Size=20
{
    struct _GUID SyntaxGUID; // Size=16 Offset=0
    struct _RPC_VERSION SyntaxVersion; // Size=4 Offset=16
} RPC_SYNTAX_IDENTIFIER, *PRPC_SYNTAX_IDENTIFIER;
typedef struct _FDB_CLAN_INFO_ // Size=448
{
    unsigned char byFlag; // Size=1 Offset=0
    struct _CLAN_INFO_ ClanInfo; // Size=80 Offset=4
    struct _KNIGHT_INFO_ Members[13]; // Size=364 Offset=84
} FDB_CLAN_INFO_, *PFDB_CLAN_INFO_;
typedef class CDBStorage // Size=4227296
{
    struct _STORAGE_DATA_ m_StorageData; // Size=1308 Offset=4225988
} *PCDBStorage;
typedef class ios // Size=80
{
    union
    {
        struct
        {
            long basefield; // Size=4 Offset=0
            class streambuf * bp; // Size=4 Offset=4
            int state; // Size=4 Offset=8
            int ispecial; // Size=4 Offset=12
            int ospecial; // Size=4 Offset=16
            int isfx_special; // Size=4 Offset=20
            int osfx_special; // Size=4 Offset=24
            int x_delbuf; // Size=4 Offset=28
        };
        long adjustfield; // Size=4 Offset=0
        long floatfield; // Size=4 Offset=0
        void ( * stdioflush)(); // Size=4 Offset=0
        long x_maxbit; // Size=4 Offset=0
        int x_curindex; // Size=4 Offset=0
        int sunk_with_stdio; // Size=4 Offset=0
        long x_statebuf[8]; // Size=32 Offset=0
        int fLockcInit; // Size=4 Offset=0
        struct _CRT_CRITICAL_SECTION x_lockc; // Size=24 Offset=0
    };
    class ostream * x_tie; // Size=4 Offset=32
    long x_flags; // Size=4 Offset=36
    int x_precision; // Size=4 Offset=40
    char x_fill; // Size=1 Offset=44
    int x_width; // Size=4 Offset=48
    int LockFlg; // Size=4 Offset=52
    struct _CRT_CRITICAL_SECTION x_lock; // Size=24 Offset=56
} *Pios;
typedef class streambuf // Size=76
{
    int _fAlloc; // Size=4 Offset=4
    int _fUnbuf; // Size=4 Offset=8
    int x_lastc; // Size=4 Offset=12
    char * _base; // Size=4 Offset=16
    char * _ebuf; // Size=4 Offset=20
    char * _pbase; // Size=4 Offset=24
    char * _pptr; // Size=4 Offset=28
    char * _epptr; // Size=4 Offset=32
    char * _eback; // Size=4 Offset=36
    char * _gptr; // Size=4 Offset=40
    char * _egptr; // Size=4 Offset=44
    int LockFlg; // Size=4 Offset=48
    struct _CRT_CRITICAL_SECTION x_lock; // Size=24 Offset=52
} *Pstreambuf;
typedef struct tagMSG // Size=28
{
    struct HWND__ * hwnd; // Size=4 Offset=0
    unsigned int message; // Size=4 Offset=4
    unsigned int wParam; // Size=4 Offset=8
    long lParam; // Size=4 Offset=12
    unsigned long time; // Size=4 Offset=16
    struct tagPOINT pt; // Size=8 Offset=20
} *PtagMSG;
typedef struct tagPAINTSTRUCT // Size=64
{
    struct HDC__ * hdc; // Size=4 Offset=0
    int fErase; // Size=4 Offset=4
    struct tagRECT rcPaint; // Size=16 Offset=8
    int fRestore; // Size=4 Offset=24
    int fIncUpdate; // Size=4 Offset=28
    unsigned char rgbReserved[32]; // Size=32 Offset=32
} *PtagPAINTSTRUCT;
typedef struct _CONTROL_SERVICE // Size=44
{
    unsigned long Length; // Size=4 Offset=0
    unsigned long Service; // Size=4 Offset=4
    struct _AD_GENERAL_PARAMS Overrides; // Size=20 Offset=8
    union
    {
        struct _AD_GUARANTEED Guaranteed; // Size=16 Offset=28
        struct _PARAM_BUFFER ParamBuffer[1]; // Size=12 Offset=28
    };
} CONTROL_SERVICE, *PCONTROL_SERVICE;
typedef struct _PET_INFO_ // Size=20
{
    union _PET_ID_ PetID; // Size=8 Offset=0
    unsigned long Serial; // Size=4 Offset=8
    union _PET_INFO_::_PET_DATA0_ PetData0; // Size=4 Offset=12
    union _PET_INFO_::_PET_DATA1_ PetData1; // Size=4 Offset=16
} PET_INFO_, *PPET_INFO_;
typedef struct _CHARACTER_INFO_ // Size=180
{
    char szPCName[13]; // Size=13 Offset=0
    unsigned char byType; // Size=1 Offset=13
    unsigned char byNationality; // Size=1 Offset=14
    unsigned short wLevel; // Size=2 Offset=16
    struct _ACCOUNT_ITEM_ WearList[10]; // Size=160 Offset=20
} CHARACTER_INFO_, *PCHARACTER_INFO_;
typedef class MSG_M2S_LOAD_STORAGE // Size=1611
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned long dwStorageMoney; // Size=4 Offset=7
    struct _ITEM_IN_STORAGE_ StorageItemList[80]; // Size=1600 Offset=11
} *PMSG_M2S_LOAD_STORAGE;
typedef class MSG_S2M_SAVE_STORAGE // Size=1619
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szCharacterName[13]; // Size=13 Offset=2
    unsigned long dwStorageMoney; // Size=4 Offset=15
    struct _ITEM_IN_STORAGE_ StorageItemList[80]; // Size=1600 Offset=19
} *PMSG_S2M_SAVE_STORAGE;
typedef class CDB // Size=4225988
{
    int m_bRunServer; // Size=4 Offset=4194372
    char m_szIP[32]; // Size=32 Offset=4194376
    int m_nPort; // Size=4 Offset=4194408
    int m_nQuerySize; // Size=4 Offset=4194412
    char m_QueryMsgBuf[8192]; // Size=8192 Offset=4194416
    char m_QueryMsgBufDump[8192]; // Size=8192 Offset=4202608
    struct _REC_DATA_ m_RecData; // Size=14104 Offset=4210800
    struct _REC_DATA_ERR_ m_RecDataErr; // Size=1036 Offset=4224904
    class std::list<_QUERY_DATA_ *,std::allocator<_QUERY_DATA_ *> > QueryQ; // Size=12 Offset=4225940
    int m_bWaitResponse; // Size=4 Offset=4225952
    class CSyncSection m_QuerySync; // Size=28 Offset=4225956
    class CFileLogMgr m_DBFileLog; // Size=1 Offset=4225984
} *PCDB;
typedef class CGameLog // Size=132
{
    int m_bConnect; // Size=4 Offset=16
    unsigned int m_sSocket; // Size=4 Offset=20
    void * m_wsaEvent; // Size=4 Offset=24
    struct _WSANETWORKEVENTS m_netEvent; // Size=44 Offset=28
    char m_szAddr[16]; // Size=16 Offset=72
    int m_nPort; // Size=4 Offset=88
    int m_nConnectTryCount; // Size=4 Offset=92
    class std::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> > m_LogDataQ; // Size=12 Offset=96
    struct _RTL_CRITICAL_SECTION m_csSend; // Size=24 Offset=108
} *PCGameLog;
typedef struct _RTL_CRITICAL_SECTION_DEBUG // Size=32
{
    unsigned short Type; // Size=2 Offset=0
    unsigned short CreatorBackTraceIndex; // Size=2 Offset=2
    struct _RTL_CRITICAL_SECTION * CriticalSection; // Size=4 Offset=4
    struct _LIST_ENTRY ProcessLocksList; // Size=8 Offset=8
    unsigned long EntryCount; // Size=4 Offset=16
    unsigned long ContentionCount; // Size=4 Offset=20
    unsigned long Spare[2]; // Size=8 Offset=24
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG;
typedef struct _RPC_ASYNC_STATE // Size=68
{
    unsigned int Size; // Size=4 Offset=0
    unsigned long Signature; // Size=4 Offset=4
    long Lock; // Size=4 Offset=8
    unsigned long Flags; // Size=4 Offset=12
    void * StubInfo; // Size=4 Offset=16
    void * UserInfo; // Size=4 Offset=20
    void * RuntimeInfo; // Size=4 Offset=24
    enum _RPC_ASYNC_EVENT Event; // Size=4 Offset=28
    enum _RPC_NOTIFICATION_TYPES NotificationType; // Size=4 Offset=32
    union _RPC_ASYNC_STATE::___unnamed680 u; // Size=16 Offset=36
    long Reserved[4]; // Size=16 Offset=52
} RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;
typedef struct _FULL_PTR_XLAT_TABLES // Size=32
{
    struct _FULL_PTR_XLAT_TABLES::___unnamed862 RefIdToPointer; // Size=12 Offset=0
    struct _FULL_PTR_XLAT_TABLES::___unnamed863 PointerToRefId; // Size=12 Offset=12
    unsigned long NextRefId; // Size=4 Offset=24
    enum XLAT_SIDE XlatSide; // Size=4 Offset=28
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;
typedef struct _CRT_CRITICAL_SECTION_DEBUG // Size=48
{
    unsigned short Type; // Size=2 Offset=0
    unsigned short CreatorBackTraceIndex; // Size=2 Offset=2
    struct _CRT_CRITICAL_SECTION * CriticalSection; // Size=4 Offset=4
    struct __CRT_LIST_ENTRY ProcessLocksList; // Size=8 Offset=8
    unsigned long EntryCount; // Size=4 Offset=16
    unsigned long ContentionCount; // Size=4 Offset=20
    unsigned long Depth; // Size=4 Offset=24
    void * OwnerBackTrace[5]; // Size=20 Offset=28
} CRT_CRITICAL_SECTION_DEBUG, *PCRT_CRITICAL_SECTION_DEBUG;
typedef struct _tagSTACKFRAME // Size=116
{
    struct _tagADDRESS AddrPC; // Size=12 Offset=0
    struct _tagADDRESS AddrReturn; // Size=12 Offset=12
    struct _tagADDRESS AddrFrame; // Size=12 Offset=24
    struct _tagADDRESS AddrStack; // Size=12 Offset=36
    void * FuncTableEntry; // Size=4 Offset=48
    unsigned long Params[4]; // Size=16 Offset=52
    int Far; // Size=4 Offset=68
    int Virtual; // Size=4 Offset=72
    unsigned long Reserved[3]; // Size=12 Offset=76
    struct _KDHELP KdHelp; // Size=28 Offset=88
} tagSTACKFRAME, *PtagSTACKFRAME;
typedef class CSystemMgr // Size=1056
{
    struct sockaddr_in m_peerAddr; // Size=16 Offset=1036
    long m_lShutDownTime; // Size=4 Offset=1052
} *PCSystemMgr;
typedef class MSG_M2S_CHAR_UPDATE // Size=203
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szAccountName[21]; // Size=21 Offset=2
    struct _CHARACTER_INFO_ CharInfo; // Size=180 Offset=23
} *PMSG_M2S_CHAR_UPDATE;
typedef struct tagSTATSTG // Size=72
{
    unsigned short * pwcsName; // Size=4 Offset=0
    unsigned long type; // Size=4 Offset=4
    union _ULARGE_INTEGER cbSize; // Size=8 Offset=8
    struct _FILETIME mtime; // Size=8 Offset=16
    struct _FILETIME ctime; // Size=8 Offset=24
    struct _FILETIME atime; // Size=8 Offset=32
    unsigned long grfMode; // Size=4 Offset=40
    unsigned long grfLocksSupported; // Size=4 Offset=44
    struct _GUID clsid; // Size=16 Offset=48
    unsigned long grfStateBits; // Size=4 Offset=64
    unsigned long reserved; // Size=4 Offset=68
} *PtagSTATSTG;
typedef union _RPC_ASYNC_STATE::__unnamed // Size=16
{
    struct _RPC_ASYNC_STATE::___unnamed817::___unnamed817 APC; // Size=8 Offset=0
    struct _RPC_ASYNC_STATE::___unnamed819::___unnamed819 IOC; // Size=16 Offset=0
    struct _RPC_ASYNC_STATE::___unnamed821::___unnamed821 HWND; // Size=8 Offset=0
    void * hEvent; // Size=4 Offset=0
    void ( * NotificationRoutine)(struct _RPC_ASYNC_STATE *,void *,enum _RPC_ASYNC_EVENT); // Size=4 Offset=0
} RPC_ASYNC_STATE::__unnamed, *PRPC_ASYNC_STATE::__unnamed;
typedef struct _PROPSHEETPAGEW // Size=48
{
    unsigned long dwSize; // Size=4 Offset=0
    unsigned long dwFlags; // Size=4 Offset=4
    struct HINSTANCE__ * hInstance; // Size=4 Offset=8
    union
    {
        unsigned short * pszTemplate; // Size=4 Offset=12
        struct DLGTEMPLATE * pResource; // Size=4 Offset=12
    };
    union
    {
        struct HICON__ * hIcon; // Size=4 Offset=16
        unsigned short * pszIcon; // Size=4 Offset=16
    };
    unsigned short * pszTitle; // Size=4 Offset=20
    int ( * pfnDlgProc)(struct HWND__ *,unsigned int,unsigned int,long); // Size=4 Offset=24
    long lParam; // Size=4 Offset=28
    unsigned int ( * pfnCallback)(struct HWND__ *,unsigned int,struct _PROPSHEETPAGEW *); // Size=4 Offset=32
    unsigned int * pcRefParent; // Size=4 Offset=36
    unsigned short * pszHeaderTitle; // Size=4 Offset=40
    unsigned short * pszHeaderSubTitle; // Size=4 Offset=44
} PROPSHEETPAGEW, *PPROPSHEETPAGEW;
typedef struct _PROPSHEETPAGEA // Size=48
{
    unsigned long dwSize; // Size=4 Offset=0
    unsigned long dwFlags; // Size=4 Offset=4
    struct HINSTANCE__ * hInstance; // Size=4 Offset=8
    union
    {
        char * pszTemplate; // Size=4 Offset=12
        struct DLGTEMPLATE * pResource; // Size=4 Offset=12
    };
    union
    {
        struct HICON__ * hIcon; // Size=4 Offset=16
        char * pszIcon; // Size=4 Offset=16
    };
    char * pszTitle; // Size=4 Offset=20
    int ( * pfnDlgProc)(struct HWND__ *,unsigned int,unsigned int,long); // Size=4 Offset=24
    long lParam; // Size=4 Offset=28
    unsigned int ( * pfnCallback)(struct HWND__ *,unsigned int,struct _PROPSHEETPAGEA *); // Size=4 Offset=32
    unsigned int * pcRefParent; // Size=4 Offset=36
    char * pszHeaderTitle; // Size=4 Offset=40
    char * pszHeaderSubTitle; // Size=4 Offset=44
} PROPSHEETPAGEA, *PPROPSHEETPAGEA;
typedef struct tagWNDCLASSA // Size=40
{
    unsigned int style; // Size=4 Offset=0
    long ( * lpfnWndProc)(struct HWND__ *,unsigned int,unsigned int,long); // Size=4 Offset=4
    int cbClsExtra; // Size=4 Offset=8
    int cbWndExtra; // Size=4 Offset=12
    struct HINSTANCE__ * hInstance; // Size=4 Offset=16
    struct HICON__ * hIcon; // Size=4 Offset=20
    struct HICON__ * hCursor; // Size=4 Offset=24
    struct HBRUSH__ * hbrBackground; // Size=4 Offset=28
    char * lpszMenuName; // Size=4 Offset=32
    char * lpszClassName; // Size=4 Offset=36
} *PtagWNDCLASSA;
typedef struct _ZONE_WARP_DATA_ // Size=268
{
    struct _LASTINGSKILL_MANAGEARRARY_ LastingSkillManageArray; // Size=48 Offset=0
    struct _LASTINGITEM_ARRAY_ LastingItemArray[5]; // Size=40 Offset=48
    unsigned long dwPartyID; // Size=4 Offset=88
    struct _PARTISAN_ arrMyParty[3]; // Size=24 Offset=92
    unsigned long dwApprenticeID; // Size=4 Offset=116
    struct _APPRENTICE_INFO_ stApprenticeInfo; // Size=4 Offset=120
    unsigned short wAgitID; // Size=2 Offset=124
    unsigned long dwMarkID; // Size=4 Offset=128
    char szClanName[32]; // Size=32 Offset=132
    char szPasswd[21]; // Size=21 Offset=164
    long RemainTime; // Size=4 Offset=188
    unsigned char PayMode; // Size=1 Offset=192
    int PayNo; // Size=4 Offset=196
    char Reserved1[33]; // Size=33 Offset=200
    char Reserved2[33]; // Size=33 Offset=233
} ZONE_WARP_DATA_, *PZONE_WARP_DATA_;
typedef struct _MIDL_STUB_DESC // Size=80
{
    void * RpcInterfaceInformation; // Size=4 Offset=0
    void * ( * pfnAllocate)(unsigned int); // Size=4 Offset=4
    void ( * pfnFree)(void *); // Size=4 Offset=8
    union _MIDL_STUB_DESC::___unnamed851 IMPLICIT_HANDLE_INFO; // Size=4 Offset=12
    void ( * * apfnNdrRundownRoutines)(void *); // Size=4 Offset=16
    struct _GENERIC_BINDING_ROUTINE_PAIR * aGenericBindingRoutinePairs; // Size=4 Offset=20
    void ( * * apfnExprEval)(struct _MIDL_STUB_MESSAGE *); // Size=4 Offset=24
    struct _XMIT_ROUTINE_QUINTUPLE * aXmitQuintuple; // Size=4 Offset=28
    unsigned char * pFormatTypes; // Size=4 Offset=32
    int fCheckBounds; // Size=4 Offset=36
    unsigned long Version; // Size=4 Offset=40
    struct _MALLOC_FREE_STRUCT * pMallocFreeStruct; // Size=4 Offset=44
    long MIDLVersion; // Size=4 Offset=48
    struct _COMM_FAULT_OFFSETS * CommFaultOffsets; // Size=4 Offset=52
    struct _USER_MARSHAL_ROUTINE_QUADRUPLE * aUserMarshalQuadruple; // Size=4 Offset=56
    long Reserved1; // Size=4 Offset=60
    long Reserved2; // Size=4 Offset=64
    long Reserved3; // Size=4 Offset=68
    long Reserved4; // Size=4 Offset=72
    long Reserved5; // Size=4 Offset=76
} MIDL_STUB_DESC, *PMIDL_STUB_DESC;
typedef struct _MIDL_STUB_MESSAGE // Size=180
{
    struct _RPC_MESSAGE * RpcMsg; // Size=4 Offset=0
    unsigned char * Buffer; // Size=4 Offset=4
    unsigned char * BufferStart; // Size=4 Offset=8
    unsigned char * BufferEnd; // Size=4 Offset=12
    unsigned char * BufferMark; // Size=4 Offset=16
    unsigned long BufferLength; // Size=4 Offset=20
    unsigned long MemorySize; // Size=4 Offset=24
    unsigned char * Memory; // Size=4 Offset=28
    int IsClient; // Size=4 Offset=32
    int ReuseBuffer; // Size=4 Offset=36
    unsigned char * AllocAllNodesMemory; // Size=4 Offset=40
    unsigned char * AllocAllNodesMemoryEnd; // Size=4 Offset=44
    int IgnoreEmbeddedPointers; // Size=4 Offset=48
    unsigned char * PointerBufferMark; // Size=4 Offset=52
    unsigned char fBufferValid; // Size=1 Offset=56
    unsigned char Unused; // Size=1 Offset=57
    unsigned long MaxCount; // Size=4 Offset=60
    unsigned long Offset; // Size=4 Offset=64
    unsigned long ActualCount; // Size=4 Offset=68
    void * ( * pfnAllocate)(unsigned int); // Size=4 Offset=72
    void ( * pfnFree)(void *); // Size=4 Offset=76
    unsigned char * StackTop; // Size=4 Offset=80
    unsigned char * pPresentedType; // Size=4 Offset=84
    unsigned char * pTransmitType; // Size=4 Offset=88
    void * SavedHandle; // Size=4 Offset=92
    struct _MIDL_STUB_DESC * StubDesc; // Size=4 Offset=96
    struct _FULL_PTR_XLAT_TABLES * FullPtrXlatTables; // Size=4 Offset=100
    unsigned long FullPtrRefId; // Size=4 Offset=104
    int fCheckBounds; // Size=4 Offset=108
    struct
    {
        int fInDontFree: 1; // Size=4 Offset=112 BitOffset=0 BitCount=1
        int fDontCallFreeInst: 1; // Size=4 Offset=112 BitOffset=1 BitCount=1
        int fInOnlyParam: 1; // Size=4 Offset=112 BitOffset=2 BitCount=1
        int fHasReturn: 1; // Size=4 Offset=112 BitOffset=3 BitCount=1
    };
    unsigned long dwDestContext; // Size=4 Offset=116
    void * pvDestContext; // Size=4 Offset=120
    struct ___unnamed699 * * SavedContextHandles; // Size=4 Offset=124
    long ParamNumber; // Size=4 Offset=128
    struct IRpcChannelBuffer * pRpcChannelBuffer; // Size=4 Offset=132
    struct ARRAY_INFO * pArrayInfo; // Size=4 Offset=136
    unsigned long * SizePtrCountArray; // Size=4 Offset=140
    unsigned long * SizePtrOffsetArray; // Size=4 Offset=144
    unsigned long * SizePtrLengthArray; // Size=4 Offset=148
    void * pArgQueue; // Size=4 Offset=152
    unsigned long dwStubPhase; // Size=4 Offset=156
    struct _NDR_PIPE_DESC * pPipeDesc; // Size=4 Offset=160
    struct _NDR_ASYNC_MESSAGE * pAsyncMsg; // Size=4 Offset=164
    unsigned long Reserved[3]; // Size=12 Offset=168
} MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;
typedef struct _PCDATA_ // Size=1044
{
    char szPCName[13]; // Size=13 Offset=0
    char szAccountName[21]; // Size=21 Offset=13
    unsigned char byType; // Size=1 Offset=34
    unsigned short wLevel; // Size=2 Offset=36
    unsigned long dwExp; // Size=4 Offset=40
    unsigned short wStr; // Size=2 Offset=44
    unsigned short wMagic; // Size=2 Offset=46
    unsigned short wDex; // Size=2 Offset=48
    unsigned short wVit; // Size=2 Offset=50
    unsigned short wMana; // Size=2 Offset=52
    unsigned short wPoint; // Size=2 Offset=54
    unsigned short wHP; // Size=2 Offset=56
    unsigned short wMp; // Size=2 Offset=58
    unsigned short wStoredHp; // Size=2 Offset=60
    unsigned short wStoredMp; // Size=2 Offset=62
    unsigned short wMapIndex; // Size=2 Offset=64
    unsigned long dwCellIndex; // Size=4 Offset=68
    struct _SKILL_ SkillList; // Size=12 Offset=72
    unsigned char byPKCount; // Size=1 Offset=84
    unsigned short wRTime; // Size=2 Offset=86
    struct _SOCIALINFO_ SInfo; // Size=4 Offset=88
    unsigned long dwMoney; // Size=4 Offset=92
    unsigned long dwLore; // Size=4 Offset=96
    unsigned short wLastQuest; // Size=2 Offset=100
    unsigned long dwReserved0; // Size=4 Offset=104
    unsigned long dwReserved1; // Size=4 Offset=108
    struct _ITEM_IN_WEAR_ WearList[10]; // Size=200 Offset=112
    struct _ITEM_IN_INVEN_ HaveList[30]; // Size=600 Offset=312
    struct _PET_INFO_ PetActive; // Size=20 Offset=912
    struct _PET_INFO_ PetInven[5]; // Size=100 Offset=932
    struct _SAVE_QUEST_INFO_ SaveQuestInfo; // Size=12 Offset=1032
} PCDATA_, *PPCDATA_;
typedef class MSG_M2S_WORLD_LOGIN // Size=1165
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    struct _PCDATA_ PCData; // Size=1044 Offset=6
    char szPasswd[21]; // Size=21 Offset=1050
    char szIP[16]; // Size=16 Offset=1071
    unsigned long RemainTime; // Size=4 Offset=1087
    char PayMode[4]; // Size=4 Offset=1091
    long PayNo; // Size=4 Offset=1095
    char Reserved1[33]; // Size=33 Offset=1099
    char Reserved2[33]; // Size=33 Offset=1132
} *PMSG_M2S_WORLD_LOGIN;
typedef class MSG_S2M_CHAR_LOGOUT // Size=1050
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    struct _PCDATA_ PCData; // Size=1044 Offset=6
} *PMSG_S2M_CHAR_LOGOUT;
typedef class MSG_S2M_DATA_UPDATE // Size=1050
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    struct _PCDATA_ PCData; // Size=1044 Offset=6
} *PMSG_S2M_DATA_UPDATE;
typedef class MSG_B2M_ASK_WARP_B2Z // Size=1051
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    struct _PCDATA_ PCData; // Size=1044 Offset=7
} *PMSG_B2M_ASK_WARP_B2Z;
typedef class MSG_M2S_ANS_WARP_B2Z // Size=1067
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    char szIP[16]; // Size=16 Offset=7
    struct _PCDATA_ PCData; // Size=1044 Offset=23
} *PMSG_M2S_ANS_WARP_B2Z;
typedef class CDBCharac // Size=4227032
{
    struct _PCDATA_ m_PCData; // Size=1044 Offset=4225988
} *PCDBCharac;
typedef class MSG_S2M_ASK_WARP_Z2B // Size=1059
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    struct _PCDATA_ PCData; // Size=1044 Offset=7
    struct _BATTLE_WARP_DATA_ BtWarpData; // Size=8 Offset=1051
} *PMSG_S2M_ASK_WARP_Z2B;
typedef class MSG_M2B_ANS_WARP_Z2B // Size=1439
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    char szIP[16]; // Size=16 Offset=7
    struct _PCDATA_ PCData; // Size=1044 Offset=23
    struct _CLAN_DATA_ ClanData; // Size=364 Offset=1067
    struct _BATTLE_WARP_DATA_ BtWarpData; // Size=8 Offset=1431
} *PMSG_M2B_ANS_WARP_Z2B;
typedef class MSG_S2M_WARP_ZONE // Size=1319
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    struct _PCDATA_ PCData; // Size=1044 Offset=7
    struct _ZONE_WARP_DATA_ WarpData; // Size=268 Offset=1051
} *PMSG_S2M_WARP_ZONE;
typedef class MSG_M2S_WARP_LOGIN // Size=1335
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    char szIP[16]; // Size=16 Offset=7
    struct _PCDATA_ PCData; // Size=1044 Offset=23
    struct _ZONE_WARP_DATA_ WarpData; // Size=268 Offset=1067
} *PMSG_M2S_WARP_LOGIN;
typedef struct _WARP_DATA_ // Size=1332
{
    unsigned long dwPCID; // Size=4 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=4
    long tvTime; // Size=4 Offset=8
    struct _PCDATA_ PCData; // Size=1044 Offset=12
    struct _ZONE_WARP_DATA_ ZnWarpData; // Size=268 Offset=1056
    struct _BATTLE_WARP_DATA_ BtWarpData; // Size=8 Offset=1324
} WARP_DATA_, *PWARP_DATA_;
typedef struct tagPROPVARIANT // Size=16
{
    unsigned short vt; // Size=2 Offset=0
    unsigned short wReserved1; // Size=2 Offset=2
    unsigned short wReserved2; // Size=2 Offset=4
    unsigned short wReserved3; // Size=2 Offset=6
    union
    {
        unsigned char bVal; // Size=1 Offset=8
        short iVal; // Size=2 Offset=8
        unsigned short uiVal; // Size=2 Offset=8
        short boolVal; // Size=2 Offset=8
        long lVal; // Size=4 Offset=8
        unsigned long ulVal; // Size=4 Offset=8
        float fltVal; // Size=4 Offset=8
        long scode; // Size=4 Offset=8
        union _LARGE_INTEGER hVal; // Size=8 Offset=8
        union _ULARGE_INTEGER uhVal; // Size=8 Offset=8
        double dblVal; // Size=8 Offset=8
        union tagCY cyVal; // Size=8 Offset=8
        double date; // Size=8 Offset=8
        struct _FILETIME filetime; // Size=8 Offset=8
        struct _GUID * puuid; // Size=4 Offset=8
        struct tagBLOB blob; // Size=8 Offset=8
        struct tagCLIPDATA * pclipdata; // Size=4 Offset=8
        struct IStream * pStream; // Size=4 Offset=8
        struct IStorage * pStorage; // Size=4 Offset=8
        unsigned short * bstrVal; // Size=4 Offset=8
        struct tagBSTRBLOB bstrblobVal; // Size=8 Offset=8
        char * pszVal; // Size=4 Offset=8
        unsigned short * pwszVal; // Size=4 Offset=8
        struct tagCAUB caub; // Size=8 Offset=8
        struct tagCAI cai; // Size=8 Offset=8
        struct tagCAUI caui; // Size=8 Offset=8
        struct tagCABOOL cabool; // Size=8 Offset=8
        struct tagCAL cal; // Size=8 Offset=8
        struct tagCAUL caul; // Size=8 Offset=8
        struct tagCAFLT caflt; // Size=8 Offset=8
        struct tagCASCODE cascode; // Size=8 Offset=8
        struct tagCAH cah; // Size=8 Offset=8
        struct tagCAUH cauh; // Size=8 Offset=8
        struct tagCADBL cadbl; // Size=8 Offset=8
        struct tagCACY cacy; // Size=8 Offset=8
        struct tagCADATE cadate; // Size=8 Offset=8
        struct tagCAFILETIME cafiletime; // Size=8 Offset=8
        struct tagCACLSID cauuid; // Size=8 Offset=8
        struct tagCACLIPDATA caclipdata; // Size=8 Offset=8
        struct tagCABSTR cabstr; // Size=8 Offset=8
        struct tagCABSTRBLOB cabstrblob; // Size=8 Offset=8
        struct tagCALPSTR calpstr; // Size=8 Offset=8
        struct tagCALPWSTR calpwstr; // Size=8 Offset=8
        struct tagCAPROPVARIANT capropvar; // Size=8 Offset=8
    };
} *PtagPROPVARIANT;

#endif
