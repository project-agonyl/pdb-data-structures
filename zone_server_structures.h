#ifndef _STRUCTURES_H
#define _STRUCTURES_H

// File generated by PDBRipper ver 1.13 (http://www.ntinfo.biz)
// Bugreports : horsicq@gmail.com


enum std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Mref
{
    _FROZEN=255
};
enum _ENUM_PC_STAT
{
    PC_STANDBY=0,
    PC_TIMEOUT=1,
    PC_DIED=2,
    PC_STANDING=3,
    PC_MOVEOK=4,
    PC_MOVING=5,
    PC_OUTSIDE=6,
    PC_WARPWAIT=7,
    PC_LOGOUT=8,
    PC_PRISONER=9
};
enum NPCAI_STATE
{
    NPCAI_STATE_DEFAULT=0,
    NPCAI_STATE_REGEN=1,
    NPCAI_STATE_DIED=2,
    NPCAI_STATE_MOVE_FORWARD=3,
    NPCAI_STATE_MOVE_BACKWARD=4,
    NPCAI_STATE_BOSS_ATTACK_READY=5
};
enum CQuest::__unnamed
{
    RET_LOAD_NONE=0,
    RET_LOAD_ERROR=1,
    RET_LOAD_OK=2
};
enum std::_Tree<unsigned long,std::pair<unsigned long const ,_ITEM_ *>,std::map<unsigned long,_ITEM_ *,std::less<unsigned long>,std::allocator<_ITEM_ *> >::_Kfn,std::less<unsigned long>,std::allocator<_ITEM_ *> >::_Redbl
{
    _Red=0,
    _Black=1
};
enum ___unnamed_1162286907
{
    NPCSIZE_SMALL=0,
    NPCSIZE_MIDDLE=1,
    NPCSIZE_BIG=2,
    NPCSIZE_HUZE=3
};
enum STUB_PHASE
{
    STUB_UNMARSHAL=0,
    STUB_CALL_SERVER=1,
    STUB_MARSHAL=2,
    STUB_CALL_SERVER_NO_HRESULT=3
};
enum LATENCY_TIME
{
    LT_DONT_CARE=0,
    LT_LOWEST_LATENCY=1
};
enum FilterType
{
    FILTERSPECV4=1,
    FILTERSPECV6=2,
    FILTERSPECV6_FLOW=3,
    FILTERSPECV4_GPI=4,
    FILTERSPECV6_GPI=5,
    FILTERSPEC_END=6
};
enum PROXY_PHASE
{
    PROXY_CALCSIZE=0,
    PROXY_GETBUFFER=1,
    PROXY_MARSHAL=2,
    PROXY_SENDRECEIVE=3,
    PROXY_UNMARSHAL=4
};
enum XLAT_SIDE
{
    XLAT_SERVER=1,
    XLAT_CLIENT=2
};
enum _RPC_ASYNC_EVENT
{
    RpcCallComplete=0,
    RpcSendComplete=1,
    RpcReceiveComplete=2
};
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone=0,
    RpcNotificationTypeEvent=1,
    RpcNotificationTypeApc=2,
    RpcNotificationTypeIoc=3,
    RpcNotificationTypeHwnd=4,
    RpcNotificationTypeCallback=5
};
enum ios::io_state
{
    goodbit=0,
    eofbit=1,
    failbit=2,
    badbit=4
};
enum ios::open_mode
{
    in=1,
    out=2,
    ate=4,
    app=8,
    trunc=16,
    nocreate=32,
    noreplace=64,
    binary=128
};
enum ios::seek_dir
{
    beg=0,
    cur=1,
    end=2
};
enum ios::__unnamed
{
    skipws=1,
    left=2,
    right=4,
    internal=8,
    dec=16,
    oct=32,
    hex=64,
    showbase=128,
    showpoint=256,
    uppercase=512,
    showpos=1024,
    scientific=2048,
    fixed=4096,
    unitbuf=8192,
    stdio=16384
};
enum ADDRESS_MODE
{
    AddrMode1616=0,
    AddrMode1632=1,
    AddrModeReal=2,
    AddrModeFlat=3
};
enum SYM_TYPE
{
    SymNone=0,
    SymCoff=1,
    SymCv=2,
    SymPdb=3,
    SymExport=4,
    SymDeferred=5,
    SymSym=6
};
enum _IMAGEHLP_STATUS_REASON
{
    BindOutOfMemory=0,
    BindRvaToVaFailed=1,
    BindNoRoomInImage=2,
    BindImportModuleFailed=3,
    BindImportProcedureFailed=4,
    BindImportModule=5,
    BindImportProcedure=6,
    BindForwarder=7,
    BindForwarderNOT=8,
    BindImageModified=9,
    BindExpandFileHeaders=10,
    BindImageComplete=11,
    BindMismatchedSymbols=12,
    BindSymbolsNotUpdated=13
};
enum std::locale::_Category
{
    collate=1,
    ctype=2,
    monetary=4,
    numeric=8,
    time=16,
    messages=32,
    all=63,
    none=0
};
enum std::_Uninitialized
{
    _Noinit=0
};
enum std::codecvt_base::_Result
{
    ok=0,
    partial=1,
    error=2,
    noconv=3
};
enum std::ctype_base::_Mask
{
    alnum=263,
    alpha=259,
    cntrl=32,
    digit=4,
    graph=279,
    lower=2,
    print=471,
    punct=16,
    space=72,
    upper=1,
    xdigit=128
};
enum std::ios_base::_Fmtflags
{
    skipws=1,
    unitbuf=2,
    uppercase=4,
    showbase=8,
    showpoint=16,
    showpos=32,
    left=64,
    right=128,
    internal=256,
    dec=512,
    oct=1024,
    hex=2048,
    scientific=4096,
    fixed=8192,
    boolalpha=16384,
    adjustfield=448,
    basefield=3584,
    floatfield=12288,
    _Fmtmask=32767,
    _Fmtzero=0
};
enum std::ios_base::_Iostate
{
    goodbit=0,
    eofbit=1,
    failbit=2,
    badbit=4,
    _Statmask=7
};
enum std::ios_base::_Openmode
{
    in=1,
    out=2,
    ate=4,
    app=8,
    trunc=16,
    binary=32
};
enum std::ios_base::seekdir
{
    beg=0,
    cur=1,
    end=2
};
enum std::ios_base::event
{
    erase_event=0,
    imbue_event=1,
    copyfmt_event=2
};
typedef union tagCY // Size=8
{
    struct
    {
        unsigned long Lo; // Size=4 Offset=0
        long Hi; // Size=4 Offset=4
    };
    __int64 int64; // Size=8 Offset=0
} *PtagCY;
typedef struct _FILETIME // Size=8
{
    unsigned long dwLowDateTime; // Size=4 Offset=0
    unsigned long dwHighDateTime; // Size=4 Offset=4
} FILETIME, *PFILETIME;
typedef struct _GUID // Size=16
{
    unsigned long Data1; // Size=4 Offset=0
    unsigned short Data2; // Size=2 Offset=4
    unsigned short Data3; // Size=2 Offset=6
    unsigned char Data4[8]; // Size=8 Offset=8
} GUID, *PGUID;
typedef struct tagBLOB // Size=8
{
    unsigned long cbSize; // Size=4 Offset=0
    unsigned char * pBlobData; // Size=4 Offset=4
} *PtagBLOB;
typedef struct tagCLIPDATA // Size=12
{
    unsigned long cbSize; // Size=4 Offset=0
    long ulClipFmt; // Size=4 Offset=4
    unsigned char * pClipData; // Size=4 Offset=8
} *PtagCLIPDATA;
typedef struct IStream // Size=4
{
} *PIStream;
typedef struct IStorage // Size=4
{
} *PIStorage;
typedef struct tagBSTRBLOB // Size=8
{
    unsigned long cbSize; // Size=4 Offset=0
    unsigned char * pData; // Size=4 Offset=4
} *PtagBSTRBLOB;
typedef struct tagCAUB // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    unsigned char * pElems; // Size=4 Offset=4
} *PtagCAUB;
typedef struct tagCAI // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    short * pElems; // Size=4 Offset=4
} *PtagCAI;
typedef struct tagCAUI // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    unsigned short * pElems; // Size=4 Offset=4
} *PtagCAUI;
typedef struct tagCABOOL // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    short * pElems; // Size=4 Offset=4
} *PtagCABOOL;
typedef struct tagCAL // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    long * pElems; // Size=4 Offset=4
} *PtagCAL;
typedef struct tagCAUL // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    unsigned long * pElems; // Size=4 Offset=4
} *PtagCAUL;
typedef struct tagCAFLT // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    float * pElems; // Size=4 Offset=4
} *PtagCAFLT;
typedef struct tagCASCODE // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    long * pElems; // Size=4 Offset=4
} *PtagCASCODE;
typedef struct tagCADBL // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    double * pElems; // Size=4 Offset=4
} *PtagCADBL;
typedef struct tagCADATE // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    double * pElems; // Size=4 Offset=4
} *PtagCADATE;
typedef struct tagCABSTR // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    unsigned short * * pElems; // Size=4 Offset=4
} *PtagCABSTR;
typedef struct tagCALPSTR // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    char * * pElems; // Size=4 Offset=4
} *PtagCALPSTR;
typedef struct tagCALPWSTR // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    unsigned short * * pElems; // Size=4 Offset=4
} *PtagCALPWSTR;
typedef struct in_addr::__unnamed::__unnamed // Size=4
{
    unsigned char s_b1; // Size=1 Offset=0
    unsigned char s_b2; // Size=1 Offset=1
    unsigned char s_b3; // Size=1 Offset=2
    unsigned char s_b4; // Size=1 Offset=3
} *Pin_addr::__unnamed::__unnamed;
typedef union _IN_ADDR_IPV4 // Size=4
{
    unsigned long Addr; // Size=4 Offset=0
    unsigned char AddrBytes[4]; // Size=4 Offset=0
} IN_ADDR_IPV4, *PIN_ADDR_IPV4;
typedef struct _IN_ADDR_IPV6 // Size=16
{
    unsigned char Addr[16]; // Size=16 Offset=0
} IN_ADDR_IPV6, *PIN_ADDR_IPV6;
typedef struct _flowspec // Size=32
{
    unsigned long TokenRate; // Size=4 Offset=0
    unsigned long TokenBucketSize; // Size=4 Offset=4
    unsigned long PeakBandwidth; // Size=4 Offset=8
    unsigned long Latency; // Size=4 Offset=12
    unsigned long DelayVariation; // Size=4 Offset=16
    unsigned long ServiceType; // Size=4 Offset=20
    unsigned long MaxSduSize; // Size=4 Offset=24
    unsigned long MinimumPolicedSize; // Size=4 Offset=28
} flowspec, *Pflowspec;
typedef struct QOS_OBJECT_HDR // Size=8
{
    unsigned long ObjectType; // Size=4 Offset=0
    unsigned long ObjectLength; // Size=4 Offset=4
} *PQOS_OBJECT_HDR;
typedef struct _AD_GENERAL_PARAMS // Size=20
{
    unsigned long IntServAwareHopCount; // Size=4 Offset=0
    unsigned long PathBandwidthEstimate; // Size=4 Offset=4
    unsigned long MinimumLatency; // Size=4 Offset=8
    unsigned long PathMTU; // Size=4 Offset=12
    unsigned long Flags; // Size=4 Offset=16
} AD_GENERAL_PARAMS, *PAD_GENERAL_PARAMS;
typedef struct _AD_GUARANTEED // Size=16
{
    unsigned long CTotal; // Size=4 Offset=0
    unsigned long DTotal; // Size=4 Offset=4
    unsigned long CSum; // Size=4 Offset=8
    unsigned long DSum; // Size=4 Offset=12
} AD_GUARANTEED, *PAD_GUARANTEED;
typedef struct _PARAM_BUFFER // Size=12
{
    unsigned long ParameterId; // Size=4 Offset=0
    unsigned long Length; // Size=4 Offset=4
    unsigned char Buffer[1]; // Size=1 Offset=8
} PARAM_BUFFER, *PPARAM_BUFFER;
typedef struct _WSABUF // Size=8
{
    unsigned long len; // Size=4 Offset=0
    char * buf; // Size=4 Offset=4
} WSABUF, *PWSABUF;
typedef struct _WSAPROTOCOLCHAIN // Size=32
{
    int ChainLen; // Size=4 Offset=0
    unsigned long ChainEntries[7]; // Size=28 Offset=4
} WSAPROTOCOLCHAIN, *PWSAPROTOCOLCHAIN;
typedef struct sockaddr // Size=16
{
    unsigned short sa_family; // Size=2 Offset=0
    char sa_data[14]; // Size=14 Offset=2
} *Psockaddr;
typedef class CLoopThread // Size=16
{
    int m_bRunThread; // Size=4 Offset=4
    void * m_hThread; // Size=4 Offset=8
    unsigned long m_dwThreadID; // Size=4 Offset=12
} *PCLoopThread;
typedef struct _WSANETWORKEVENTS // Size=44
{
    long lNetworkEvents; // Size=4 Offset=0
    int iErrorCode[10]; // Size=40 Offset=4
} WSANETWORKEVENTS, *PWSANETWORKEVENTS;
typedef struct _ITEM_ID_ // Size=8
{
    unsigned long id; // Size=4 Offset=0
    struct
    {
        unsigned long code: 14; // Size=4 Offset=4 BitOffset=0 BitCount=14
        unsigned long bDefault: 1; // Size=4 Offset=4 BitOffset=14 BitCount=1
        unsigned long bBless: 1; // Size=4 Offset=4 BitOffset=15 BitCount=1
        unsigned long downOption: 2; // Size=4 Offset=4 BitOffset=16 BitCount=2
        unsigned long bItemFlag: 1; // Size=4 Offset=4 BitOffset=18 BitCount=1
        unsigned long bCheckFlag: 1; // Size=4 Offset=4 BitOffset=19 BitCount=1
        unsigned long reserved: 12; // Size=4 Offset=4 BitOffset=20 BitCount=12
    };
} ITEM_ID_, *PITEM_ID_;
typedef union _ITEM_INFO_ // Size=4
{
    unsigned long info; // Size=4 Offset=0
    unsigned short money; // Size=2 Offset=0
    unsigned short quantity; // Size=2 Offset=0
    union
    {
        struct
        {
            unsigned long iDerbyIndex: 16; // Size=4 Offset=0 BitOffset=0 BitCount=16
            unsigned long iDerbyChosenNum1: 3; // Size=4 Offset=0 BitOffset=16 BitCount=3
            unsigned long iDerbyChosenNum2: 3; // Size=4 Offset=0 BitOffset=19 BitCount=3
            unsigned long iDerbyBetMoney: 10; // Size=4 Offset=0 BitOffset=22 BitCount=10
        };
        struct
        {
            unsigned long iLottoIndex: 12; // Size=4 Offset=0 BitOffset=0 BitCount=12
            unsigned long iChosenNum1: 4; // Size=4 Offset=0 BitOffset=12 BitCount=4
            unsigned long iChosenNum2: 4; // Size=4 Offset=0 BitOffset=16 BitCount=4
            unsigned long iChosenNum3: 4; // Size=4 Offset=0 BitOffset=20 BitCount=4
            unsigned long iChosenNum4: 4; // Size=4 Offset=0 BitOffset=24 BitCount=4
            unsigned long iChosenNum5: 4; // Size=4 Offset=0 BitOffset=28 BitCount=4
        };
        struct
        {
            unsigned long level: 4; // Size=4 Offset=0 BitOffset=0 BitCount=4
            unsigned long option: 1; // Size=4 Offset=0 BitOffset=4 BitCount=1
            unsigned long confirm: 1; // Size=4 Offset=0 BitOffset=5 BitCount=1
            unsigned long subtype: 4; // Size=4 Offset=0 BitOffset=6 BitCount=4
            unsigned long wearIdx: 4; // Size=4 Offset=0 BitOffset=10 BitCount=4
            unsigned long iceAttr: 6; // Size=4 Offset=0 BitOffset=14 BitCount=6
            unsigned long fireAttr: 6; // Size=4 Offset=0 BitOffset=20 BitCount=6
            unsigned long lightAttr: 6; // Size=4 Offset=0 BitOffset=26 BitCount=6
        };
    };
} ITEM_INFO_, *PITEM_INFO_;
typedef struct _PET_ID_ // Size=8
{
    unsigned long id; // Size=4 Offset=0
    struct
    {
        unsigned long code: 16; // Size=4 Offset=4 BitOffset=0 BitCount=16
        unsigned long subcode: 16; // Size=4 Offset=4 BitOffset=16 BitCount=16
    };
} PET_ID_, *PPET_ID_;
typedef struct _LASTINGSKILL_INFO_ // Size=12
{
    unsigned char byClassIndex; // Size=1 Offset=0
    unsigned char bySkillIndex; // Size=1 Offset=1
    unsigned char bySkillLevel; // Size=1 Offset=2
    unsigned long dwCastingTime; // Size=4 Offset=4
    unsigned long dwRemainTime; // Size=4 Offset=8
} LASTINGSKILL_INFO_, *PLASTINGSKILL_INFO_;
typedef struct _SKILL_LEVEL_DATA_ // Size=27
{
    unsigned char HPConsume; // Size=1 Offset=0
    unsigned char MPConsume; // Size=1 Offset=1
    unsigned char Delay; // Size=1 Offset=2
    unsigned char Range; // Size=1 Offset=3
    unsigned char Scope; // Size=1 Offset=4
    unsigned char LastingTime; // Size=1 Offset=5
    unsigned short AddDamage; // Size=2 Offset=6
    unsigned short AddIceDam; // Size=2 Offset=8
    unsigned short AddFireDam; // Size=2 Offset=10
    unsigned short AddLightDam; // Size=2 Offset=12
    unsigned char CommonVal1; // Size=1 Offset=14
    unsigned char CommonVal2; // Size=1 Offset=15
    unsigned char AttkRate; // Size=1 Offset=16
    unsigned char MagRate; // Size=1 Offset=17
    unsigned char DefRate; // Size=1 Offset=18
    unsigned char IceAttkRate; // Size=1 Offset=19
    unsigned char FireAttkRate; // Size=1 Offset=20
    unsigned char LightAttkRate; // Size=1 Offset=21
    unsigned char IceDefRate; // Size=1 Offset=22
    unsigned char FireDefRate; // Size=1 Offset=23
    unsigned char LightDefRate; // Size=1 Offset=24
    unsigned char MaxHPRate; // Size=1 Offset=25
    unsigned char MaxMPRate; // Size=1 Offset=26
} SKILL_LEVEL_DATA_, *PSKILL_LEVEL_DATA_;
typedef class SKILL_STAT_CHANGE // Size=11
{
    unsigned char AttkRate; // Size=1 Offset=0
    unsigned char MagRate; // Size=1 Offset=1
    unsigned char DefRate; // Size=1 Offset=2
    unsigned char FireAttkRate; // Size=1 Offset=3
    unsigned char FireDefRate; // Size=1 Offset=4
    unsigned char IceAttkRate; // Size=1 Offset=5
    unsigned char IceDefRate; // Size=1 Offset=6
    unsigned char LightAttkRate; // Size=1 Offset=7
    unsigned char LightDefRate; // Size=1 Offset=8
    unsigned char MaxHPRate; // Size=1 Offset=9
    unsigned char MaxMPRate; // Size=1 Offset=10
} *PSKILL_STAT_CHANGE;
typedef struct _PC_QUEST_INFO_::_PC_QUEST_DATA_ // Size=3
{
    unsigned char QuestType; // Size=1 Offset=0
    unsigned char QuestOK; // Size=1 Offset=1
    unsigned char QuestVar; // Size=1 Offset=2
} PC_QUEST_INFO_::_PC_QUEST_DATA_, *PPC_QUEST_INFO_::_PC_QUEST_DATA_;
typedef struct _SAVE_QUEST_INFO_::_SAVE_QUEST_DATA_ // Size=1
{
    unsigned char QuestOK: 1; // Size=1 Offset=0 BitOffset=0 BitCount=1
    unsigned char QuestVar: 7; // Size=1 Offset=0 BitOffset=1 BitCount=7
} SAVE_QUEST_INFO_::_SAVE_QUEST_DATA_, *PSAVE_QUEST_INFO_::_SAVE_QUEST_DATA_;
typedef struct _SKILL_ // Size=12
{
    unsigned long skill_0; // Size=4 Offset=0
    unsigned long skill_1; // Size=4 Offset=4
    unsigned long skill_2; // Size=4 Offset=8
} SKILL_, *PSKILL_;
typedef struct _SOCIALINFO_ // Size=4
{
    unsigned long nation: 8; // Size=4 Offset=0 BitOffset=0 BitCount=8
    unsigned long rank: 8; // Size=4 Offset=0 BitOffset=8 BitCount=8
    unsigned long knight_index: 16; // Size=4 Offset=0 BitOffset=16 BitCount=16
} SOCIALINFO_, *PSOCIALINFO_;
typedef struct _PC_2STAT_ // Size=26
{
    unsigned short wHitAttack; // Size=2 Offset=0
    unsigned short wMagicAttack; // Size=2 Offset=2
    unsigned short wDefense; // Size=2 Offset=4
    unsigned short wFireAttack; // Size=2 Offset=6
    unsigned short wFireDefence; // Size=2 Offset=8
    unsigned short wIceAttack; // Size=2 Offset=10
    unsigned short wIceDefense; // Size=2 Offset=12
    unsigned short wLightAttack; // Size=2 Offset=14
    unsigned short wLightDefense; // Size=2 Offset=16
    unsigned short wMaxHp; // Size=2 Offset=18
    unsigned short wMaxMp; // Size=2 Offset=20
    unsigned short wHitAddition; // Size=2 Offset=22
    unsigned short wMagAddition; // Size=2 Offset=24
} PC_2STAT_, *PPC_2STAT_;
typedef struct _CLAN_INFO_ // Size=80
{
    unsigned long dwClanID; // Size=4 Offset=0
    unsigned long dwMarkID; // Size=4 Offset=4
    unsigned long dwCDate; // Size=4 Offset=8
    unsigned long dwDDate; // Size=4 Offset=12
    char szClanName[32]; // Size=32 Offset=16
    char szClanPasswd[16]; // Size=16 Offset=48
    unsigned char nation; // Size=1 Offset=64
    unsigned char clanRank; // Size=1 Offset=65
    unsigned char clanStat; // Size=1 Offset=66
    unsigned char byReserved; // Size=1 Offset=67
    unsigned short wStorageIndex; // Size=2 Offset=68
    unsigned short wAgitID; // Size=2 Offset=70
    unsigned short wWinCnt; // Size=2 Offset=72
    unsigned short wLooseCnt; // Size=2 Offset=74
    unsigned short wReserved; // Size=2 Offset=76
} CLAN_INFO_, *PCLAN_INFO_;
typedef struct _KNIGHT_INFO_ // Size=28
{
    char szPCName[13]; // Size=13 Offset=0
    unsigned long dwPCID; // Size=4 Offset=16
    unsigned short wLevel; // Size=2 Offset=20
    unsigned char rankInClan; // Size=1 Offset=22
    unsigned char status; // Size=1 Offset=23
    unsigned char byPCType; // Size=1 Offset=24
} KNIGHT_INFO_, *PKNIGHT_INFO_;
typedef struct _LASTINGITEM_ARRAY_ // Size=8
{
    unsigned char byItemType; // Size=1 Offset=0
    unsigned long dwRemainTime; // Size=4 Offset=4
} LASTINGITEM_ARRAY_, *PLASTINGITEM_ARRAY_;
typedef struct _PARTISAN_ // Size=8
{
    unsigned long dwPCID; // Size=4 Offset=0
    unsigned char byGateSvr; // Size=1 Offset=4
} PARTISAN_, *PPARTISAN_;
typedef struct _APPRENTICE_INFO_ // Size=4
{
    unsigned long dwPCID; // Size=4 Offset=0
} APPRENTICE_INFO_, *PAPPRENTICE_INFO_;
typedef class MSG_S2G_HEADER // Size=10
{
    unsigned long dwSize; // Size=4 Offset=0
    unsigned long dwPCID; // Size=4 Offset=4
    unsigned char byCtrl; // Size=1 Offset=8
    unsigned char byCmd; // Size=1 Offset=9
} *PMSG_S2G_HEADER;
typedef class MSG_S2C_HEADER // Size=12
{
    unsigned long dwSize; // Size=4 Offset=0
    unsigned long dwPCID; // Size=4 Offset=4
    unsigned char byCtrl; // Size=1 Offset=8
    unsigned char byCmd; // Size=1 Offset=9
    unsigned short wProtocol; // Size=2 Offset=10
} *PMSG_S2C_HEADER;
typedef class MSG_C2S_OP_CMD // Size=78
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wOpCmd; // Size=2 Offset=12
    char szParam[64]; // Size=64 Offset=14
} *PMSG_C2S_OP_CMD;
typedef class MSG_S2C_ERROR // Size=78
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wErrCode; // Size=2 Offset=12
    char szErrStr[64]; // Size=64 Offset=14
} *PMSG_S2C_ERROR;
typedef class MSG_C2S_UNKNOWN_CHAR // Size=19
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byType; // Size=1 Offset=12
    unsigned long dwID; // Size=4 Offset=13
    unsigned short wRetProtocol; // Size=2 Offset=17
} *PMSG_C2S_UNKNOWN_CHAR;
typedef class MSG_S2C_UNKNOWN_CHAR // Size=20
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byType; // Size=1 Offset=12
    unsigned char byCode; // Size=1 Offset=13
    unsigned long dwID; // Size=4 Offset=14
    unsigned short wRetProtocol; // Size=2 Offset=18
} *PMSG_S2C_UNKNOWN_CHAR;
typedef struct _ITEM_APPEAR_ // Size=4
{
    unsigned long ItemCode: 14; // Size=4 Offset=0 BitOffset=0 BitCount=14
    unsigned long wearIndex: 4; // Size=4 Offset=0 BitOffset=14 BitCount=4
    unsigned long level: 4; // Size=4 Offset=0 BitOffset=18 BitCount=4
    unsigned long bIceAttr: 1; // Size=4 Offset=0 BitOffset=22 BitCount=1
    unsigned long bFireAttr: 1; // Size=4 Offset=0 BitOffset=23 BitCount=1
    unsigned long bLightAttr: 1; // Size=4 Offset=0 BitOffset=24 BitCount=1
    unsigned long reserved: 7; // Size=4 Offset=0 BitOffset=25 BitCount=7
} ITEM_APPEAR_, *PITEM_APPEAR_;
typedef struct _PET_APPEAR_ // Size=4
{
    unsigned short code; // Size=2 Offset=0
    unsigned short level; // Size=2 Offset=2
} PET_APPEAR_, *PPET_APPEAR_;
typedef struct _SKILL_CAST_ // Size=3
{
    unsigned char byClassIndex; // Size=1 Offset=0
    unsigned char bySkillIndex; // Size=1 Offset=1
    unsigned char bySkillLevel; // Size=1 Offset=2
} SKILL_CAST_, *PSKILL_CAST_;
typedef class MSG_S2C_PC_DISAPPEAR // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwPCID; // Size=4 Offset=12
} *PMSG_S2C_PC_DISAPPEAR;
typedef class MSG_S2C_CHAR_LOGIN_OK // Size=29
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    char szPCName[13]; // Size=13 Offset=12
    unsigned long dwPCID; // Size=4 Offset=25
} *PMSG_S2C_CHAR_LOGIN_OK;
typedef class MSG_S2C_WARP_READY // Size=14
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wNewMapIndex; // Size=2 Offset=12
} *PMSG_S2C_WARP_READY;
typedef class MSG_C2S_WARP // Size=14
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wNewMapIndex; // Size=2 Offset=12
} *PMSG_C2S_WARP;
typedef class MSG_S2C_WARP // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNewCell; // Size=4 Offset=12
} *PMSG_S2C_WARP;
typedef class MSG_S2C_ANS_MOVE // Size=18
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bAns; // Size=1 Offset=12
    unsigned long dwDestCell; // Size=4 Offset=13
    unsigned char byMoveSpeed; // Size=1 Offset=17
} *PMSG_S2C_ANS_MOVE;
typedef class MSG_S2C_SEE_MOVE // Size=25
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwMovePCID; // Size=4 Offset=12
    unsigned long dwStartCell; // Size=4 Offset=16
    unsigned long dwDestCell; // Size=4 Offset=20
    unsigned char byMoveSpeed; // Size=1 Offset=24
} *PMSG_S2C_SEE_MOVE;
typedef class MSG_S2C_FIX_MOVE // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwFixCell; // Size=4 Offset=12
} *PMSG_S2C_FIX_MOVE;
typedef class MSG_S2C_SEE_STOP // Size=20
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwStopPCID; // Size=4 Offset=12
    unsigned long dwFixCell; // Size=4 Offset=16
} *PMSG_S2C_SEE_STOP;
typedef class MSG_S2C_CHAR_LOGOUT // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_S2C_CHAR_LOGOUT;
typedef class MSG_S2C_PET_LEVELUP // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOPCID; // Size=4 Offset=12
    unsigned char byLevel; // Size=1 Offset=16
} *PMSG_S2C_PET_LEVELUP;
typedef class MSG_S2C_NPC_DISAPPEAR // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_S2C_NPC_DISAPPEAR;
typedef class MSG_S2C_NPC_MOVE // Size=52
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned long dwStartCell; // Size=4 Offset=16
    unsigned long dwMoveCell[8]; // Size=32 Offset=20
} *PMSG_S2C_NPC_MOVE;
typedef class MSG_S2C_NPC_STATE // Size=19
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned char byNPCState; // Size=1 Offset=16
    unsigned short wReserved; // Size=2 Offset=17
} *PMSG_S2C_NPC_STATE;
typedef class MSG_S2C_NPC_ATTACK // Size=39
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned long dwNPCCell; // Size=4 Offset=16
    unsigned long dwTargetPCID; // Size=4 Offset=20
    unsigned long dwTargetPCCell; // Size=4 Offset=24
    unsigned long dwPCHp; // Size=4 Offset=28
    unsigned short wAttackType; // Size=2 Offset=32
    int bPCDie; // Size=4 Offset=34
    unsigned char byPetHP; // Size=1 Offset=38
} *PMSG_S2C_NPC_ATTACK;
typedef class MSG_S2C_SEE_NPC_ATTACK // Size=34
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned long dwNPCCell; // Size=4 Offset=16
    unsigned long dwPCID; // Size=4 Offset=20
    unsigned long dwPCCell; // Size=4 Offset=24
    unsigned short wAttackType; // Size=2 Offset=28
    int bPCDie; // Size=4 Offset=30
} *PMSG_S2C_SEE_NPC_ATTACK;
typedef struct _NPC_SKILL_DAMAGEINFO_ // Size=9
{
    unsigned long dwTargetID; // Size=4 Offset=0
    unsigned long dwCellIndex; // Size=4 Offset=4
    unsigned char bDie; // Size=1 Offset=8
} NPC_SKILL_DAMAGEINFO_, *PNPC_SKILL_DAMAGEINFO_;
typedef class MSG_S2C_ANS_ATTACK // Size=34
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byResult; // Size=1 Offset=12
    unsigned long dwPCCell; // Size=4 Offset=13
    unsigned char byTargetType; // Size=1 Offset=17
    unsigned long dwTargetID; // Size=4 Offset=18
    unsigned long dwTargetCell; // Size=4 Offset=22
    unsigned char byCurrentStep; // Size=1 Offset=26
    unsigned short wDamage; // Size=2 Offset=27
    unsigned char bFinish; // Size=1 Offset=29
    unsigned short wHP; // Size=2 Offset=30
    unsigned short wMP; // Size=2 Offset=32
} *PMSG_S2C_ANS_ATTACK;
typedef class MSG_S2C_SEE_ATTACK // Size=32
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwPCID; // Size=4 Offset=12
    unsigned long dwPCCell; // Size=4 Offset=16
    unsigned char byTargetType; // Size=1 Offset=20
    unsigned long dwTargetID; // Size=4 Offset=21
    unsigned long dwTargetCell; // Size=4 Offset=25
    unsigned char byCurrentStep; // Size=1 Offset=29
    unsigned char byTargetStatus; // Size=1 Offset=30
    unsigned char bFinish; // Size=1 Offset=31
} *PMSG_S2C_SEE_ATTACK;
typedef class MSG_S2C_UPDATE_PKCOUNT // Size=15
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wRTime; // Size=2 Offset=12
    unsigned char byPKCount; // Size=1 Offset=14
} *PMSG_S2C_UPDATE_PKCOUNT;
typedef class MSG_S2C_UPDATE_PCEXP // Size=18
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwExp; // Size=4 Offset=12
    unsigned short wPetExp; // Size=2 Offset=16
} *PMSG_S2C_UPDATE_PCEXP;
typedef class MSG_S2C_SKILL_DELAY_INFO // Size=44
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byDelay[32]; // Size=32 Offset=12
} *PMSG_S2C_SKILL_DELAY_INFO;
typedef class MSG_S2C_ERR_SKILL // Size=14
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bySkillIndex; // Size=1 Offset=12
    unsigned char byErrCode; // Size=1 Offset=13
} *PMSG_S2C_ERR_SKILL;
typedef struct _SKILL_DAMAGEINFO_ // Size=10
{
    unsigned long dwTargetID; // Size=4 Offset=0
    unsigned short wDamage; // Size=2 Offset=4
    unsigned long dwCellIndex; // Size=4 Offset=6
} SKILL_DAMAGEINFO_, *PSKILL_DAMAGEINFO_;
typedef class MSG_S2C_GET_SKILL // Size=28
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bySkillIndex; // Size=1 Offset=12
    unsigned char bySkillLevel; // Size=1 Offset=13
    unsigned long dwOPCID; // Size=4 Offset=14
    unsigned long dwBaseCell; // Size=4 Offset=18
    unsigned short wHP; // Size=2 Offset=22
    unsigned short wMP; // Size=2 Offset=24
    unsigned char bDie; // Size=1 Offset=26
    unsigned char byPetHP; // Size=1 Offset=27
} *PMSG_S2C_GET_SKILL;
typedef class MSG_S2C_CAST_SKILL // Size=22
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bySkillIndex; // Size=1 Offset=12
    unsigned char bySkillLevel; // Size=1 Offset=13
    unsigned short wHP; // Size=2 Offset=14
    unsigned short wMP; // Size=2 Offset=16
    unsigned long dwCurCell; // Size=4 Offset=18
} *PMSG_S2C_CAST_SKILL;
typedef class MSG_S2C_LASTING_SKILL // Size=31
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bySkillClass; // Size=1 Offset=12
    unsigned char bySkillIndex; // Size=1 Offset=13
    unsigned char bySkillLevel; // Size=1 Offset=14
    unsigned long dwOPCID; // Size=4 Offset=15
    unsigned char bOnOff; // Size=1 Offset=19
    class SKILL_STAT_CHANGE statChange; // Size=11 Offset=20
} *PMSG_S2C_LASTING_SKILL;
typedef class MSG_S2C_SEE_LASTING_SKILL // Size=28
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bySkillClass; // Size=1 Offset=12
    unsigned char bySkillIndex; // Size=1 Offset=13
    unsigned char bySkillLevel; // Size=1 Offset=14
    unsigned char byTargetType; // Size=1 Offset=15
    unsigned long dwCastPCID; // Size=4 Offset=16
    unsigned long dwTargetID; // Size=4 Offset=20
    int bOnOff; // Size=4 Offset=24
} *PMSG_S2C_SEE_LASTING_SKILL;
typedef class MSG_S2C_SEE_LEVELUP // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long wLevelUpPCID; // Size=4 Offset=12
} *PMSG_S2C_SEE_LEVELUP;
typedef class MSG_S2C_SEE_STRIP // Size=19
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOPCID; // Size=4 Offset=12
    unsigned short wItemCode; // Size=2 Offset=16
    unsigned char wearIndex; // Size=1 Offset=18
} *PMSG_S2C_SEE_STRIP;
typedef class MSG_S2C_USE_POTION // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byResult; // Size=1 Offset=12
    unsigned short dwRecovery; // Size=2 Offset=13
    unsigned short dwStored; // Size=2 Offset=15
} *PMSG_S2C_USE_POTION;
typedef class MSG_S2C_ASK_DEAL // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwAskPCID; // Size=4 Offset=12
} *PMSG_S2C_ASK_DEAL;
typedef class MSG_S2C_ANS_DEAL // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOPCID; // Size=4 Offset=12
    unsigned char errCode; // Size=1 Offset=16
} *PMSG_S2C_ANS_DEAL;
typedef class MSG_S2C_DECIDE_DEAL // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_S2C_DECIDE_DEAL;
typedef class MSG_S2C_FAIL_DEAL // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char errCode; // Size=1 Offset=12
} *PMSG_S2C_FAIL_DEAL;
typedef class MSG_S2C_PEAR_DECIDE // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_S2C_PEAR_DECIDE;
typedef class MSG_S2C_PUTOUT_PET // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwPetID; // Size=4 Offset=12
} *PMSG_S2C_PUTOUT_PET;
typedef class MSG_C2S_SAY // Size=90
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bySayType; // Size=1 Offset=12
    char szListenPC[13]; // Size=13 Offset=13
    char szWords[64]; // Size=64 Offset=26
} *PMSG_C2S_SAY;
typedef class MSG_S2C_SAY // Size=94
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bySayType; // Size=1 Offset=12
    unsigned long dwSayPCID; // Size=4 Offset=13
    char szSayPC[13]; // Size=13 Offset=17
    char szWords[64]; // Size=64 Offset=30
} *PMSG_S2C_SAY;
typedef class MSG_S2C_QUEST_INFO // Size=460
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    char Title[64]; // Size=64 Offset=12
    char Desc[384]; // Size=384 Offset=76
} *PMSG_S2C_QUEST_INFO;
typedef class MSG_S2C_QUEST_CONTINUE // Size=460
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    char Title[64]; // Size=64 Offset=12
    char Desc[384]; // Size=384 Offset=76
} *PMSG_S2C_QUEST_CONTINUE;
typedef class MSG_C2S_QUEST_CANCEL // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2S_QUEST_CANCEL;
typedef class MSG_S2C_QUEST_CANCEL // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char errCode; // Size=1 Offset=12
} *PMSG_S2C_QUEST_CANCEL;
typedef class MSG_S2C_QUEST_STATE // Size=204
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    char szState[192]; // Size=192 Offset=12
} *PMSG_S2C_QUEST_STATE;
typedef class MSG_S2C_QUEST_OK // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    int Lore; // Size=4 Offset=12
} *PMSG_S2C_QUEST_OK;
typedef class MSG_S2C_ANS_HEAL // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wHP; // Size=2 Offset=12
    unsigned short wMP; // Size=2 Offset=14
} *PMSG_S2C_ANS_HEAL;
typedef class MSG_S2C_ASK_PARTY // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwAskPCID; // Size=4 Offset=12
} *PMSG_S2C_ASK_PARTY;
typedef class MSG_S2C_ANS_PARTY // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char result; // Size=1 Offset=12
} *PMSG_S2C_ANS_PARTY;
typedef struct _PARTY_MEMBER_ // Size=28
{
    unsigned long dwMemberID; // Size=4 Offset=0
    char szName[13]; // Size=13 Offset=4
    unsigned long dwCurCell; // Size=4 Offset=20
    unsigned short wCurMap; // Size=2 Offset=24
    unsigned short wHPRatio; // Size=2 Offset=26
} PARTY_MEMBER_, *PPARTY_MEMBER_;
typedef class MSG_S2C_PARTY_OUT // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwMemberID; // Size=4 Offset=12
} *PMSG_S2C_PARTY_OUT;
typedef class MSG_S2C_PARTY_WHERE // Size=22
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwMemberID; // Size=4 Offset=12
    unsigned short wMapIndex; // Size=2 Offset=16
    unsigned long dwCellIndex; // Size=4 Offset=18
} *PMSG_S2C_PARTY_WHERE;
typedef class MSG_S2C_PARTY_HP // Size=18
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwMemberID; // Size=4 Offset=12
    unsigned short wHP; // Size=2 Offset=16
} *PMSG_S2C_PARTY_HP;
typedef class MSG_S2C_PC_ATTACK // Size=27
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwAttackPCID; // Size=4 Offset=12
    unsigned long dwAttackPCCell; // Size=4 Offset=16
    unsigned short wPCHP; // Size=2 Offset=20
    unsigned short wPCMP; // Size=2 Offset=22
    unsigned char byCurStep; // Size=1 Offset=24
    unsigned char bDie; // Size=1 Offset=25
    unsigned char byPetHP; // Size=1 Offset=26
} *PMSG_S2C_PC_ATTACK;
typedef class MSG_S2C_PET_SELL // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char petIndex; // Size=1 Offset=12
    unsigned long PetID; // Size=4 Offset=13
    unsigned long dwMoney; // Size=4 Offset=17
} *PMSG_S2C_PET_SELL;
typedef class MSG_S2C_USESCROLL // Size=18
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byInvenIndex; // Size=1 Offset=12
    unsigned long dwItemID; // Size=4 Offset=13
    unsigned char amount; // Size=1 Offset=17
} *PMSG_S2C_USESCROLL;
typedef class MSG_S2C_UPDATE_MONEY // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    int iAddMoney; // Size=4 Offset=12
    unsigned char code; // Size=1 Offset=16
} *PMSG_S2C_UPDATE_MONEY;
typedef class MSG_S2C_SVR_TIME // Size=14
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char hour; // Size=1 Offset=12
    unsigned char min; // Size=1 Offset=13
} *PMSG_S2C_SVR_TIME;
typedef class MSG_S2C_GESTURE // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwGesturePCID; // Size=4 Offset=12
    unsigned char byGestureType; // Size=1 Offset=16
} *PMSG_S2C_GESTURE;
typedef struct _GAME_OPTION_ // Size=1
{
    unsigned char bDeal: 1; // Size=1 Offset=0 BitOffset=0 BitCount=1
    unsigned char bPrivateSay: 1; // Size=1 Offset=0 BitOffset=1 BitCount=1
    unsigned char bParty: 1; // Size=1 Offset=0 BitOffset=2 BitCount=1
    unsigned char bGiven: 1; // Size=1 Offset=0 BitOffset=3 BitCount=1
    unsigned char bWearFlag: 1; // Size=1 Offset=0 BitOffset=4 BitCount=1
    unsigned char bReserved: 3; // Size=1 Offset=0 BitOffset=5 BitCount=3
} GAME_OPTION_, *PGAME_OPTION_;
typedef class MSG_S2C_SUBMAP_INFO // Size=37
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    char szSubmapName[20]; // Size=20 Offset=12
    unsigned short wSubmapIndex; // Size=2 Offset=32
    struct
    {
        unsigned char bOpen: 1; // Size=1 Offset=34 BitOffset=0 BitCount=1
        unsigned char bPublic: 1; // Size=1 Offset=34 BitOffset=1 BitCount=1
        unsigned char bKeyword: 1; // Size=1 Offset=34 BitOffset=2 BitCount=1
        unsigned char Reserved: 5; // Size=1 Offset=34 BitOffset=3 BitCount=5
    };
    unsigned char Condition_Level; // Size=1 Offset=35
    unsigned char Condition_Type; // Size=1 Offset=36
} *PMSG_S2C_SUBMAP_INFO;
typedef class MSG_S2C_ENTER // Size=19
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrorCode; // Size=1 Offset=12
    unsigned short wSubmapIndex; // Size=2 Offset=13
    unsigned long dwCellIndex; // Size=4 Offset=15
} *PMSG_S2C_ENTER;
typedef class MSG_S2C_OTHER_UPDATE // Size=18
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOPCID; // Size=4 Offset=12
    unsigned char byCaoLevel; // Size=1 Offset=16
    unsigned char byPose; // Size=1 Offset=17
} *PMSG_S2C_OTHER_UPDATE;
typedef class MSG_S2C_LOTTO_QUERY_PRIZE // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned int uNowPrize; // Size=4 Offset=12
} *PMSG_S2C_LOTTO_QUERY_PRIZE;
typedef class MSG_S2C_LOTTO_QUERY_HISTORY // Size=41
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    int nNowLotto; // Size=4 Offset=12
    unsigned char arrWinNumHistory[25]; // Size=25 Offset=16
} *PMSG_S2C_LOTTO_QUERY_HISTORY;
typedef class MSG_S2C_LOTTO_SALE // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byResult; // Size=1 Offset=12
    unsigned int uPrizeMoney; // Size=4 Offset=13
    unsigned int uPresentMoney; // Size=4 Offset=17
} *PMSG_S2C_LOTTO_SALE;
typedef class MSG_S2C_LOTTO_NOTIFY // Size=27
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byNoticeType; // Size=1 Offset=12
    int nNowLotto; // Size=4 Offset=13
    unsigned char byArrWinNum[5]; // Size=5 Offset=17
    unsigned char byCarriedForward; // Size=1 Offset=22
    unsigned int u1stPrizeMoney; // Size=4 Offset=23
} *PMSG_S2C_LOTTO_NOTIFY;
typedef class MSG_S2C_DERBY_NOTICE // Size=15
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short iDerbyIndex; // Size=2 Offset=12
    unsigned char byNoticeCode; // Size=1 Offset=14
} *PMSG_S2C_DERBY_NOTICE;
typedef class MSG_S2C_DERBY_INDEX_QUERY // Size=14
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short iDerbyIndex; // Size=2 Offset=12
} *PMSG_S2C_DERBY_INDEX_QUERY;
typedef struct _DERBY_MONSTER_INFO_ // Size=10
{
    unsigned char byMonsterIndex; // Size=1 Offset=0
    unsigned char byStamina; // Size=1 Offset=1
    unsigned char bySpeed; // Size=1 Offset=2
    unsigned char byAcceleration; // Size=1 Offset=3
    unsigned char byEndurance; // Size=1 Offset=4
    unsigned char byCornering; // Size=1 Offset=5
    unsigned short wNumGames; // Size=2 Offset=6
    unsigned short wNumWins; // Size=2 Offset=8
} DERBY_MONSTER_INFO_, *PDERBY_MONSTER_INFO_;
typedef class MSG_S2C_DERBY_RATIO_QUERY // Size=78
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    float fDerbyRatio[15]; // Size=60 Offset=12
    unsigned short iDerbyIndex; // Size=2 Offset=72
    int bIsAbleToPurchase; // Size=4 Offset=74
} *PMSG_S2C_DERBY_RATIO_QUERY;
typedef class MSG_S2C_DERBY_RACE_START // Size=134
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short iDerbyIndex; // Size=2 Offset=12
    float fVelocity[30]; // Size=120 Offset=14
} *PMSG_S2C_DERBY_RACE_START;
typedef struct _DERBY_HISTORY_INFO_ // Size=16
{
    unsigned short iDerbyIndex; // Size=2 Offset=0
    unsigned char byFirstPlace; // Size=1 Offset=2
    unsigned char byFirstPlaceIndex; // Size=1 Offset=3
    unsigned char bySecondPlace; // Size=1 Offset=4
    unsigned char bySecondPlaceIndex; // Size=1 Offset=5
    float fSingleEarningRatio; // Size=4 Offset=8
    float fDoubleEarningRatio; // Size=4 Offset=12
} DERBY_HISTORY_INFO_, *PDERBY_HISTORY_INFO_;
typedef class MSG_S2C_DERBY_EXCHANGE // Size=25
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long iEarnedMoney; // Size=4 Offset=12
    float fEarningRatio; // Size=4 Offset=16
    unsigned long dwPresentMoney; // Size=4 Offset=20
    unsigned char byResult; // Size=1 Offset=24
} *PMSG_S2C_DERBY_EXCHANGE;
typedef class MSG_C2S_USE_ITEM // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwItemID; // Size=4 Offset=12
} *PMSG_C2S_USE_ITEM;
typedef class MSG_S2C_ASK_APPRENTICE_IN // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwRequestPCID; // Size=4 Offset=12
} *PMSG_S2C_ASK_APPRENTICE_IN;
typedef class MSG_S2C_APPRENTICE_UPDATE // Size=18
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wMapIndex; // Size=2 Offset=12
    unsigned long dwCellIndex; // Size=4 Offset=14
} *PMSG_S2C_APPRENTICE_UPDATE;
typedef class MSG_S2C_APPRENTICE_HP // Size=14
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wHP; // Size=2 Offset=12
} *PMSG_S2C_APPRENTICE_HP;
typedef class MSG_S2C_ASK_APPRENTICE_OUT // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_S2C_ASK_APPRENTICE_OUT;
typedef class MSG_S2S_HEADER // Size=2
{
    unsigned short wProtocol; // Size=2 Offset=0
} *PMSG_S2S_HEADER;
typedef class MSG_S2M_SVR_LOGIN // Size=3
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byThisServerID; // Size=1 Offset=2
} *PMSG_S2M_SVR_LOGIN;
typedef class MSG_S2M_CHAR_LOGIN // Size=156
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    char szAccountName[21]; // Size=21 Offset=7
    char szPasswd[21]; // Size=21 Offset=28
    char szPCName[13]; // Size=13 Offset=49
    char szIP[16]; // Size=16 Offset=62
    unsigned long RemainTime; // Size=4 Offset=78
    char PayMode[4]; // Size=4 Offset=82
    long PayNo; // Size=4 Offset=86
    char Reserved1[33]; // Size=33 Offset=90
    char Reserved2[33]; // Size=33 Offset=123
} *PMSG_S2M_CHAR_LOGIN;
typedef class MSG_S2M_WORLD_LOGIN // Size=19
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwPCID; // Size=4 Offset=15
} *PMSG_S2M_WORLD_LOGIN;
typedef class MSG_M2S_WARP_ZONE // Size=11
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    int bOK; // Size=4 Offset=7
} *PMSG_M2S_WARP_ZONE;
typedef class MSG_S2M_WARP_LOGIN // Size=7
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
} *PMSG_S2M_WARP_LOGIN;
typedef class MSG_M2S_PASS2GATE // Size=263
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    int nSize; // Size=4 Offset=3
    char Msg[256]; // Size=256 Offset=7
} *PMSG_M2S_PASS2GATE;
typedef class MSG_S2M_SAY // Size=98
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char bySayType; // Size=1 Offset=2
    unsigned long dwSayPCID; // Size=4 Offset=3
    unsigned char bySayPCGateID; // Size=1 Offset=7
    char szSayPC[13]; // Size=13 Offset=8
    char szListenPC[13]; // Size=13 Offset=21
    char szWords[64]; // Size=64 Offset=34
} *PMSG_S2M_SAY;
typedef class MSG_S2M_PARTY_CREATE // Size=19
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwPartyID; // Size=4 Offset=15
} *PMSG_S2M_PARTY_CREATE;
typedef class MSG_S2M_PARTY_JOIN // Size=19
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwPartyID; // Size=4 Offset=15
} *PMSG_S2M_PARTY_JOIN;
typedef class MSG_S2M_PARTY_OUT // Size=10
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPartyID; // Size=4 Offset=2
    unsigned long dwPCID; // Size=4 Offset=6
} *PMSG_S2M_PARTY_OUT;
typedef class MSG_M2S_PARTY_OUT // Size=14
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long byGateSvrID; // Size=4 Offset=2
    unsigned long dwPCID; // Size=4 Offset=6
    unsigned long dwOutPCID; // Size=4 Offset=10
} *PMSG_M2S_PARTY_OUT;
typedef struct _PARTNER_INFO_ // Size=20
{
    unsigned long dwPCID; // Size=4 Offset=0
    char szPCName[13]; // Size=13 Offset=4
} PARTNER_INFO_, *PPARTNER_INFO_;
typedef struct _APPRENTICE_MEMBER_ // Size=32
{
    unsigned long dwMemberID; // Size=4 Offset=0
    char szMemberName[13]; // Size=13 Offset=4
    unsigned long dwCurCell; // Size=4 Offset=20
    unsigned short wCurMap; // Size=2 Offset=24
    unsigned short wHPRatio; // Size=2 Offset=26
    unsigned char byNowZoneServerID; // Size=1 Offset=28
} APPRENTICE_MEMBER_, *PAPPRENTICE_MEMBER_;
typedef class MSG_S2M_APPRENTICE_QUIT // Size=10
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwApprenticeID; // Size=4 Offset=2
    unsigned long dwPCID; // Size=4 Offset=6
} *PMSG_S2M_APPRENTICE_QUIT;
typedef class MSG_M2S_ADMIN // Size=75
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char Cmd; // Size=1 Offset=2
    unsigned long dwVal1; // Size=4 Offset=3
    unsigned long dwVal2; // Size=4 Offset=7
    char szVal[64]; // Size=64 Offset=11
} *PMSG_M2S_ADMIN;
typedef class MSG_S2M_CHAR_DISCONNECT // Size=7
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateID; // Size=1 Offset=6
} *PMSG_S2M_CHAR_DISCONNECT;
typedef class MSG_S2G_DISCONNECT // Size=10
{
    class MSG_S2G_HEADER MsgHeader; // Size=10 Offset=0
} *PMSG_S2G_DISCONNECT;
typedef class MSG_S2G_SWITCH_ZONE // Size=11
{
    class MSG_S2G_HEADER MsgHeader; // Size=10 Offset=0
    unsigned char byNewServerID; // Size=1 Offset=10
} *PMSG_S2G_SWITCH_ZONE;
typedef class MSG_S2G_BROADCAST // Size=10
{
    class MSG_S2G_HEADER MsgHeader; // Size=10 Offset=0
} *PMSG_S2G_BROADCAST;
typedef class MSG_S2C_ANS_DEPOSITE_MONEY // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrCode; // Size=1 Offset=12
    unsigned long dwStorageMoney; // Size=4 Offset=13
    unsigned long dwPCMoney; // Size=4 Offset=17
} *PMSG_S2C_ANS_DEPOSITE_MONEY;
typedef class MSG_S2C_ANS_WITHDRAW_MONEY // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrCode; // Size=1 Offset=12
    unsigned long dwStorageMoney; // Size=4 Offset=13
    unsigned long dwPCMoney; // Size=4 Offset=17
} *PMSG_S2C_ANS_WITHDRAW_MONEY;
typedef class MSG_S2M_LOAD_STORAGE // Size=15
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szCharacterName[13]; // Size=13 Offset=2
} *PMSG_S2M_LOAD_STORAGE;
typedef class MSG_S2M_OP_CMD // Size=85
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szOPCharacter[13]; // Size=13 Offset=2
    unsigned short wOpCmd; // Size=2 Offset=15
    char szParam[64]; // Size=64 Offset=17
    int bFlag; // Size=4 Offset=81
} *PMSG_S2M_OP_CMD;
typedef class MSG_M2S_OP_CMD // Size=81
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szOPCharacter[13]; // Size=13 Offset=2
    unsigned short wOpCmd; // Size=2 Offset=15
    char szParam[64]; // Size=64 Offset=17
} *PMSG_M2S_OP_CMD;
typedef class MSG_S2C_ASK_CLAN // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwAnsPCID; // Size=4 Offset=12
} *PMSG_S2C_ASK_CLAN;
typedef class MSG_S2M_CLAN // Size=69
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char requestType; // Size=1 Offset=2
    char szMasterName[13]; // Size=13 Offset=3
    char szClanName[32]; // Size=32 Offset=16
    char szClanPasswd[16]; // Size=16 Offset=48
    unsigned long ClanID; // Size=4 Offset=64
    unsigned char byNation; // Size=1 Offset=68
} *PMSG_S2M_CLAN;
typedef class MSG_M2S_CLAN // Size=13
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char requestType; // Size=1 Offset=7
    unsigned char errorCode; // Size=1 Offset=8
    unsigned long ClanID; // Size=4 Offset=9
} *PMSG_M2S_CLAN;
typedef class MSG_S2M_KNIGHT // Size=25
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char requestType; // Size=1 Offset=2
    unsigned long ClanID; // Size=4 Offset=3
    unsigned char rank; // Size=1 Offset=7
    char szKnightName[13]; // Size=13 Offset=8
    unsigned long dwKnightID; // Size=4 Offset=21
} *PMSG_S2M_KNIGHT;
typedef class MSG_M2S_KNIGHT // Size=13
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char requestType; // Size=1 Offset=7
    unsigned long dwClanID; // Size=4 Offset=8
    unsigned char errorCode; // Size=1 Offset=12
} *PMSG_M2S_KNIGHT;
typedef class MSG_S2M_CLAN_INFO // Size=19
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwClanID; // Size=4 Offset=15
} *PMSG_S2M_CLAN_INFO;
typedef class MSG_S2M_CLAN_UPDATE // Size=6
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwClanID; // Size=4 Offset=2
} *PMSG_S2M_CLAN_UPDATE;
typedef class MSG_M2S_CLAN_FAIL // Size=12
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char byErrorCode; // Size=1 Offset=7
    unsigned long dwClanID; // Size=4 Offset=8
} *PMSG_M2S_CLAN_FAIL;
typedef class MSG_S2C_PARTY_QUEST // Size=15
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byPartyQuestIndex; // Size=1 Offset=12
    unsigned char byPartyQuestStep; // Size=1 Offset=13
    unsigned char byResultCode; // Size=1 Offset=14
} *PMSG_S2C_PARTY_QUEST;
typedef class MSG_S2C_PARTY_QUEST_TIMER // Size=14
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byLimitTime; // Size=1 Offset=12
    unsigned char byCode; // Size=1 Offset=13
} *PMSG_S2C_PARTY_QUEST_TIMER;
typedef struct _BATTLE_WARP_DATA_ // Size=8
{
    unsigned char byWarpType; // Size=1 Offset=0
    unsigned long dwOtherPCID; // Size=4 Offset=4
} BATTLE_WARP_DATA_, *PBATTLE_WARP_DATA_;
typedef class MSG_M2S_ANS_WARP_Z2B // Size=9
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    unsigned char byBattleSvrID; // Size=1 Offset=7
    unsigned char byResult; // Size=1 Offset=8
} *PMSG_M2S_ANS_WARP_Z2B;
typedef class MSG_S2C_ANS_WARP_Z2B // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byResult; // Size=1 Offset=12
} *PMSG_S2C_ANS_WARP_Z2B;
typedef class MSG_C2S_ASK_WARP_B2Z // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2S_ASK_WARP_B2Z;
typedef class MSG_S2M_ASK_WARP_B2Z // Size=7
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
} *PMSG_S2M_ASK_WARP_B2Z;
typedef class MSG_C2S_ASK_PVP // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOtherPCID; // Size=4 Offset=12
} *PMSG_C2S_ASK_PVP;
typedef class MSG_S2C_ASK_PVP // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOtherPCID; // Size=4 Offset=12
} *PMSG_S2C_ASK_PVP;
typedef class MSG_C2S_ANS_PVP // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOtherPCID; // Size=4 Offset=12
    unsigned char byAnswer; // Size=1 Offset=16
} *PMSG_C2S_ANS_PVP;
typedef class MSG_S2C_ANS_PVP // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOtherPCID; // Size=4 Offset=12
    unsigned char byAnswer; // Size=1 Offset=16
} *PMSG_S2C_ANS_PVP;
typedef class MSG_M2S_CHANGE_REIGN // Size=389
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byWhichTollan; // Size=1 Offset=2
    unsigned long arrToll[2]; // Size=8 Offset=3
    unsigned long arrErrt[4]; // Size=32 Offset=11
    char arrTollNames[32]; // Size=64 Offset=43
    char arrErrtNames[32]; // Size=256 Offset=107
    char arrTollPCNames[13]; // Size=26 Offset=363
} *PMSG_M2S_CHANGE_REIGN;
typedef class MSG_C2S_ASK_SHOP_INFO // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_ASK_SHOP_INFO;
typedef class MSG_S2C_ANS_SHOP_INFO // Size=136
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byNation; // Size=1 Offset=12
    unsigned char byShop; // Size=1 Offset=13
    char szNames[32]; // Size=96 Offset=14
    char szPCNames[13]; // Size=26 Offset=110
} *PMSG_S2C_ANS_SHOP_INFO;
typedef class MSG_C2S_ASK_GIVE_MY_TAX // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_ASK_GIVE_MY_TAX;
typedef class MSG_S2C_ANS_GIVE_MY_TAX // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byAns; // Size=1 Offset=12
    unsigned long dwMoney; // Size=4 Offset=13
    unsigned long dwTax; // Size=4 Offset=17
} *PMSG_S2C_ANS_GIVE_MY_TAX;
typedef class MSG_S2C_FORTIFIER // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byGreen; // Size=1 Offset=12
    unsigned char byBlue; // Size=1 Offset=13
    unsigned char byRed; // Size=1 Offset=14
    unsigned char byYellow; // Size=1 Offset=15
    unsigned char byBlack; // Size=1 Offset=16
} *PMSG_S2C_FORTIFIER;
typedef class MSG_S2C_CAO_MITIGATION // Size=19
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byResultCode; // Size=1 Offset=12
    unsigned short wRTime; // Size=2 Offset=13
    unsigned long dwLore; // Size=4 Offset=15
} *PMSG_S2C_CAO_MITIGATION;
typedef class MSG_S2C_UPDATE_LORE // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    int iAddLore; // Size=4 Offset=12
    unsigned char code; // Size=1 Offset=16
} *PMSG_S2C_UPDATE_LORE;
typedef class MSG_Z2C_CONFIRM_MARK // Size=25
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwMarkID; // Size=4 Offset=12
    unsigned long dwLore; // Size=4 Offset=16
    unsigned long dwMoney; // Size=4 Offset=20
    unsigned char byResultCode; // Size=1 Offset=24
} *PMSG_Z2C_CONFIRM_MARK;
typedef class MSG_Z2M_REGISTER_MARK // Size=19
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned long dwClanID; // Size=4 Offset=15
} *PMSG_Z2M_REGISTER_MARK;
typedef class MSG_Z2M_CONFIRM_MARK // Size=24
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    unsigned char byResultCode; // Size=1 Offset=15
    unsigned long dwClanID; // Size=4 Offset=16
    unsigned long dwMarkID; // Size=4 Offset=20
} *PMSG_Z2M_CONFIRM_MARK;
typedef struct _AGIT_INFO_ // Size=66
{
    unsigned short m_wAgitID; // Size=2 Offset=0
    char m_szAgitName[32]; // Size=32 Offset=2
    char m_szOwnClanName[32]; // Size=32 Offset=34
} AGIT_INFO_, *PAGIT_INFO_;
typedef struct _AUCTION_INFO // Size=48
{
    unsigned short m_wAgitID; // Size=2 Offset=0
    unsigned long m_dwTimeElapsed; // Size=4 Offset=4
    unsigned long m_dwBidPrice; // Size=4 Offset=8
    unsigned long m_dwMaximumPrice; // Size=4 Offset=12
    char m_szAgitName[32]; // Size=32 Offset=16
} AUCTION_INFO, *PAUCTION_INFO;
typedef class MSG_S2C_AGIT_ENTER // Size=19
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrorCode; // Size=1 Offset=12
    unsigned short wSubmapIndex; // Size=2 Offset=13
    unsigned long dwCellIndex; // Size=4 Offset=15
} *PMSG_S2C_AGIT_ENTER;
typedef class MSG_S2C_AGIT_PUTUP_AUCTION // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrorCode; // Size=1 Offset=12
} *PMSG_S2C_AGIT_PUTUP_AUCTION;
typedef class MSG_S2C_AGIT_BIDON // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrorCode; // Size=1 Offset=12
    unsigned long dwMoney; // Size=4 Offset=13
} *PMSG_S2C_AGIT_BIDON;
typedef class MSG_S2C_AGIT_PAY_EXPENSE // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrorCode; // Size=1 Offset=12
    unsigned long dwMoney; // Size=4 Offset=13
} *PMSG_S2C_AGIT_PAY_EXPENSE;
typedef class MSG_S2C_AGIT_CHANGE_NAME // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrorCode; // Size=1 Offset=12
    unsigned long dwLore; // Size=4 Offset=13
} *PMSG_S2C_AGIT_CHANGE_NAME;
typedef class MSG_S2C_AGIT_REPAY_MONEY // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrorCode; // Size=1 Offset=12
    unsigned long dwMoney; // Size=4 Offset=13
} *PMSG_S2C_AGIT_REPAY_MONEY;
typedef class MSG_S2C_AGIT_OBTAIN_SALEMONEY // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrorCode; // Size=1 Offset=12
    unsigned long dwMoney; // Size=4 Offset=13
} *PMSG_S2C_AGIT_OBTAIN_SALEMONEY;
typedef class MSG_S2C_TYR_ERROR // Size=14
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wTyrErrCode; // Size=2 Offset=12
} *PMSG_S2C_TYR_ERROR;
typedef class MSG_S2C_TYR_ENTRY // Size=143
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byMyUnit; // Size=1 Offset=12
    unsigned short wEntryCnt; // Size=2 Offset=13
    char szTyrInfo[128]; // Size=128 Offset=15
} *PMSG_S2C_TYR_ENTRY;
typedef struct _TYR_ENTRY_ // Size=45
{
    char szPCName[13]; // Size=13 Offset=0
    char szClanName[32]; // Size=32 Offset=13
} TYR_ENTRY_, *PTYR_ENTRY_;
typedef class MSG_S2M_WGS_PAY // Size=44
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szAccountName[21]; // Size=21 Offset=2
    char szPasswd[21]; // Size=21 Offset=23
} *PMSG_S2M_WGS_PAY;
typedef class MSG_M2S_WGS_PAY // Size=44
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    unsigned char byPayMode; // Size=1 Offset=7
    char szAccountName[21]; // Size=21 Offset=8
    char szDeadLine[15]; // Size=15 Offset=29
} *PMSG_M2S_WGS_PAY;
typedef class MSG_S2C_PAYINFO // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byPayMode; // Size=1 Offset=12
    long lRemainTime; // Size=4 Offset=13
} *PMSG_S2C_PAYINFO;
typedef class CShareObject // Size=8
{
    long m_lockFlag; // Size=4 Offset=0
    long m_refCnt; // Size=4 Offset=4
} *PCShareObject;
typedef struct _iobuf // Size=32
{
    char * _ptr; // Size=4 Offset=0
    int _cnt; // Size=4 Offset=4
    char * _base; // Size=4 Offset=8
    int _flag; // Size=4 Offset=12
    int _file; // Size=4 Offset=16
    int _charbuf; // Size=4 Offset=20
    int _bufsiz; // Size=4 Offset=24
    char * _tmpfname; // Size=4 Offset=28
} iobuf, *Piobuf;
typedef struct std::input_iterator_tag // Size=1
{
} *Pstd::input_iterator_tag;
typedef struct std::forward_iterator_tag // Size=1
{
} *Pstd::forward_iterator_tag;
typedef struct std::bidirectional_iterator_tag // Size=1
{
} *Pstd::bidirectional_iterator_tag;
typedef struct std::iterator<std::input_iterator_tag,_C,_D> // Size=0
{
} *Pstd::iterator<std::input_iterator_tag,_C,_D>;
typedef struct std::iterator<std::input_iterator_tag,_C,int> // Size=0
{
} *Pstd::iterator<std::input_iterator_tag,_C,int>;
typedef class exception // Size=12
{
    char * _m_what; // Size=4 Offset=4
    int _m_doFree; // Size=4 Offset=8
} *Pexception;
typedef class std::bad_exception // Size=12
{
} *Pstd::bad_exception;
typedef struct _TypeDescriptor // Size=8
{
    void * pVFTable; // Size=4 Offset=0
    void * spare; // Size=4 Offset=4
} TypeDescriptor, *PTypeDescriptor;
typedef class std::bad_alloc // Size=12
{
} *Pstd::bad_alloc;
typedef class std::logic_error // Size=28
{
    class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str; // Size=16 Offset=12
} *Pstd::logic_error;
typedef class std::reverse_iterator<char const *,char,char const &,char const *,int> // Size=0
{
} *Pstd::reverse_iterator<char const *,char,char const &,char const *,int>;
typedef class std::allocator<char> // Size=1
{
} *Pstd::allocator<char>;
typedef struct std::char_traits<char> // Size=1
{
} *Pstd::char_traits<char>;
typedef class std::domain_error // Size=28
{
} *Pstd::domain_error;
typedef class std::invalid_argument // Size=28
{
} *Pstd::invalid_argument;
typedef class std::length_error // Size=28
{
} *Pstd::length_error;
typedef class std::out_of_range // Size=28
{
} *Pstd::out_of_range;
typedef class std::runtime_error // Size=28
{
    class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str; // Size=16 Offset=12
} *Pstd::runtime_error;
typedef class std::overflow_error // Size=28
{
} *Pstd::overflow_error;
typedef class std::underflow_error // Size=28
{
} *Pstd::underflow_error;
typedef class std::range_error // Size=28
{
} *Pstd::range_error;
typedef struct std::iterator<std::bidirectional_iterator_tag,_C,_Ty> // Size=0
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_C,_Ty>;
typedef struct std::_Bidit<_D,_D> // Size=0
{
} *Pstd::_Bidit<_D,_D>;
typedef struct std::unary_function<std::pair<_A,_R>,_A> // Size=0
{
} *Pstd::unary_function<std::pair<_A,_R>,_A>;
typedef struct std::binary_function<std::pair<_A1,_A2>,std::pair<_A1,_A2>,bool> // Size=0
{
} *Pstd::binary_function<std::pair<_A1,_A2>,std::pair<_A1,_A2>,bool>;
typedef class std::_Tree<_K,std::pair<_K,_Ty>,std::map<_K,_Ty,_Kfn,_Pr>::_Kfn,_Kfn,_Pr> // Size=0
{
} *Pstd::_Tree<_K,std::pair<_K,_Ty>,std::map<_K,_Ty,_Kfn,_Pr>::_Kfn,_Kfn,_Pr>;
typedef class std::_Tree<_K,std::pair<_K,_Ty>,std::multimap<_K,_Ty,_Kfn,_Pr>::_Kfn,_Kfn,_Pr> // Size=0
{
} *Pstd::_Tree<_K,std::pair<_K,_Ty>,std::multimap<_K,_Ty,_Kfn,_Pr>::_Kfn,_Kfn,_Pr>;
typedef struct _ITEM_LEVEL_ // Size=16
{
    unsigned short wNeedStr; // Size=2 Offset=0
    unsigned short wNeedDex; // Size=2 Offset=2
    unsigned short wNeedMagic; // Size=2 Offset=4
    unsigned char byRuneOption; // Size=1 Offset=6
    unsigned short wBaseAbility; // Size=2 Offset=8
    unsigned short wPlusAbility; // Size=2 Offset=10
    unsigned char byMaxIceAttr; // Size=1 Offset=12
    unsigned char byMaxFireAttr; // Size=1 Offset=13
    unsigned char byMaxLightAttr; // Size=1 Offset=14
} ITEM_LEVEL_, *PITEM_LEVEL_;
typedef struct tm // Size=36
{
    int tm_sec; // Size=4 Offset=0
    int tm_min; // Size=4 Offset=4
    int tm_hour; // Size=4 Offset=8
    int tm_mday; // Size=4 Offset=12
    int tm_mon; // Size=4 Offset=16
    int tm_year; // Size=4 Offset=20
    int tm_wday; // Size=4 Offset=24
    int tm_yday; // Size=4 Offset=28
    int tm_isdst; // Size=4 Offset=32
} *Ptm;
typedef struct _ITEM_TABLE1_DATA_ // Size=44
{
    char itemName[32]; // Size=32 Offset=0
    unsigned long dwStdPrice; // Size=4 Offset=32
    unsigned char byAuth; // Size=1 Offset=36
    unsigned char byLimit; // Size=1 Offset=37
    unsigned char byAbility; // Size=1 Offset=38
    unsigned char byMaxIceAttr; // Size=1 Offset=39
    unsigned char byMaxFireAttr; // Size=1 Offset=40
    unsigned char byMaxLightAttr; // Size=1 Offset=41
} ITEM_TABLE1_DATA_, *PITEM_TABLE1_DATA_;
typedef struct _ITEM_TABLE2_DATA_ // Size=40
{
    char itemName[32]; // Size=32 Offset=0
    unsigned long dwStdPrice; // Size=4 Offset=32
    unsigned char byAuth; // Size=1 Offset=36
    unsigned char byLimit; // Size=1 Offset=37
    unsigned char byValue1; // Size=1 Offset=38
    unsigned char byValue2; // Size=1 Offset=39
} ITEM_TABLE2_DATA_, *PITEM_TABLE2_DATA_;
typedef struct _ITEM_TABLE3_DATA_ // Size=40
{
    char itemName[32]; // Size=32 Offset=0
    unsigned long dwStdPrice; // Size=4 Offset=32
    unsigned char byAuth; // Size=1 Offset=36
    unsigned char byLimit; // Size=1 Offset=37
    unsigned char byValue1; // Size=1 Offset=38
    unsigned char byValue2; // Size=1 Offset=39
} ITEM_TABLE3_DATA_, *PITEM_TABLE3_DATA_;
typedef struct _ITEM_COUNTER // Size=8
{
    unsigned long newCnt; // Size=4 Offset=0
    unsigned long delCnt; // Size=4 Offset=4
} ITEM_COUNTER, *PITEM_COUNTER;
typedef struct _ITEM_COMBINATION_TABLE_ // Size=32
{
    unsigned short wBaseRune1; // Size=2 Offset=0
    unsigned short wBaseRune2; // Size=2 Offset=2
    unsigned short wBaseRune3; // Size=2 Offset=4
    unsigned short wRune1; // Size=2 Offset=6
    unsigned short wRune2; // Size=2 Offset=8
    unsigned short wRune3; // Size=2 Offset=10
    unsigned short wItem1; // Size=2 Offset=12
    unsigned short wItem2; // Size=2 Offset=14
    unsigned short wItem3; // Size=2 Offset=16
    unsigned short wObjectItem; // Size=2 Offset=18
    unsigned short wSuccessRatio; // Size=2 Offset=20
    unsigned short wSuccessItem; // Size=2 Offset=22
    unsigned short wOptionType; // Size=2 Offset=24
    unsigned short wFailure; // Size=2 Offset=26
    unsigned short wReserved1; // Size=2 Offset=28
    unsigned short wReserved2; // Size=2 Offset=30
} ITEM_COMBINATION_TABLE_, *PITEM_COMBINATION_TABLE_;
typedef struct EXCEL_LEVEL_DATA // Size=18
{
    unsigned short LevelOpt; // Size=2 Offset=0
    unsigned short NeedStr; // Size=2 Offset=2
    unsigned short NeedDex; // Size=2 Offset=4
    unsigned short NeedMag; // Size=2 Offset=6
    unsigned short BaseAbility; // Size=2 Offset=8
    unsigned short PlusAbility; // Size=2 Offset=10
    unsigned short MaxIceAttr; // Size=2 Offset=12
    unsigned short MaxFireAttr; // Size=2 Offset=14
    unsigned short MaxLightAttr; // Size=2 Offset=16
} *PEXCEL_LEVEL_DATA;
typedef class CSkill // Size=12
{
    int m_Skills[3]; // Size=12 Offset=0
} *PCSkill;
typedef struct _PC_DIEINFO_ // Size=8
{
    unsigned long dwPCID; // Size=4 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=4
} PC_DIEINFO_, *PPC_DIEINFO_;
typedef struct std::_Bidit<std::pair<unsigned char const ,_ITEM_ *>,int> // Size=1
{
} *Pstd::_Bidit<std::pair<unsigned char const ,_ITEM_ *>,int>;
typedef struct _OBJECT_ // Size=1
{
    unsigned char objType; // Size=1 Offset=0
} OBJECT_, *POBJECT_;
typedef class CSimpleSyncSection // Size=8
{
    long m_lockFlag; // Size=4 Offset=4
} *PCSimpleSyncSection;
typedef class CPC::CPCStatChange // Size=20
{
    unsigned char HPConsumRate; // Size=1 Offset=11
    unsigned char MPConsumRate; // Size=1 Offset=12
    unsigned char HPStealRate; // Size=1 Offset=13
    unsigned char MPStealRate; // Size=1 Offset=14
    int iBindFoot; // Size=4 Offset=16
} *PCPC::CPCStatChange;
typedef class CCheckHACK // Size=36
{
    class CLinkedList m_HackLog[3]; // Size=24 Offset=0
    int m_iTotalCounter[3]; // Size=12 Offset=24
} *PCCheckHACK;
typedef struct CPC::_REMEMBER_ENEMY_ // Size=24
{
    unsigned long dwPCID; // Size=4 Offset=0
    unsigned long dwFirstAtkTime; // Size=4 Offset=4
    char szPCName[13]; // Size=13 Offset=8
    unsigned char byGate; // Size=1 Offset=21
} *PCPC::_REMEMBER_ENEMY_;
typedef class std::map<unsigned char,_ITEM_ *,std::less<unsigned char>,std::allocator<_ITEM_ *> > // Size=16
{
    class std::_Tree<unsigned char,std::pair<unsigned char const ,_ITEM_ *>,std::map<unsigned char,_ITEM_ *,std::less<unsigned char>,std::allocator<_ITEM_ *> >::_Kfn,std::less<unsigned char>,std::allocator<_ITEM_ *> > _Tr; // Size=16 Offset=0
} *Pstd::map<unsigned char,_ITEM_ *,std::less<unsigned char>,std::allocator<_ITEM_ *> >;
typedef struct std::_Bidit<CPC *,int> // Size=1
{
} *Pstd::_Bidit<CPC *,int>;
typedef struct _WARP_WAIT_PC_ // Size=12
{
    unsigned long dwPCID; // Size=4 Offset=0
    unsigned char byGateID; // Size=1 Offset=4
    unsigned short wNewMap; // Size=2 Offset=6
    unsigned long dwNewCell; // Size=4 Offset=8
} WARP_WAIT_PC_, *PWARP_WAIT_PC_;
typedef struct CNPC::_NPC_REMEMBER_PC_ // Size=12
{
    unsigned long dwPCID; // Size=4 Offset=0
    unsigned short wMap; // Size=2 Offset=4
    unsigned char byGate; // Size=1 Offset=6
    int iDamage; // Size=4 Offset=8
} *PCNPC::_NPC_REMEMBER_PC_;
typedef class CNPC::CNPCStatChange // Size=14
{
    unsigned short IsStun: 1; // Size=2 Offset=12 BitOffset=0 BitCount=1
    unsigned short IsConfuse: 1; // Size=2 Offset=12 BitOffset=1 BitCount=1
    unsigned short IsSleep: 1; // Size=2 Offset=12 BitOffset=2 BitCount=1
    unsigned short ActionSpeedPlus: 13; // Size=2 Offset=12 BitOffset=3 BitCount=13
} *PCNPC::CNPCStatChange;
typedef class CMemBlk // Size=4
{
    void * pObj; // Size=4 Offset=0
} *PCMemBlk;
typedef class CMemManager // Size=32
{
    class CMemBlk * m_ptrMemPool; // Size=4 Offset=0
    int m_iPoolSize; // Size=4 Offset=4
    unsigned long m_dwStrtFree; // Size=4 Offset=8
    unsigned long m_dwEndFree; // Size=4 Offset=12
    int m_bEmptyFree; // Size=4 Offset=16
    int m_bFullFree; // Size=4 Offset=20
    int m_nUsed; // Size=4 Offset=24
    int m_nMaxUsed; // Size=4 Offset=28
} *PCMemManager;
typedef struct _CELL_ // Size=4
{
    unsigned long bMove: 1; // Size=4 Offset=0 BitOffset=0 BitCount=1
    unsigned long blkIndex: 10; // Size=4 Offset=0 BitOffset=1 BitCount=10
    unsigned long warpIndex: 4; // Size=4 Offset=0 BitOffset=11 BitCount=4
    unsigned long PKLevel: 2; // Size=4 Offset=0 BitOffset=15 BitCount=2
    unsigned long collLevel: 2; // Size=4 Offset=0 BitOffset=17 BitCount=2
    unsigned long bSkill: 1; // Size=4 Offset=0 BitOffset=19 BitCount=1
    unsigned long monsterLevel: 8; // Size=4 Offset=0 BitOffset=20 BitCount=8
    unsigned long viewPoint: 1; // Size=4 Offset=0 BitOffset=28 BitCount=1
    unsigned long reserved: 3; // Size=4 Offset=0 BitOffset=29 BitCount=3
} CELL_, *PCELL_;
typedef struct std::_Bidit<CNPC *,int> // Size=1
{
} *Pstd::_Bidit<CNPC *,int>;
typedef class CBlock // Size=68
{
    class std::list<CPC *,std::allocator<CPC *> > m_PCList; // Size=12 Offset=28
    class std::list<CNPC *,std::allocator<CNPC *> > m_NPCList; // Size=12 Offset=40
    class std::map<unsigned long,_ITEM_ *,std::less<unsigned long>,std::allocator<_ITEM_ *> > m_ItemMap; // Size=16 Offset=52
} *PCBlock;
typedef struct std::less<unsigned long> // Size=1
{
} *Pstd::less<unsigned long>;
typedef class std::allocator<_ITEM_ *> // Size=1
{
} *Pstd::allocator<_ITEM_ *>;
typedef class std::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,_ITEM_ *>,std::map<unsigned long,_ITEM_ *,std::less<unsigned long>,std::allocator<_ITEM_ *> >::_Kfn,std::less<unsigned long>,std::allocator<_ITEM_ *> >::ite8f40409 // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::_Tree<unsigned long,std::pair<unsigned long const ,_ITEM_ *>,std::map<unsigned long,_ITEM_ *,std::less<unsigned long>,std::allocator<_ITEM_ *> >::_Kfn,std::less<unsigned long>,std::allocator<_ITEM_ *> >::ite8f40409;
typedef struct std::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,_ITEM_ *>,std::map<unsigned long,_ITEM_ *,std::less<unsigned long>,std::allocator<_ITEM_ *> >::_Kfn,std::less<unsigned long>,std::allocator<_ITEM_ *> >::iterator,bool> // Size=8
{
    class std::_Tree<unsigned long,std::pair<unsigned long const ,_ITEM_ *>,std::map<unsigned long,_ITEM_ *,std::less<unsigned long>,std::allocator<_ITEM_ *> >::_Kfn,std::less<unsigned long>,std::allocator<_ITEM_ *> >::iterator first; // Size=4 Offset=0
    unsigned char second; // Size=1 Offset=4
} *Pstd::pair<std::_Tree<unsigned long,std::pair<unsigned long const ,_ITEM_ *>,std::map<unsigned long,_ITEM_ *,std::less<unsigned long>,std::allocator<_ITEM_ *> >::_Kfn,std::less<unsigned long>,std::allocator<_ITEM_ *> >::iterator,bool>;
typedef struct _WARP_ // Size=8
{
    unsigned short mapIndex; // Size=2 Offset=0
    unsigned long cellIndex; // Size=4 Offset=4
} WARP_, *PWARP_;
typedef struct _NPC_DATA_TABLE_::_NPC_ATTACK_INFO_ // Size=8
{
    struct
    {
        unsigned long AttkRangeMin: 4; // Size=4 Offset=0 BitOffset=0 BitCount=4
        unsigned long AttkRangeMax: 7; // Size=4 Offset=0 BitOffset=4 BitCount=7
        unsigned long AttkSphere: 5; // Size=4 Offset=0 BitOffset=11 BitCount=5
        unsigned long Reservered: 16; // Size=4 Offset=0 BitOffset=16 BitCount=16
    };
    struct
    {
        unsigned long AttkRateBase: 16; // Size=4 Offset=4 BitOffset=0 BitCount=16
        unsigned long AttkRateOpt: 16; // Size=4 Offset=4 BitOffset=16 BitCount=16
    };
} NPC_DATA_TABLE_::_NPC_ATTACK_INFO_, *PNPC_DATA_TABLE_::_NPC_ATTACK_INFO_;
typedef struct _NPC_DROPITEM_TABLE_::_ITEM_DROPRATE_ // Size=8
{
    unsigned short wItemCode; // Size=2 Offset=0
    unsigned long dwDropRate; // Size=4 Offset=4
} NPC_DROPITEM_TABLE_::_ITEM_DROPRATE_, *PNPC_DROPITEM_TABLE_::_ITEM_DROPRATE_;
typedef class CNPCRecallMemMgr // Size=8
{
    class CLinkedList m_RecallNPCMemPool; // Size=8 Offset=0
} *PCNPCRecallMemMgr;
typedef struct _WAIT_RECALL_ // Size=20
{
    class CNPC * pMasterNPC; // Size=4 Offset=0
    unsigned short wRecallNPC; // Size=2 Offset=4
    unsigned long dwDestCell; // Size=4 Offset=8
    int iRecallNum; // Size=4 Offset=12
    unsigned char byRecallInfo; // Size=1 Offset=16
} WAIT_RECALL_, *PWAIT_RECALL_;
typedef class CNPCAI // Size=184
{
    class CLinkedList * m_ListNPC; // Size=4 Offset=16
    class CKilledCharManage m_KilledNPC; // Size=32 Offset=20
    class CNPCWaitRecall m_WaitRecallNPC; // Size=32 Offset=52
    class CNPCRecallMemMgr m_RecallNPCMemMgr; // Size=8 Offset=84
    unsigned long m_dwNowAITick; // Size=4 Offset=92
    class CNPC * m_EventNPC[22]; // Size=88 Offset=96
} *PCNPCAI;
typedef struct _PET_TABLE_DATA_ // Size=40
{
    char itemName[32]; // Size=32 Offset=0
    unsigned long dwStdPrice; // Size=4 Offset=32
    unsigned char byAuth; // Size=1 Offset=36
    unsigned char byLimit; // Size=1 Offset=37
    unsigned char byValue1; // Size=1 Offset=38
    unsigned char byValue2; // Size=1 Offset=39
} PET_TABLE_DATA_, *PPET_TABLE_DATA_;
typedef struct _QUEST_HEADER_ // Size=460
{
    char Title[64]; // Size=64 Offset=0
    char Desc[384]; // Size=384 Offset=64
    int Index; // Size=4 Offset=448
    int Level; // Size=4 Offset=452
    int Nation; // Size=4 Offset=456
} QUEST_HEADER_, *PQUEST_HEADER_;
typedef struct _QUEST_NEEDS_ // Size=24
{
    int Class; // Size=4 Offset=0
    int PartyNumb; // Size=4 Offset=4
    int PartyClass; // Size=4 Offset=8
    int PrevQuest; // Size=4 Offset=12
    int LevelLow; // Size=4 Offset=16
    int LevelHigh; // Size=4 Offset=20
} QUEST_NEEDS_, *PQUEST_NEEDS_;
typedef struct _QUEST_REWARD_ // Size=52
{
    int ItemCode[3]; // Size=12 Offset=0
    int ItemLevel[3]; // Size=12 Offset=12
    int ItemNumb[3]; // Size=12 Offset=24
    int Exp; // Size=4 Offset=36
    int Money; // Size=4 Offset=40
    int Lore; // Size=4 Offset=44
    int Quest; // Size=4 Offset=48
} QUEST_REWARD_, *PQUEST_REWARD_;
typedef struct _QUEST_CONTENTS_ // Size=220
{
    int Type; // Size=4 Offset=0
    int Map; // Size=4 Offset=4
    int Cell; // Size=4 Offset=8
    int Distance; // Size=4 Offset=12
    int NPCCode; // Size=4 Offset=16
    int NPCNumb; // Size=4 Offset=20
    int ItemCode[4]; // Size=16 Offset=24
    int ItemLevel[4]; // Size=16 Offset=40
    int ItemNumb[4]; // Size=16 Offset=56
    int Probabilty[4]; // Size=16 Offset=72
    int Skill; // Size=4 Offset=88
    char Str0[64]; // Size=64 Offset=92
    char Str1[64]; // Size=64 Offset=156
} QUEST_CONTENTS_, *PQUEST_CONTENTS_;
typedef class CUDPSock // Size=1036
{
    unsigned int m_hSocket; // Size=4 Offset=4
    void * m_wsaEvent; // Size=4 Offset=8
    char m_ReadBuf[1024]; // Size=1024 Offset=12
} *PCUDPSock;
typedef class CSimpleCrypt // Size=16
{
    int m_ConstKey1; // Size=4 Offset=4
    int m_ConstKey2; // Size=4 Offset=8
    int m_DynamicKey; // Size=4 Offset=12
} *PCSimpleCrypt;
typedef struct std::_Bidit<_LOG_DATA_ *,int> // Size=1
{
} *Pstd::_Bidit<_LOG_DATA_ *,int>;
typedef struct _LOG_DATA_ // Size=2052
{
    long tvTime; // Size=4 Offset=0
    char LogStr[2048]; // Size=2048 Offset=4
} LOG_DATA_, *PLOG_DATA_;
typedef class CTimeFunc // Size=1
{
} *PCTimeFunc;
typedef class MSG_HEADER // Size=2
{
    unsigned short wProtocol; // Size=2 Offset=0
} *PMSG_HEADER;
typedef class MSG_V2S_CMM_KILL // Size=2
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
} *PMSG_V2S_CMM_KILL;
typedef class MSG_S2V_CMM_KILL // Size=2
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
} *PMSG_S2V_CMM_KILL;
typedef class MSG_V2S_MAIN_SHOUT // Size=66
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
    char szMsg[64]; // Size=64 Offset=2
} *PMSG_V2S_MAIN_SHOUT;
typedef class MSG_V2S_MAIN_WHISPER // Size=79
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
    char szPCName[13]; // Size=13 Offset=2
    char szMsg[64]; // Size=64 Offset=15
} *PMSG_V2S_MAIN_WHISPER;
typedef class MSG_S2V_CMM_ALIVE // Size=2
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
} *PMSG_S2V_CMM_ALIVE;
typedef class MSG_S2V_MAIN_SHOUT // Size=66
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
    char szMsg[64]; // Size=64 Offset=2
} *PMSG_S2V_MAIN_SHOUT;
typedef struct _MAP_INFO_ // Size=4
{
    unsigned short wMapIndex; // Size=2 Offset=0
    unsigned short wCurUser; // Size=2 Offset=2
} MAP_INFO_, *PMAP_INFO_;
typedef class MSG_S2V_WARNNING // Size=130
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
    char szWarn[128]; // Size=128 Offset=2
} *PMSG_S2V_WARNNING;
typedef struct CPartyQuest::_CHALLENGER_ // Size=8
{
    unsigned long dwPCID; // Size=4 Offset=0
    unsigned char byGateSvr; // Size=1 Offset=4
} *PCPartyQuest::_CHALLENGER_;
typedef struct _QUEST_PORTAL_NPC_ // Size=20
{
    unsigned char questIdx; // Size=1 Offset=0
    unsigned char questStep; // Size=1 Offset=1
    unsigned char feature; // Size=1 Offset=2
    unsigned short wNPCType; // Size=2 Offset=4
    unsigned short wMapIndex; // Size=2 Offset=6
    unsigned short wNeedItem; // Size=2 Offset=8
    unsigned long dwMasterCell; // Size=4 Offset=12
    unsigned long dwSubCell; // Size=4 Offset=16
} QUEST_PORTAL_NPC_, *PQUEST_PORTAL_NPC_;
typedef struct _LOTTO_LOG_DATA_ // Size=108
{
    int nLottoCnt; // Size=4 Offset=0
    int iLuckyNumber[5]; // Size=20 Offset=4
    int nTotalWinner[4]; // Size=16 Offset=24
    unsigned int iRemainMoney; // Size=4 Offset=40
    char szDateLog[64]; // Size=64 Offset=44
} LOTTO_LOG_DATA_, *PLOTTO_LOG_DATA_;
typedef struct _AGIT_TABLE_INFO_ // Size=24
{
    char szAgitRecordName[13]; // Size=13 Offset=0
    unsigned char byNation; // Size=1 Offset=13
    int nAgitRoomID; // Size=4 Offset=16
    int nTabID; // Size=4 Offset=20
} AGIT_TABLE_INFO_, *PAGIT_TABLE_INFO_;
typedef struct _REIGNCLAN_ // Size=456
{
    unsigned char byWhichTollan; // Size=1 Offset=0
    unsigned long arrToll[2]; // Size=8 Offset=4
    unsigned long arrErrt[4]; // Size=32 Offset=12
    char arrTollNames[32]; // Size=64 Offset=44
    char arrErrtNames[32]; // Size=256 Offset=108
    unsigned long arrMoney4Toll[4]; // Size=32 Offset=364
    unsigned long arrMoney4Errt[4]; // Size=32 Offset=396
    char arrTollPCNames[13]; // Size=26 Offset=428
} REIGNCLAN_, *PREIGNCLAN_;
typedef struct std::_Bidit<_AGIT_REPAY_ *,int> // Size=1
{
} *Pstd::_Bidit<_AGIT_REPAY_ *,int>;
typedef struct _AGIT_REPAY_ // Size=20
{
    unsigned long m_dwMoney; // Size=4 Offset=0
    char m_szBidder[13]; // Size=13 Offset=4
} AGIT_REPAY_, *PAGIT_REPAY_;
typedef class CMainServer // Size=8388732
{
    int m_bRunServer; // Size=4 Offset=8388728
} *PCMainServer;
typedef class std::allocator<CPC *> // Size=1
{
} *Pstd::allocator<CPC *>;
typedef class std::reverse_bidirectional_iterator<std::list<CPC *,std::allocator<CPC *> >::iterator,CPC *,CPC * &,CPC * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<CPC *,std::allocator<CPC *> >::iterator,CPC *,CPC * &,CPC * *,int>;
typedef struct std::not_equal_to<CPC *> // Size=1
{
} *Pstd::not_equal_to<CPC *>;
typedef struct std::greater<CPC *> // Size=1
{
} *Pstd::greater<CPC *>;
typedef class std::allocator<CNPC *> // Size=1
{
} *Pstd::allocator<CNPC *>;
typedef class std::reverse_bidirectional_iterator<std::list<CNPC *,std::allocator<CNPC *> >::iterator,CNPC *,CNPC * &,CNPC * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<CNPC *,std::allocator<CNPC *> >::iterator,CNPC *,CNPC * &,CNPC * *,int>;
typedef struct std::not_equal_to<CNPC *> // Size=1
{
} *Pstd::not_equal_to<CNPC *>;
typedef struct std::greater<CNPC *> // Size=1
{
} *Pstd::greater<CNPC *>;
typedef struct std::binary_function<unsigned long,unsigned long,bool> // Size=1
{
} *Pstd::binary_function<unsigned long,unsigned long,bool>;
typedef class std::_Lockit // Size=1
{
} *Pstd::_Lockit;
typedef class std::basic_string // Size=0
{
} *Pstd::basic_string;
typedef class std::_Tree // Size=0
{
} *Pstd::_Tree;
typedef struct std::char_traits<unsigned short> // Size=1
{
} *Pstd::char_traits<unsigned short>;
typedef class std::fpos<int> // Size=24
{
    union
    {
        int _Stz; // Size=4 Offset=0
        long _Off; // Size=4 Offset=0
    };
    __int64 _Fpos; // Size=8 Offset=8
    int _State; // Size=4 Offset=16
} *Pstd::fpos<int>;
typedef struct HWND__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHWND__;
typedef struct _ULARGE_INTEGER::__unnamed // Size=8
{
    unsigned long LowPart; // Size=4 Offset=0
    unsigned long HighPart; // Size=4 Offset=4
} ULARGE_INTEGER::__unnamed, *PULARGE_INTEGER::__unnamed;
typedef class std::allocator<_LOG_DATA_ *> // Size=1
{
} *Pstd::allocator<_LOG_DATA_ *>;
typedef class std::reverse_bidirectional_iterator<std::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> >::iterator,_LOG_DATA_ *,_LOG_DATA_ * &,_LOG_DATA_ * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> >::iterator,_LOG_DATA_ *,_LOG_DATA_ * &,_LOG_DATA_ * *,int>;
typedef struct std::not_equal_to<_LOG_DATA_ *> // Size=1
{
} *Pstd::not_equal_to<_LOG_DATA_ *>;
typedef struct std::greater<_LOG_DATA_ *> // Size=1
{
} *Pstd::greater<_LOG_DATA_ *>;
typedef struct _PMD // Size=12
{
    int mdisp; // Size=4 Offset=0
    int pdisp; // Size=4 Offset=4
    int vdisp; // Size=4 Offset=8
} PMD, *PPMD;
typedef struct HDRVR__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHDRVR__;
typedef struct tagLOGFONTW // Size=92
{
    long lfHeight; // Size=4 Offset=0
    long lfWidth; // Size=4 Offset=4
    long lfEscapement; // Size=4 Offset=8
    long lfOrientation; // Size=4 Offset=12
    long lfWeight; // Size=4 Offset=16
    unsigned char lfItalic; // Size=1 Offset=20
    unsigned char lfUnderline; // Size=1 Offset=21
    unsigned char lfStrikeOut; // Size=1 Offset=22
    unsigned char lfCharSet; // Size=1 Offset=23
    unsigned char lfOutPrecision; // Size=1 Offset=24
    unsigned char lfClipPrecision; // Size=1 Offset=25
    unsigned char lfQuality; // Size=1 Offset=26
    unsigned char lfPitchAndFamily; // Size=1 Offset=27
    unsigned short lfFaceName[32]; // Size=64 Offset=28
} *PtagLOGFONTW;
typedef struct tagTEXTMETRICW // Size=60
{
    long tmHeight; // Size=4 Offset=0
    long tmAscent; // Size=4 Offset=4
    long tmDescent; // Size=4 Offset=8
    long tmInternalLeading; // Size=4 Offset=12
    long tmExternalLeading; // Size=4 Offset=16
    long tmAveCharWidth; // Size=4 Offset=20
    long tmMaxCharWidth; // Size=4 Offset=24
    long tmWeight; // Size=4 Offset=28
    long tmOverhang; // Size=4 Offset=32
    long tmDigitizedAspectX; // Size=4 Offset=36
    long tmDigitizedAspectY; // Size=4 Offset=40
    unsigned short tmFirstChar; // Size=2 Offset=44
    unsigned short tmLastChar; // Size=2 Offset=46
    unsigned short tmDefaultChar; // Size=2 Offset=48
    unsigned short tmBreakChar; // Size=2 Offset=50
    unsigned char tmItalic; // Size=1 Offset=52
    unsigned char tmUnderlined; // Size=1 Offset=53
    unsigned char tmStruckOut; // Size=1 Offset=54
    unsigned char tmPitchAndFamily; // Size=1 Offset=55
    unsigned char tmCharSet; // Size=1 Offset=56
} *PtagTEXTMETRICW;
typedef struct tagLOGFONTA // Size=60
{
    long lfHeight; // Size=4 Offset=0
    long lfWidth; // Size=4 Offset=4
    long lfEscapement; // Size=4 Offset=8
    long lfOrientation; // Size=4 Offset=12
    long lfWeight; // Size=4 Offset=16
    unsigned char lfItalic; // Size=1 Offset=20
    unsigned char lfUnderline; // Size=1 Offset=21
    unsigned char lfStrikeOut; // Size=1 Offset=22
    unsigned char lfCharSet; // Size=1 Offset=23
    unsigned char lfOutPrecision; // Size=1 Offset=24
    unsigned char lfClipPrecision; // Size=1 Offset=25
    unsigned char lfQuality; // Size=1 Offset=26
    unsigned char lfPitchAndFamily; // Size=1 Offset=27
    char lfFaceName[32]; // Size=32 Offset=28
} *PtagLOGFONTA;
typedef struct tagTEXTMETRICA // Size=56
{
    long tmHeight; // Size=4 Offset=0
    long tmAscent; // Size=4 Offset=4
    long tmDescent; // Size=4 Offset=8
    long tmInternalLeading; // Size=4 Offset=12
    long tmExternalLeading; // Size=4 Offset=16
    long tmAveCharWidth; // Size=4 Offset=20
    long tmMaxCharWidth; // Size=4 Offset=24
    long tmWeight; // Size=4 Offset=28
    long tmOverhang; // Size=4 Offset=32
    long tmDigitizedAspectX; // Size=4 Offset=36
    long tmDigitizedAspectY; // Size=4 Offset=40
    unsigned char tmFirstChar; // Size=1 Offset=44
    unsigned char tmLastChar; // Size=1 Offset=45
    unsigned char tmDefaultChar; // Size=1 Offset=46
    unsigned char tmBreakChar; // Size=1 Offset=47
    unsigned char tmItalic; // Size=1 Offset=48
    unsigned char tmUnderlined; // Size=1 Offset=49
    unsigned char tmStruckOut; // Size=1 Offset=50
    unsigned char tmPitchAndFamily; // Size=1 Offset=51
    unsigned char tmCharSet; // Size=1 Offset=52
} *PtagTEXTMETRICA;
typedef struct HINSTANCE__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHINSTANCE__;
typedef struct HDC__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHDC__;
typedef struct _OVERLAPPED // Size=20
{
    unsigned long Internal; // Size=4 Offset=0
    unsigned long InternalHigh; // Size=4 Offset=4
    unsigned long Offset; // Size=4 Offset=8
    unsigned long OffsetHigh; // Size=4 Offset=12
    void * hEvent; // Size=4 Offset=16
} OVERLAPPED, *POVERLAPPED;
typedef struct val_context // Size=12
{
    int valuelen; // Size=4 Offset=0
    void * value_context; // Size=4 Offset=4
    void * val_buff_ptr; // Size=4 Offset=8
} *Pval_context;
typedef struct IUnknown // Size=4
{
} *PIUnknown;
typedef struct IEnumSTATSTG // Size=4
{
} *PIEnumSTATSTG;
typedef struct tagHANDLETABLE // Size=4
{
    void * objectHandle[1]; // Size=4 Offset=0
} *PtagHANDLETABLE;
typedef struct tagENHMETARECORD // Size=12
{
    unsigned long iType; // Size=4 Offset=0
    unsigned long nSize; // Size=4 Offset=4
    unsigned long dParm[1]; // Size=4 Offset=8
} *PtagENHMETARECORD;
typedef struct std::unary_function<std::pair<unsigned long const ,_ITEM_ *>,unsigned long> // Size=1
{
} *Pstd::unary_function<std::pair<unsigned long const ,_ITEM_ *>,unsigned long>;
typedef struct std::binary_function<std::pair<unsigned long const ,_ITEM_ *>,std::pair<unsigned long const ,_ITEM_ *>,bool> // Size=1
{
} *Pstd::binary_function<std::pair<unsigned long const ,_ITEM_ *>,std::pair<unsigned long const ,_ITEM_ *>,bool>;
typedef struct std::binary_function<CPC *,CPC *,bool> // Size=1
{
} *Pstd::binary_function<CPC *,CPC *,bool>;
typedef struct std::binary_function<_LOG_DATA_ *,_LOG_DATA_ *,bool> // Size=1
{
} *Pstd::binary_function<_LOG_DATA_ *,_LOG_DATA_ *,bool>;
typedef struct std::iterator<std::bidirectional_iterator_tag,std::pair<unsigned long const ,_ITEM_ *>,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,std::pair<unsigned long const ,_ITEM_ *>,int>;
typedef struct std::binary_function<CNPC *,CNPC *,bool> // Size=1
{
} *Pstd::binary_function<CNPC *,CNPC *,bool>;
typedef struct std::iterator<std::bidirectional_iterator_tag,CNPC *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,CNPC *,int>;
typedef struct std::iterator<std::bidirectional_iterator_tag,CPC *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,CPC *,int>;
typedef struct std::iterator<std::bidirectional_iterator_tag,_LOG_DATA_ *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_LOG_DATA_ *,int>;
typedef struct std::unary_function<CPC *,bool> // Size=1
{
} *Pstd::unary_function<CPC *,bool>;
typedef struct std::unary_function<CNPC *,bool> // Size=1
{
} *Pstd::unary_function<CNPC *,bool>;
typedef struct _AGIT_AUCTION_ // Size=156
{
    unsigned short m_wAgitID; // Size=2 Offset=0
    unsigned long m_dwAuctionTerm; // Size=4 Offset=4
    unsigned long m_dwMinimumPrice; // Size=4 Offset=8
    unsigned long m_dwMaximumPrice; // Size=4 Offset=12
    unsigned long m_dwBidPrice; // Size=4 Offset=16
    unsigned long m_dwTimeElapsed; // Size=4 Offset=20
    unsigned long m_dwAuctioneerClanID; // Size=4 Offset=24
    unsigned long m_dwBidderClanID; // Size=4 Offset=28
    char m_szAuctioneer[13]; // Size=13 Offset=32
    char m_szAuctioneerClan[32]; // Size=32 Offset=45
    char m_szBidder[13]; // Size=13 Offset=77
    char m_szBidderClan[32]; // Size=32 Offset=90
    char m_szAgitName[32]; // Size=32 Offset=122
} AGIT_AUCTION_, *PAGIT_AUCTION_;
typedef class std::allocator<_AGIT_REPAY_ *> // Size=1
{
} *Pstd::allocator<_AGIT_REPAY_ *>;
typedef class std::reverse_bidirectional_iterator<std::list<_AGIT_REPAY_ *,std::allocator<_AGIT_REPAY_ *> >::iterator,_AGIT_REPAY_ *,_AGIT_REPAY_ * &,_AGIT_REPAY_ * *,int> // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<_AGIT_REPAY_ *,std::allocator<_AGIT_REPAY_ *> >::iterator,_AGIT_REPAY_ *,_AGIT_REPAY_ * &,_AGIT_REPAY_ * *,int>;
typedef struct std::not_equal_to<_AGIT_REPAY_ *> // Size=1
{
} *Pstd::not_equal_to<_AGIT_REPAY_ *>;
typedef struct std::greater<_AGIT_REPAY_ *> // Size=1
{
} *Pstd::greater<_AGIT_REPAY_ *>;
typedef struct std::iterator<std::bidirectional_iterator_tag,_AGIT_REPAY_ *,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,_AGIT_REPAY_ *,int>;
typedef class std::allocator<_AGIT_AUCTION_ *> // Size=1
{
} *Pstd::allocator<_AGIT_AUCTION_ *>;
typedef struct std::unary_function<_LOG_DATA_ *,bool> // Size=1
{
} *Pstd::unary_function<_LOG_DATA_ *,bool>;
typedef struct std::binary_function<_AGIT_REPAY_ *,_AGIT_REPAY_ *,bool> // Size=1
{
} *Pstd::binary_function<_AGIT_REPAY_ *,_AGIT_REPAY_ *,bool>;
typedef struct std::unary_function<_AGIT_REPAY_ *,bool> // Size=1
{
} *Pstd::unary_function<_AGIT_REPAY_ *,bool>;
typedef struct _LARGE_INTEGER::__unnamed // Size=8
{
    unsigned long LowPart; // Size=4 Offset=0
    long HighPart; // Size=4 Offset=4
} LARGE_INTEGER::__unnamed, *PLARGE_INTEGER::__unnamed;
typedef struct _RPC_VERSION // Size=4
{
    unsigned short MajorVersion; // Size=2 Offset=0
    unsigned short MinorVersion; // Size=2 Offset=2
} RPC_VERSION, *PRPC_VERSION;
typedef struct _ITEM_TABLE_FOR_EVENT // Size=4
{
    unsigned short code; // Size=2 Offset=0
    unsigned short dropProb; // Size=2 Offset=2
} ITEM_TABLE_FOR_EVENT, *PITEM_TABLE_FOR_EVENT;
typedef struct ISequentialStream // Size=4
{
} *PISequentialStream;
typedef struct tagMETARECORD // Size=8
{
    unsigned long rdSize; // Size=4 Offset=0
    unsigned short rdFunction; // Size=2 Offset=4
    unsigned short rdParm[1]; // Size=2 Offset=6
} *PtagMETARECORD;
typedef struct DLGTEMPLATE // Size=18
{
    unsigned long style; // Size=4 Offset=0
    unsigned long dwExtendedStyle; // Size=4 Offset=4
    unsigned short cdit; // Size=2 Offset=8
    short x; // Size=2 Offset=10
    short y; // Size=2 Offset=12
    short cx; // Size=2 Offset=14
    short cy; // Size=2 Offset=16
} *PDLGTEMPLATE;
typedef struct HICON__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHICON__;
typedef struct tagPOINT // Size=8
{
    long x; // Size=4 Offset=0
    long y; // Size=4 Offset=4
} *PtagPOINT;
typedef struct _PSP // Size=0
{
} PSP, *PPSP;
typedef struct ___unnamed1086 // Size=12
{
    void * pad[2]; // Size=8 Offset=0
    void * userContext; // Size=4 Offset=8
} __unnamed1086, *P__unnamed1086;
typedef struct IRpcChannelBuffer // Size=4
{
} *PIRpcChannelBuffer;
typedef struct ARRAY_INFO // Size=24
{
    long Dimension; // Size=4 Offset=0
    unsigned long * BufferConformanceMark; // Size=4 Offset=4
    unsigned long * BufferVarianceMark; // Size=4 Offset=8
    unsigned long * MaxCountArray; // Size=4 Offset=12
    unsigned long * OffsetArray; // Size=4 Offset=16
    unsigned long * ActualCountArray; // Size=4 Offset=20
} *PARRAY_INFO;
typedef struct _NDR_PIPE_DESC // Size=0
{
} NDR_PIPE_DESC, *PNDR_PIPE_DESC;
typedef struct _NDR_ASYNC_MESSAGE // Size=0
{
} NDR_ASYNC_MESSAGE, *PNDR_ASYNC_MESSAGE;
typedef struct _FLOATING_SAVE_AREA // Size=112
{
    unsigned long ControlWord; // Size=4 Offset=0
    unsigned long StatusWord; // Size=4 Offset=4
    unsigned long TagWord; // Size=4 Offset=8
    unsigned long ErrorOffset; // Size=4 Offset=12
    unsigned long ErrorSelector; // Size=4 Offset=16
    unsigned long DataOffset; // Size=4 Offset=20
    unsigned long DataSelector; // Size=4 Offset=24
    unsigned char RegisterArea[80]; // Size=80 Offset=28
    unsigned long Cr0NpxState; // Size=4 Offset=108
} FLOATING_SAVE_AREA, *PFLOATING_SAVE_AREA;
typedef struct __GENERIC_BINDING_INFO // Size=16
{
    void * pObj; // Size=4 Offset=0
    unsigned int Size; // Size=4 Offset=4
    void * ( * pfnBind)(void *); // Size=4 Offset=8
    void ( * pfnUnbind)(void *,unsigned char *); // Size=4 Offset=12
} _GENERIC_BINDING_INFO, *P_GENERIC_BINDING_INFO;
typedef struct _GENERIC_BINDING_ROUTINE_PAIR // Size=8
{
    void * ( * pfnBind)(void *); // Size=4 Offset=0
    void ( * pfnUnbind)(void *,unsigned char *); // Size=4 Offset=4
} GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;
typedef struct _XMIT_ROUTINE_QUINTUPLE // Size=16
{
    void ( * pfnTranslateToXmit)(struct _MIDL_STUB_MESSAGE *); // Size=4 Offset=0
    void ( * pfnTranslateFromXmit)(struct _MIDL_STUB_MESSAGE *); // Size=4 Offset=4
    void ( * pfnFreeXmit)(struct _MIDL_STUB_MESSAGE *); // Size=4 Offset=8
    void ( * pfnFreeInst)(struct _MIDL_STUB_MESSAGE *); // Size=4 Offset=12
} XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;
typedef struct _MALLOC_FREE_STRUCT // Size=8
{
    void * ( * pfnAllocate)(unsigned int); // Size=4 Offset=0
    void ( * pfnFree)(void *); // Size=4 Offset=4
} MALLOC_FREE_STRUCT, *PMALLOC_FREE_STRUCT;
typedef struct _COMM_FAULT_OFFSETS // Size=4
{
    short CommOffset; // Size=2 Offset=0
    short FaultOffset; // Size=2 Offset=2
} COMM_FAULT_OFFSETS, *PCOMM_FAULT_OFFSETS;
typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE // Size=16
{
    unsigned long ( * pfnBufferSize)(unsigned long *,unsigned long,void *); // Size=4 Offset=0
    unsigned char * ( * pfnMarshall)(unsigned long *,unsigned char *,void *); // Size=4 Offset=4
    unsigned char * ( * pfnUnmarshall)(unsigned long *,unsigned char *,void *); // Size=4 Offset=8
    void ( * pfnFree)(unsigned long *,void *); // Size=4 Offset=12
} USER_MARSHAL_ROUTINE_QUADRUPLE, *PUSER_MARSHAL_ROUTINE_QUADRUPLE;
typedef struct _FULL_PTR_XLAT_TABLES::__unnamed // Size=12
{
    void * * XlatTable; // Size=4 Offset=0
    unsigned char * StateTable; // Size=4 Offset=4
    unsigned long NumberOfEntries; // Size=4 Offset=8
} FULL_PTR_XLAT_TABLES::__unnamed, *PFULL_PTR_XLAT_TABLES::__unnamed;
typedef struct tagRPCOLEMESSAGE // Size=44
{
    void * reserved1; // Size=4 Offset=0
    unsigned long dataRepresentation; // Size=4 Offset=4
    void * Buffer; // Size=4 Offset=8
    unsigned long cbBuffer; // Size=4 Offset=12
    unsigned long iMethod; // Size=4 Offset=16
    void * reserved2[5]; // Size=20 Offset=20
    unsigned long rpcFlags; // Size=4 Offset=40
} *PtagRPCOLEMESSAGE;
typedef class CAgitAuctionManager // Size=48
{
    class std::map<unsigned short,_AGIT_AUCTION_ *,std::less<unsigned short>,std::allocator<_AGIT_AUCTION_ *> > m_mapAgitAuction[2]; // Size=32 Offset=4
    class std::list<_AGIT_REPAY_ *,std::allocator<_AGIT_REPAY_ *> > m_listRepayAuction; // Size=12 Offset=36
} *PCAgitAuctionManager;
typedef class CLoopSleepMgr // Size=20
{
    int m_iInterval; // Size=4 Offset=4
    unsigned long m_dwLongSleep; // Size=4 Offset=8
    unsigned long m_dwShortSleep; // Size=4 Offset=12
    int m_iCounter; // Size=4 Offset=16
} *PCLoopSleepMgr;
typedef struct _LAST_CALL_INFO_ // Size=264
{
    char pFile[260]; // Size=260 Offset=0
    int nLine; // Size=4 Offset=260
} LAST_CALL_INFO_, *PLAST_CALL_INFO_;
typedef class CMsgCrypt // Size=20
{
    int m_iMsgHeaderSize; // Size=4 Offset=16
} *PCMsgCrypt;
typedef class CGateServer // Size=8388764
{
    int m_bRunServer; // Size=4 Offset=8388728
    unsigned char m_bySvrID; // Size=1 Offset=8388732
    class CSyncSection m_CryptSync; // Size=28 Offset=8388736
} *PCGateServer;
typedef class CTickManage // Size=56
{
    long m_lNowTick; // Size=4 Offset=0
    unsigned long m_dwNowMiliTick; // Size=4 Offset=4
    long m_lSecondNewDate; // Size=4 Offset=8
    long m_lSecondOClock; // Size=4 Offset=12
    long m_lSecond10Min; // Size=4 Offset=16
    long m_lSecond180; // Size=4 Offset=20
    long m_lSecond120; // Size=4 Offset=24
    long m_lSecond60; // Size=4 Offset=28
    long m_lSecond30; // Size=4 Offset=32
    long m_lSecond10; // Size=4 Offset=36
    long m_lSecond5; // Size=4 Offset=40
    long m_lSecond2; // Size=4 Offset=44
    long m_lSecond1; // Size=4 Offset=48
    unsigned long m_dwMiliSecond500; // Size=4 Offset=52
} *PCTickManage;
typedef struct std::_Bidit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> // Size=1
{
} *Pstd::_Bidit<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>;
typedef class MSG_DFLT_HEADER // Size=10
{
    unsigned long dwSize; // Size=4 Offset=0
    unsigned long dwPCID; // Size=4 Offset=4
    unsigned char byCtrl; // Size=1 Offset=8
    unsigned char byCmd; // Size=1 Offset=9
} *PMSG_DFLT_HEADER;
typedef class MSG_G2S_NEW_CLIENT // Size=31
{
    class MSG_S2G_HEADER MsgHeader; // Size=10 Offset=0
    char szAccountName[21]; // Size=21 Offset=10
} *PMSG_G2S_NEW_CLIENT;
typedef class MSG_G2S_DISCONNECT // Size=11
{
    class MSG_S2G_HEADER MsgHeader; // Size=10 Offset=0
    unsigned char byReason; // Size=1 Offset=10
} *PMSG_G2S_DISCONNECT;
typedef class MSG_C2S_ASK_MOVE // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwDestCell; // Size=4 Offset=12
    unsigned char byMoveSpeed; // Size=1 Offset=16
} *PMSG_C2S_ASK_MOVE;
typedef class MSG_C2S_PC_MOVE // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNextCell; // Size=4 Offset=12
    unsigned char byMoveSpeed; // Size=1 Offset=16
} *PMSG_C2S_PC_MOVE;
typedef class MSG_C2S_WORLD_LOGIN // Size=25
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    char szPCName[13]; // Size=13 Offset=12
} *PMSG_C2S_WORLD_LOGIN;
typedef class MSG_C2S_CHAR_LOGOUT // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2S_CHAR_LOGOUT;
typedef class MSG_C2S_ASK_ATTACK // Size=18
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byTargetType; // Size=1 Offset=12
    unsigned long dwTargetID; // Size=4 Offset=13
    unsigned char byAttackType; // Size=1 Offset=17
} *PMSG_C2S_ASK_ATTACK;
typedef class MSG_C2S_ASK_SKILL // Size=18
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bySkillIndex; // Size=1 Offset=12
    unsigned char byTargetType; // Size=1 Offset=13
    unsigned long dwTargetID; // Size=4 Offset=14
} *PMSG_C2S_ASK_SKILL;
typedef class MSG_C2S_USE_POTION // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byPotionType; // Size=1 Offset=12
} *PMSG_C2S_USE_POTION;
typedef class MSG_C2S_BUY_ITEM // Size=20
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned short code; // Size=2 Offset=16
    unsigned short wQuantity; // Size=2 Offset=18
} *PMSG_C2S_BUY_ITEM;
typedef class MSG_C2S_ASK_DEAL // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOPCID; // Size=4 Offset=12
} *PMSG_C2S_ASK_DEAL;
typedef class MSG_C2S_ANS_DEAL // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwAskPCID; // Size=4 Offset=12
    unsigned char answer; // Size=1 Offset=16
} *PMSG_C2S_ANS_DEAL;
typedef class MSG_C2S_DECIDE_DEAL // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char decide; // Size=1 Offset=12
} *PMSG_C2S_DECIDE_DEAL;
typedef class MSG_C2S_CONFIRM_DEAL // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char confirm; // Size=1 Offset=12
} *PMSG_C2S_CONFIRM_DEAL;
typedef class MSG_C2S_ALLOT_POINT // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char strPoint; // Size=1 Offset=12
    unsigned char magicPoint; // Size=1 Offset=13
    unsigned char dexPoint; // Size=1 Offset=14
    unsigned char vitPoint; // Size=1 Offset=15
    unsigned char manaPoint; // Size=1 Offset=16
} *PMSG_C2S_ALLOT_POINT;
typedef class MSG_C2S_ASK_HEAL // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_ASK_HEAL;
typedef class MSG_C2S_ASK_PARTY // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOPCID; // Size=4 Offset=12
} *PMSG_C2S_ASK_PARTY;
typedef class MSG_C2S_ANS_PARTY // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwAskPCID; // Size=4 Offset=12
    unsigned char bAccept; // Size=1 Offset=16
} *PMSG_C2S_ANS_PARTY;
typedef class MSG_C2S_OUT_PARTY // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2S_OUT_PARTY;
typedef class MSG_C2S_RETURN2HERE // Size=18
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned short wTeleportIndex; // Size=2 Offset=16
} *PMSG_C2S_RETURN2HERE;
typedef class MSG_C2S_ACTIVE_PET // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwPetID; // Size=4 Offset=12
} *PMSG_C2S_ACTIVE_PET;
typedef class MSG_C2S_INACTIVE_PET // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2S_INACTIVE_PET;
typedef class MSG_C2S_PET_BUY // Size=18
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned short code; // Size=2 Offset=16
} *PMSG_C2S_PET_BUY;
typedef class MSG_C2S_PET_SELL // Size=20
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned long PetID; // Size=4 Offset=16
} *PMSG_C2S_PET_SELL;
typedef class MSG_C2S_FEED_PET // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long PetID; // Size=4 Offset=12
} *PMSG_C2S_FEED_PET;
typedef class MSG_C2S_USESCROLL // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byInvenIndex; // Size=1 Offset=12
    unsigned long dwItemID; // Size=4 Offset=13
} *PMSG_C2S_USESCROLL;
typedef class MSG_C2S_PUTIN_PET // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwPetID; // Size=4 Offset=12
} *PMSG_C2S_PUTIN_PET;
typedef class MSG_C2S_PUTOUT_PET // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwPetID; // Size=4 Offset=12
} *PMSG_C2S_PUTOUT_PET;
typedef class MSG_C2S_ASK_OPEN_STORAGE // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_ASK_OPEN_STORAGE;
typedef class MSG_C2S_ASK_DEPOSITE_MONEY // Size=20
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned long dwDepositeMoney; // Size=4 Offset=16
} *PMSG_C2S_ASK_DEPOSITE_MONEY;
typedef class MSG_C2S_ASK_WITHDRAW_MONEY // Size=20
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned long dwWithdrawMoney; // Size=4 Offset=16
} *PMSG_C2S_ASK_WITHDRAW_MONEY;
typedef class MSG_C2S_ASK_CLOSE_STORAGE // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_ASK_CLOSE_STORAGE;
typedef class MSG_C2S_REVIVE_PET // Size=20
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwItemID; // Size=4 Offset=12
    unsigned long dwPetID; // Size=4 Offset=16
} *PMSG_C2S_REVIVE_PET;
typedef class MSG_C2S_GESTURE // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byGestureType; // Size=1 Offset=12
} *PMSG_C2S_GESTURE;
typedef class MSG_C2S_SUBMAP_INFO // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_SUBMAP_INFO;
typedef class MSG_C2S_ENTER // Size=80
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    char keyword[64]; // Size=64 Offset=16
} *PMSG_C2S_ENTER;
typedef class MSG_C2S_CLAN // Size=61
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char requestType; // Size=1 Offset=12
    char szClanName[32]; // Size=32 Offset=13
    char szClanPasswd[16]; // Size=16 Offset=45
} *PMSG_C2S_CLAN;
typedef class MSG_C2S_JOIN_CLAN // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwAskPCID; // Size=4 Offset=12
} *PMSG_C2S_JOIN_CLAN;
typedef class MSG_C2S_ANS_CLAN // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bAccept; // Size=1 Offset=12
    unsigned long dwAskPCID; // Size=4 Offset=13
} *PMSG_C2S_ANS_CLAN;
typedef class MSG_C2S_BOLT_CLAN // Size=26
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bDismissal; // Size=1 Offset=12
    char szKnightName[13]; // Size=13 Offset=13
} *PMSG_C2S_BOLT_CLAN;
typedef class MSG_C2S_REQ_CLAN_INFO // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2S_REQ_CLAN_INFO;
typedef class MSG_C2S_PARTY_QUEST // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_PARTY_QUEST;
typedef class MSG_C2S_OBJECT_NPC // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_OBJECT_NPC;
typedef class MSG_C2S_LOTTO_PURCHASE // Size=25
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    int iLottoSellingCounter; // Size=4 Offset=12
    unsigned char arrLottoNum[5]; // Size=5 Offset=16
    unsigned long dwNPCID; // Size=4 Offset=21
} *PMSG_C2S_LOTTO_PURCHASE;
typedef class MSG_C2S_LOTTO_QUERY_PRIZE // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_LOTTO_QUERY_PRIZE;
typedef class MSG_C2S_LOTTO_QUERY_HISTORY // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_LOTTO_QUERY_HISTORY;
typedef class MSG_C2S_CHANGE_NATION // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char newNation; // Size=1 Offset=12
} *PMSG_C2S_CHANGE_NATION;
typedef class MSG_C2S_DERBY_INDEX_QUERY // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2S_DERBY_INDEX_QUERY;
typedef class MSG_C2S_DERBY_MONSTER_QUERY // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_DERBY_MONSTER_QUERY;
typedef class MSG_C2S_DERBY_RATIO_QUERY // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_DERBY_RATIO_QUERY;
typedef class MSG_C2S_DERBY_PURCHASE // Size=22
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short iDerbyIndex; // Size=2 Offset=12
    unsigned char iChosenNum[2]; // Size=2 Offset=14
    unsigned short iBetMoney; // Size=2 Offset=16
    unsigned long dwNPCID; // Size=4 Offset=18
} *PMSG_C2S_DERBY_PURCHASE;
typedef class MSG_C2S_DERBY_RESULT_QUERY // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2S_DERBY_RESULT_QUERY;
typedef class MSG_C2S_DERBY_HISTORY_QUERY // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned char byPage; // Size=1 Offset=16
} *PMSG_C2S_DERBY_HISTORY_QUERY;
typedef class MSG_C2S_ASK_APPRENTICE_IN // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwRequestedPCID; // Size=4 Offset=12
} *PMSG_C2S_ASK_APPRENTICE_IN;
typedef class MSG_C2S_ANS_APPRENTICE_IN // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwRequestPCID; // Size=4 Offset=12
    unsigned char bAccepted; // Size=1 Offset=16
} *PMSG_C2S_ANS_APPRENTICE_IN;
typedef class MSG_C2S_ASK_APPRENTICE_OUT // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2S_ASK_APPRENTICE_OUT;
typedef class MSG_C2S_RETRIEVE_POINT // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char strPoint; // Size=1 Offset=12
    unsigned char magicPoint; // Size=1 Offset=13
    unsigned char dexPoint; // Size=1 Offset=14
    unsigned char vitPoint; // Size=1 Offset=15
    unsigned char manaPoint; // Size=1 Offset=16
} *PMSG_C2S_RETRIEVE_POINT;
typedef class MSG_C2S_CAO_MITIGATION // Size=14
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wMinutes; // Size=2 Offset=12
} *PMSG_C2S_CAO_MITIGATION;
typedef class MSG_C2Z_REGISTER_MARK // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2Z_REGISTER_MARK;
typedef class MSG_C2S_PAYINFO // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2S_PAYINFO;
typedef class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > // Size=1
{
} *Pstd::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >;
typedef class std::reverse_bidirectional_iterator<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::iterator,std::basic_string<char,std::char_t78b2c464 // Size=0
{
} *Pstd::reverse_bidirectional_iterator<std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::iterator,std::basic_string<char,std::char_t78b2c464;
typedef struct std::not_equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > // Size=1
{
} *Pstd::not_equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >;
typedef struct std::greater<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > // Size=1
{
} *Pstd::greater<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >;
typedef struct std::unary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool> // Size=1
{
} *Pstd::unary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>;
typedef struct std::binary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool> // Size=1
{
} *Pstd::binary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>;
typedef struct std::iterator<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> // Size=1
{
} *Pstd::iterator<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>;
typedef struct EXCEL_ITEM_DATA1 // Size=52
{
    unsigned short Group; // Size=2 Offset=0
    unsigned short Index; // Size=2 Offset=2
    char ItemName[32]; // Size=32 Offset=4
    unsigned long StdPrice; // Size=4 Offset=36
    unsigned short Auth; // Size=2 Offset=40
    unsigned short Limit; // Size=2 Offset=42
    unsigned short Ability; // Size=2 Offset=44
    unsigned short MaxIceAttr; // Size=2 Offset=46
    unsigned short MaxFireAttr; // Size=2 Offset=48
    unsigned short MaxLightAttr; // Size=2 Offset=50
} *PEXCEL_ITEM_DATA1;
typedef struct EXCEL_ITEM_DATA2 // Size=48
{
    unsigned short Group; // Size=2 Offset=0
    unsigned short Index; // Size=2 Offset=2
    char ItemName[32]; // Size=32 Offset=4
    unsigned long StdPrice; // Size=4 Offset=36
    unsigned short Auth; // Size=2 Offset=40
    unsigned short Limit; // Size=2 Offset=42
    unsigned short Data1; // Size=2 Offset=44
    unsigned short Data2; // Size=2 Offset=46
} *PEXCEL_ITEM_DATA2;
typedef struct EXCEL_ITEM_DATA3 // Size=48
{
    unsigned short Group; // Size=2 Offset=0
    unsigned short Index; // Size=2 Offset=2
    char ItemName[32]; // Size=32 Offset=4
    unsigned long StdPrice; // Size=4 Offset=36
    unsigned short Auth; // Size=2 Offset=40
    unsigned short Limit; // Size=2 Offset=42
    unsigned short Data1; // Size=2 Offset=44
    unsigned short Data2; // Size=2 Offset=46
} *PEXCEL_ITEM_DATA3;
typedef struct EXCEL_ITEM_COMBINATION_TABLE // Size=32
{
    unsigned short wBaseRune1; // Size=2 Offset=0
    unsigned short wBaseRune2; // Size=2 Offset=2
    unsigned short wBaseRune3; // Size=2 Offset=4
    unsigned short wRune1; // Size=2 Offset=6
    unsigned short wRune2; // Size=2 Offset=8
    unsigned short wRune3; // Size=2 Offset=10
    unsigned short wItem1; // Size=2 Offset=12
    unsigned short wItem2; // Size=2 Offset=14
    unsigned short wItem3; // Size=2 Offset=16
    unsigned short wObjectItem; // Size=2 Offset=18
    unsigned short wSuccessRatio; // Size=2 Offset=20
    unsigned short wSuccessItem; // Size=2 Offset=22
    unsigned short wOptionType; // Size=2 Offset=24
    unsigned short wFailure; // Size=2 Offset=26
    unsigned short wReserved1; // Size=2 Offset=28
    unsigned short wReserved2; // Size=2 Offset=30
} *PEXCEL_ITEM_COMBINATION_TABLE;
typedef union _ITEM_SERIALKEY_ // Size=4
{
    unsigned long serialKey; // Size=4 Offset=0
    struct
    {
        unsigned long year: 4; // Size=4 Offset=0 BitOffset=0 BitCount=4
        unsigned long month: 4; // Size=4 Offset=0 BitOffset=4 BitCount=4
        unsigned long day: 5; // Size=4 Offset=0 BitOffset=8 BitCount=5
        unsigned long origin: 4; // Size=4 Offset=0 BitOffset=13 BitCount=4
        unsigned long count: 15; // Size=4 Offset=0 BitOffset=17 BitCount=15
    };
} ITEM_SERIALKEY_, *PITEM_SERIALKEY_;
typedef class CLargeRand // Size=2512
{
    unsigned long state[625]; // Size=2500 Offset=4
    unsigned long * next; // Size=4 Offset=2504
    int left; // Size=4 Offset=2508
} *PCLargeRand;
typedef class ostream // Size=88
{
    int x_floatused; // Size=4 Offset=4
} *Postream;
typedef class istream // Size=92
{
    int _fGline; // Size=4 Offset=4
    int x_gcount; // Size=4 Offset=8
} *Pistream;
typedef class istream_withassign // Size=92
{
} *Pistream_withassign;
typedef class ostream_withassign // Size=88
{
} *Postream_withassign;
typedef class iostream // Size=100
{
} *Piostream;
typedef class CSvrManage // Size=56
{
    class CGateServer * m_GateServer; // Size=4 Offset=0
    int m_iGateServerNum; // Size=4 Offset=4
    int m_bSocketActive; // Size=4 Offset=8
    class CStandbyServer * m_pStandbyServer[10]; // Size=40 Offset=12
    int m_iStandbyServerNum; // Size=4 Offset=52
} *PCSvrManage;
typedef class CStandbyServer // Size=8388736
{
    int m_iIndex; // Size=4 Offset=8388728
    int m_bLogin; // Size=4 Offset=8388732
} *PCStandbyServer;
typedef struct _KDHELP // Size=28
{
    unsigned long Thread; // Size=4 Offset=0
    unsigned long ThCallbackStack; // Size=4 Offset=4
    unsigned long NextCallback; // Size=4 Offset=8
    unsigned long FramePointer; // Size=4 Offset=12
    unsigned long KiCallUserMode; // Size=4 Offset=16
    unsigned long KeUserCallbackDispatcher; // Size=4 Offset=20
    unsigned long SystemRangeStart; // Size=4 Offset=24
} KDHELP, *PKDHELP;
typedef struct _IMAGEHLP_SYMBOL // Size=24
{
    unsigned long SizeOfStruct; // Size=4 Offset=0
    unsigned long Address; // Size=4 Offset=4
    unsigned long Size; // Size=4 Offset=8
    unsigned long Flags; // Size=4 Offset=12
    unsigned long MaxNameLength; // Size=4 Offset=16
    char Name[1]; // Size=1 Offset=20
} IMAGEHLP_SYMBOL, *PIMAGEHLP_SYMBOL;
typedef struct _FPO_DATA // Size=16
{
    unsigned long ulOffStart; // Size=4 Offset=0
    unsigned long cbProcSize; // Size=4 Offset=4
    unsigned long cdwLocals; // Size=4 Offset=8
    unsigned short cdwParams; // Size=2 Offset=12
    struct
    {
        unsigned short cbProlog: 8; // Size=2 Offset=14 BitOffset=0 BitCount=8
        unsigned short cbRegs: 3; // Size=2 Offset=14 BitOffset=8 BitCount=3
        unsigned short fHasSEH: 1; // Size=2 Offset=14 BitOffset=11 BitCount=1
        unsigned short fUseBP: 1; // Size=2 Offset=14 BitOffset=12 BitCount=1
        unsigned short reserved: 1; // Size=2 Offset=14 BitOffset=13 BitCount=1
        unsigned short cbFrame: 2; // Size=2 Offset=14 BitOffset=14 BitCount=2
    };
} FPO_DATA, *PFPO_DATA;
typedef class _InternalExceptionHandlerClass // Size=1
{
} InternalExceptionHandlerClass, *PInternalExceptionHandlerClass;
typedef struct _Warp_Postion_ // Size=8
{
    unsigned short wMapIndex; // Size=2 Offset=0
    unsigned long dwCellIndex; // Size=4 Offset=4
} Warp_Postion_, *PWarp_Postion_;
typedef struct _GAME_MANAGER_ // Size=29
{
    char szGMName[13]; // Size=13 Offset=0
    char IP[16]; // Size=16 Offset=13
} GAME_MANAGER_, *PGAME_MANAGER_;
typedef struct _DOOR_NPC_INFO_ // Size=4
{
    unsigned short wNPCType; // Size=2 Offset=0
    unsigned short wMapIndex; // Size=2 Offset=2
} DOOR_NPC_INFO_, *PDOOR_NPC_INFO_;
typedef struct _PC_DATA_TABLE_ // Size=28
{
    unsigned short Str_Point; // Size=2 Offset=0
    unsigned short Mag_Point; // Size=2 Offset=2
    unsigned short Dex_Point; // Size=2 Offset=4
    unsigned short Vit_Point; // Size=2 Offset=6
    unsigned short Mana_Point; // Size=2 Offset=8
    unsigned short BonusPoint; // Size=2 Offset=10
    unsigned short Attack_Point; // Size=2 Offset=12
    unsigned short Defense_Point; // Size=2 Offset=14
    unsigned short Magic_Point; // Size=2 Offset=16
    unsigned short HP_Point; // Size=2 Offset=18
    unsigned short MP_Point; // Size=2 Offset=20
    unsigned short Hit_Probability; // Size=2 Offset=22
    unsigned short Damage_ratio; // Size=2 Offset=24
    unsigned short Finish_ratio; // Size=2 Offset=26
} PC_DATA_TABLE_, *PPC_DATA_TABLE_;
typedef struct _NPC_SELL_ITEM_INFO_ // Size=1024
{
    unsigned short wNPCType; // Size=2 Offset=0
    int iItemCode[255]; // Size=1020 Offset=4
} NPC_SELL_ITEM_INFO_, *PNPC_SELL_ITEM_INFO_;
typedef struct WSAData // Size=400
{
    unsigned short wVersion; // Size=2 Offset=0
    unsigned short wHighVersion; // Size=2 Offset=2
    char szDescription[257]; // Size=257 Offset=4
    char szSystemStatus[129]; // Size=129 Offset=261
    unsigned short iMaxSockets; // Size=2 Offset=390
    unsigned short iMaxUdpDg; // Size=2 Offset=392
    char * lpVendorInfo; // Size=4 Offset=396
} *PWSAData;
typedef struct _SYSTEMTIME // Size=16
{
    unsigned short wYear; // Size=2 Offset=0
    unsigned short wMonth; // Size=2 Offset=2
    unsigned short wDayOfWeek; // Size=2 Offset=4
    unsigned short wDay; // Size=2 Offset=6
    unsigned short wHour; // Size=2 Offset=8
    unsigned short wMinute; // Size=2 Offset=10
    unsigned short wSecond; // Size=2 Offset=12
    unsigned short wMilliseconds; // Size=2 Offset=14
} SYSTEMTIME, *PSYSTEMTIME;
typedef class MSG_M2S_ERROR // Size=73
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned short wErrCode; // Size=2 Offset=7
    char szErrStr[64]; // Size=64 Offset=9
} *PMSG_M2S_ERROR;
typedef class MSG_M2S_APPRENTICE_QUIT // Size=11
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    unsigned long dwQuitPCID; // Size=4 Offset=7
} *PMSG_M2S_APPRENTICE_QUIT;
typedef class MSG_M2Z_CONFIRM_MARK // Size=12
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char byResultCode; // Size=1 Offset=7
    unsigned long dwMarkID; // Size=4 Offset=8
} *PMSG_M2Z_CONFIRM_MARK;
typedef class MSG_M2Z_CHANGE_MARK // Size=11
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned long dwMarkID; // Size=4 Offset=7
} *PMSG_M2Z_CHANGE_MARK;
typedef struct _MAPHEADER_ // Size=23
{
    unsigned short mapIndex; // Size=2 Offset=0
    char mapName[20]; // Size=20 Offset=2
    unsigned char warpCount; // Size=1 Offset=22
} MAPHEADER_, *PMAPHEADER_;
typedef struct _AttackParty_ // Size=8
{
    class CPC * pPC; // Size=4 Offset=0
    int iDamageSum; // Size=4 Offset=4
} AttackParty_, *PAttackParty_;
typedef struct _NPC_NATION_INFO_ // Size=8
{
    unsigned short wNPCType; // Size=2 Offset=0
    int iNation; // Size=4 Offset=4
} NPC_NATION_INFO_, *PNPC_NATION_INFO_;
typedef struct _KWAN_POS // Size=6
{
    unsigned short wMapIndex; // Size=2 Offset=0
    unsigned short wX; // Size=2 Offset=2
    unsigned short wY; // Size=2 Offset=4
} KWAN_POS, *PKWAN_POS;
typedef struct EXCEL_PET_DATA // Size=48
{
    unsigned short Group; // Size=2 Offset=0
    unsigned short Index; // Size=2 Offset=2
    char ItemName[32]; // Size=32 Offset=4
    unsigned long StdPrice; // Size=4 Offset=36
    unsigned short Auth; // Size=2 Offset=40
    unsigned short Limit; // Size=2 Offset=42
    unsigned short Data1; // Size=2 Offset=44
    unsigned short Data2; // Size=2 Offset=46
} *PEXCEL_PET_DATA;
typedef struct _CHK_HACK_ // Size=8
{
    long tvTick; // Size=4 Offset=0
    int iCounter; // Size=4 Offset=4
} CHK_HACK_, *PCHK_HACK_;
typedef class std::bad_cast // Size=12
{
} *Pstd::bad_cast;
typedef class std::bad_typeid // Size=12
{
} *Pstd::bad_typeid;
typedef class std::__non_rtti_object // Size=12
{
} *Pstd::__non_rtti_object;
typedef class std::_Timevec // Size=4
{
    void * _Ptr; // Size=4 Offset=0
} *Pstd::_Timevec;
typedef class std::_Locinfo // Size=64
{
    class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Days; // Size=16 Offset=0
    class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Months; // Size=16 Offset=16
    class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Oname; // Size=16 Offset=32
    class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Nname; // Size=16 Offset=48
} *Pstd::_Locinfo;
typedef struct _Collvec // Size=8
{
    unsigned long _Hand; // Size=4 Offset=0
    unsigned int _Page; // Size=4 Offset=4
} Collvec, *PCollvec;
typedef struct _Ctypevec // Size=16
{
    unsigned long _Hand; // Size=4 Offset=0
    unsigned int _Page; // Size=4 Offset=4
    short * _Table; // Size=4 Offset=8
    int _Delfl; // Size=4 Offset=12
} Ctypevec, *PCtypevec;
typedef struct _Cvtvec // Size=8
{
    unsigned long _Hand; // Size=4 Offset=0
    unsigned int _Page; // Size=4 Offset=4
} Cvtvec, *PCvtvec;
typedef struct lconv // Size=48
{
    char * decimal_point; // Size=4 Offset=0
    char * thousands_sep; // Size=4 Offset=4
    char * grouping; // Size=4 Offset=8
    char * int_curr_symbol; // Size=4 Offset=12
    char * currency_symbol; // Size=4 Offset=16
    char * mon_decimal_point; // Size=4 Offset=20
    char * mon_thousands_sep; // Size=4 Offset=24
    char * mon_grouping; // Size=4 Offset=28
    char * positive_sign; // Size=4 Offset=32
    char * negative_sign; // Size=4 Offset=36
    char int_frac_digits; // Size=1 Offset=40
    char frac_digits; // Size=1 Offset=41
    char p_cs_precedes; // Size=1 Offset=42
    char p_sep_by_space; // Size=1 Offset=43
    char n_cs_precedes; // Size=1 Offset=44
    char n_sep_by_space; // Size=1 Offset=45
    char p_sign_posn; // Size=1 Offset=46
    char n_sign_posn; // Size=1 Offset=47
} *Plconv;
typedef class std::locale // Size=4
{
    class std::locale::_Locimp * _Ptr; // Size=4 Offset=0
} *Pstd::locale;
typedef class std::locale::facet // Size=8
{
    unsigned int _Refs; // Size=4 Offset=4
} *Pstd::locale::facet;
typedef class std::locale::id // Size=4
{
    union
    {
        unsigned int _Id; // Size=4 Offset=0
        int _Id_cnt; // Size=4 Offset=0
    };
} *Pstd::locale::id;
typedef class std::locale::_Locimp // Size=40
{
    union
    {
        class std::locale::_Locimp * _Clocptr; // Size=4 Offset=0
        class std::locale::_Locimp * _Global; // Size=4 Offset=0
    };
    class std::locale::facet * * _Fv; // Size=4 Offset=8
    unsigned int _Nfv; // Size=4 Offset=12
    int _Cat; // Size=4 Offset=16
    unsigned char _Xpar; // Size=1 Offset=20
    class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Name; // Size=16 Offset=24
} *Pstd::locale::_Locimp;
typedef class std::codecvt_base // Size=8
{
} *Pstd::codecvt_base;
typedef struct std::ctype_base // Size=8
{
} *Pstd::ctype_base;
typedef class std::ios_base::failure // Size=28
{
} *Pstd::ios_base::failure;
typedef class std::ios_base::Init // Size=1
{
    int _Init_cnt; // Size=4 Offset=0
} *Pstd::ios_base::Init;
typedef class std::basic_ostream<char,std::char_traits<char> > // Size=56
{
} *Pstd::basic_ostream<char,std::char_traits<char> >;
typedef class std::basic_ios<char,std::char_traits<char> > // Size=52
{
    class std::basic_streambuf<char,std::char_traits<char> > * _Sb; // Size=4 Offset=40
    class std::basic_ostream<char,std::char_traits<char> > * _Tiestr; // Size=4 Offset=44
    char _Fillch; // Size=1 Offset=48
} *Pstd::basic_ios<char,std::char_traits<char> >;
typedef class std::basic_streambuf<char,std::char_traits<char> > // Size=56
{
    char * _Gbeg; // Size=4 Offset=4
    char * _Pbeg; // Size=4 Offset=8
    char * * _IGbeg; // Size=4 Offset=12
    char * * _IPbeg; // Size=4 Offset=16
    char * _Gnext; // Size=4 Offset=20
    char * _Pnext; // Size=4 Offset=24
    char * * _IGnext; // Size=4 Offset=28
    char * * _IPnext; // Size=4 Offset=32
    int _Gcnt; // Size=4 Offset=36
    int _Pcnt; // Size=4 Offset=40
    int * _IGcnt; // Size=4 Offset=44
    int * _IPcnt; // Size=4 Offset=48
    class std::locale _Loc; // Size=4 Offset=52
} *Pstd::basic_streambuf<char,std::char_traits<char> >;
typedef class std::ostreambuf_iterator<char,std::char_traits<char> > // Size=0
{
} *Pstd::ostreambuf_iterator<char,std::char_traits<char> >;
typedef class std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > // Size=0
{
} *Pstd::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >;
typedef class std::basic_ostream<unsigned short,std::char_traits<unsigned short> > // Size=56
{
} *Pstd::basic_ostream<unsigned short,std::char_traits<unsigned short> >;
typedef class std::basic_ios<unsigned short,std::char_traits<unsigned short> > // Size=52
{
    class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > * _Sb; // Size=4 Offset=40
    class std::basic_ostream<unsigned short,std::char_traits<unsigned short> > * _Tiestr; // Size=4 Offset=44
    unsigned short _Fillch; // Size=2 Offset=48
} *Pstd::basic_ios<unsigned short,std::char_traits<unsigned short> >;
typedef class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > // Size=56
{
    unsigned short * _Gbeg; // Size=4 Offset=4
    unsigned short * _Pbeg; // Size=4 Offset=8
    unsigned short * * _IGbeg; // Size=4 Offset=12
    unsigned short * * _IPbeg; // Size=4 Offset=16
    unsigned short * _Gnext; // Size=4 Offset=20
    unsigned short * _Pnext; // Size=4 Offset=24
    unsigned short * * _IGnext; // Size=4 Offset=28
    unsigned short * * _IPnext; // Size=4 Offset=32
    int _Gcnt; // Size=4 Offset=36
    int _Pcnt; // Size=4 Offset=40
    int * _IGcnt; // Size=4 Offset=44
    int * _IPcnt; // Size=4 Offset=48
    class std::locale _Loc; // Size=4 Offset=52
} *Pstd::basic_streambuf<unsigned short,std::char_traits<unsigned short> >;
typedef class std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > // Size=0
{
} *Pstd::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> >;
typedef class std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > // Size=0
{
} *Pstd::num_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >;
typedef class std::basic_istream<char,std::char_traits<char> > // Size=60
{
    int _Chcount; // Size=4 Offset=4
} *Pstd::basic_istream<char,std::char_traits<char> >;
typedef class std::istreambuf_iterator<char,std::char_traits<char> > // Size=0
{
} *Pstd::istreambuf_iterator<char,std::char_traits<char> >;
typedef class std::num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > > // Size=0
{
} *Pstd::num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >;
typedef class std::basic_istream<unsigned short,std::char_traits<unsigned short> > // Size=60
{
    int _Chcount; // Size=4 Offset=4
} *Pstd::basic_istream<unsigned short,std::char_traits<unsigned short> >;
typedef class std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > // Size=0
{
} *Pstd::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> >;
typedef class std::num_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > // Size=0
{
} *Pstd::num_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >;
typedef class MSG_G2S_SVR_LOGIN // Size=11
{
    class MSG_S2G_HEADER MsgHeader; // Size=10 Offset=0
    unsigned char byThisServerID; // Size=1 Offset=10
} *PMSG_G2S_SVR_LOGIN;
typedef class MSG_C2S_AGIT_INFO // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_AGIT_INFO;
typedef class MSG_C2S_AUCTION_INFO // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_AUCTION_INFO;
typedef class MSG_C2S_AGIT_ENTER // Size=19
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned char bySelfAgit; // Size=1 Offset=16
    unsigned short wAgitID; // Size=2 Offset=17
} *PMSG_C2S_AGIT_ENTER;
typedef class MSG_C2S_AGIT_PUTUP_AUCTION // Size=28
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned long dwAuctionTerm; // Size=4 Offset=16
    unsigned long dwMaximumPrice; // Size=4 Offset=20
    unsigned long dwMinimumPrice; // Size=4 Offset=24
} *PMSG_C2S_AGIT_PUTUP_AUCTION;
typedef class MSG_C2S_AGIT_BIDON // Size=22
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned short wAgitID; // Size=2 Offset=16
    unsigned long dwBidPrice; // Size=4 Offset=18
} *PMSG_C2S_AGIT_BIDON;
typedef class MSG_C2S_AGIT_PAY_EXPENSE // Size=12
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
} *PMSG_C2S_AGIT_PAY_EXPENSE;
typedef class MSG_C2S_AGIT_CHANGE_NAME // Size=44
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    char szAgitName[32]; // Size=32 Offset=12
} *PMSG_C2S_AGIT_CHANGE_NAME;
typedef class MSG_C2S_AGIT_REPAY_MONEY // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_AGIT_REPAY_MONEY;
typedef class MSG_C2S_AGIT_OBTAIN_SALEMONEY // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_AGIT_OBTAIN_SALEMONEY;
typedef class MSG_C2S_TYR_ENTRY // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned char byUnitSelected; // Size=1 Offset=16
} *PMSG_C2S_TYR_ENTRY;
typedef class MSG_C2S_TYR_INFO // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned char byUnitIdx; // Size=1 Offset=16
} *PMSG_C2S_TYR_INFO;
typedef class MSG_C2S_TYR_JOIN // Size=16
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
} *PMSG_C2S_TYR_JOIN;
typedef class std::fpos // Size=0
{
} *Pstd::fpos;
typedef class std::_Tidyfac // Size=0
{
} *Pstd::_Tidyfac;
typedef class std::ctype // Size=0
{
} *Pstd::ctype;
typedef class std::_Tidyfac<std::ctype<char> > // Size=1
{
    class std::ctype<char> * _Facsav; // Size=4 Offset=0
} *Pstd::_Tidyfac<std::ctype<char> >;
typedef class std::_Tidyfac<std::ctype<unsigned short> > // Size=1
{
    class std::ctype<unsigned short> * _Facsav; // Size=4 Offset=0
} *Pstd::_Tidyfac<std::ctype<unsigned short> >;
typedef struct HBRUSH__ // Size=4
{
    int unused; // Size=4 Offset=0
} *PHBRUSH__;
typedef struct tagRECT // Size=16
{
    long left; // Size=4 Offset=0
    long top; // Size=4 Offset=4
    long right; // Size=4 Offset=8
    long bottom; // Size=4 Offset=12
} *PtagRECT;
typedef union _LARGE_INTEGER // Size=8
{
    struct
    {
        unsigned long LowPart; // Size=4 Offset=0
        long HighPart; // Size=4 Offset=4
    };
    struct _LARGE_INTEGER::___unnamed43 u; // Size=8 Offset=0
    __int64 QuadPart; // Size=8 Offset=0
} LARGE_INTEGER, *PLARGE_INTEGER;
typedef union _ULARGE_INTEGER // Size=8
{
    struct
    {
        unsigned long LowPart; // Size=4 Offset=0
        unsigned long HighPart; // Size=4 Offset=4
    };
    struct _ULARGE_INTEGER::___unnamed46 u; // Size=8 Offset=0
    unsigned __int64 QuadPart; // Size=8 Offset=0
} ULARGE_INTEGER, *PULARGE_INTEGER;
typedef struct tagCAH // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    union _LARGE_INTEGER * pElems; // Size=4 Offset=4
} *PtagCAH;
typedef struct tagCAUH // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    union _ULARGE_INTEGER * pElems; // Size=4 Offset=4
} *PtagCAUH;
typedef struct tagCACY // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    union tagCY * pElems; // Size=4 Offset=4
} *PtagCACY;
typedef struct tagCAFILETIME // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    struct _FILETIME * pElems; // Size=4 Offset=4
} *PtagCAFILETIME;
typedef struct tagCACLSID // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    struct _GUID * pElems; // Size=4 Offset=4
} *PtagCACLSID;
typedef struct tagCACLIPDATA // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    struct tagCLIPDATA * pElems; // Size=4 Offset=4
} *PtagCACLIPDATA;
typedef struct tagCABSTRBLOB // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    struct tagBSTRBLOB * pElems; // Size=4 Offset=4
} *PtagCABSTRBLOB;
typedef struct tagCAPROPVARIANT // Size=8
{
    unsigned long cElems; // Size=4 Offset=0
    struct tagPROPVARIANT * pElems; // Size=4 Offset=4
} *PtagCAPROPVARIANT;
typedef struct in_addr // Size=4
{
    union in_addr::___unnamed94 S_un; // Size=4 Offset=0
} *Pin_addr;
typedef struct _RSVP_FILTERSPEC_V4 // Size=8
{
    union _IN_ADDR_IPV4 Address; // Size=4 Offset=0
    unsigned short Unused; // Size=2 Offset=4
    unsigned short Port; // Size=2 Offset=6
} RSVP_FILTERSPEC_V4, *PRSVP_FILTERSPEC_V4;
typedef struct _RSVP_FILTERSPEC_V6 // Size=20
{
    struct _IN_ADDR_IPV6 Address; // Size=16 Offset=0
    unsigned short UnUsed; // Size=2 Offset=16
    unsigned short Port; // Size=2 Offset=18
} RSVP_FILTERSPEC_V6, *PRSVP_FILTERSPEC_V6;
typedef struct _RSVP_FILTERSPEC_V6_FLOW // Size=20
{
    struct _IN_ADDR_IPV6 Address; // Size=16 Offset=0
    unsigned char UnUsed; // Size=1 Offset=16
    unsigned char FlowLabel[3]; // Size=3 Offset=17
} RSVP_FILTERSPEC_V6_FLOW, *PRSVP_FILTERSPEC_V6_FLOW;
typedef struct _RSVP_FILTERSPEC_V4_GPI // Size=8
{
    union _IN_ADDR_IPV4 Address; // Size=4 Offset=0
    unsigned long GeneralPortId; // Size=4 Offset=4
} RSVP_FILTERSPEC_V4_GPI, *PRSVP_FILTERSPEC_V4_GPI;
typedef struct _RSVP_FILTERSPEC_V6_GPI // Size=20
{
    struct _IN_ADDR_IPV6 Address; // Size=16 Offset=0
    unsigned long GeneralPortId; // Size=4 Offset=16
} RSVP_FILTERSPEC_V6_GPI, *PRSVP_FILTERSPEC_V6_GPI;
typedef struct _SOCKET_ADDRESS // Size=8
{
    struct sockaddr * lpSockaddr; // Size=4 Offset=0
    int iSockaddrLength; // Size=4 Offset=4
} SOCKET_ADDRESS, *PSOCKET_ADDRESS;
typedef struct _PC_QUEST_INFO_ // Size=28
{
    int QuestIndex; // Size=4 Offset=0
    struct _PC_QUEST_INFO_::_PC_QUEST_DATA_ QuestData[7]; // Size=21 Offset=4
} PC_QUEST_INFO_, *PPC_QUEST_INFO_;
typedef struct _SAVE_QUEST_INFO_ // Size=12
{
    int QuestIndex; // Size=4 Offset=0
    struct _SAVE_QUEST_INFO_::_SAVE_QUEST_DATA_ QuestData[7]; // Size=7 Offset=4
} SAVE_QUEST_INFO_, *PSAVE_QUEST_INFO_;
typedef struct _PET_INFO_ // Size=20
{
    struct _PET_ID_ PetID; // Size=8 Offset=0
    unsigned long serialKey; // Size=4 Offset=8
    struct
    {
        unsigned long Level: 8; // Size=4 Offset=12 BitOffset=0 BitCount=8
        unsigned long Exp: 14; // Size=4 Offset=12 BitOffset=8 BitCount=14
        unsigned long HP: 6; // Size=4 Offset=12 BitOffset=22 BitCount=6
        unsigned long FireAttk: 1; // Size=4 Offset=12 BitOffset=28 BitCount=1
        unsigned long FireDef: 1; // Size=4 Offset=12 BitOffset=29 BitCount=1
        unsigned long IceAttk: 1; // Size=4 Offset=12 BitOffset=30 BitCount=1
        unsigned long IceDef: 1; // Size=4 Offset=12 BitOffset=31 BitCount=1
    };
    struct
    {
        unsigned long LightAttk: 1; // Size=4 Offset=16 BitOffset=0 BitCount=1
        unsigned long LightDef: 1; // Size=4 Offset=16 BitOffset=1 BitCount=1
        unsigned long AttkRate: 1; // Size=4 Offset=16 BitOffset=2 BitCount=1
        unsigned long DefRate: 1; // Size=4 Offset=16 BitOffset=3 BitCount=1
        unsigned long MagicAttkRate: 1; // Size=4 Offset=16 BitOffset=4 BitCount=1
        unsigned long DownDropRate: 1; // Size=4 Offset=16 BitOffset=5 BitCount=1
        unsigned long UpExp: 1; // Size=4 Offset=16 BitOffset=6 BitCount=1
        unsigned long Food: 14; // Size=4 Offset=16 BitOffset=7 BitCount=14
        unsigned long petIndex: 8; // Size=4 Offset=16 BitOffset=21 BitCount=8
        unsigned long Confirm: 1; // Size=4 Offset=16 BitOffset=29 BitCount=1
        unsigned long bAlive: 1; // Size=4 Offset=16 BitOffset=30 BitCount=1
        unsigned long bCritiRateInc: 1; // Size=4 Offset=16 BitOffset=31 BitCount=1
    };
} PET_INFO_, *PPET_INFO_;
typedef struct _LASTINGSKILL_MANAGEARRARY_ // Size=48
{
    struct _LASTINGSKILL_INFO_ LastingSkillInfo[4]; // Size=48 Offset=0
} LASTINGSKILL_MANAGEARRARY_, *PLASTINGSKILL_MANAGEARRARY_;
typedef struct _RTL_CRITICAL_SECTION // Size=24
{
    struct _RTL_CRITICAL_SECTION_DEBUG * DebugInfo; // Size=4 Offset=0
    long LockCount; // Size=4 Offset=4
    long RecursionCount; // Size=4 Offset=8
    void * OwningThread; // Size=4 Offset=12
    void * LockSemaphore; // Size=4 Offset=16
    unsigned long SpinCount; // Size=4 Offset=20
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;
typedef struct _PC_STAT_UPDATE_ // Size=46
{
    unsigned short wPoint; // Size=2 Offset=0
    unsigned short wStr; // Size=2 Offset=2
    unsigned short wMagic; // Size=2 Offset=4
    unsigned short wDex; // Size=2 Offset=6
    unsigned short wVit; // Size=2 Offset=8
    unsigned short wMana; // Size=2 Offset=10
    unsigned short wHPCapacity; // Size=2 Offset=12
    unsigned short wMPCapacity; // Size=2 Offset=14
    unsigned short wHP; // Size=2 Offset=16
    unsigned short wMP; // Size=2 Offset=18
    struct _PC_2STAT_ PC2ndStat; // Size=26 Offset=20
} PC_STAT_UPDATE_, *PPC_STAT_UPDATE_;
typedef struct _PET_STAT_ // Size=16
{
    struct _PET_ID_ PetID; // Size=8 Offset=0
    unsigned char Level; // Size=1 Offset=8
    unsigned short Exp; // Size=2 Offset=10
    unsigned short Food; // Size=2 Offset=12
} PET_STAT_, *PPET_STAT_;
typedef class MSG_S2C_NPC_APPEAR // Size=52
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wNPCType; // Size=2 Offset=12
    unsigned long dwNPCID; // Size=4 Offset=14
    unsigned long dwNPCHp; // Size=4 Offset=18
    unsigned long dwNPCMp; // Size=4 Offset=22
    unsigned long dwCellIndex; // Size=4 Offset=26
    int iDirection; // Size=4 Offset=30
    unsigned short wNPCLevel; // Size=2 Offset=34
    struct _SKILL_CAST_ CastSkillList[4]; // Size=12 Offset=36
    int bIsRegen; // Size=4 Offset=48
} *PMSG_S2C_NPC_APPEAR;
typedef class MSG_S2C_SEE_NPC_SKILLATTACK // Size=251
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    unsigned long dwNPCCell; // Size=4 Offset=16
    unsigned long dwBaseCell; // Size=4 Offset=20
    unsigned char byAttackType; // Size=1 Offset=24
    unsigned char targetCnt; // Size=1 Offset=25
    struct _NPC_SKILL_DAMAGEINFO_ targetInfo[25]; // Size=225 Offset=26
} *PMSG_S2C_SEE_NPC_SKILLATTACK;
typedef class MSG_S2C_LEARN_SKILL // Size=23
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char invenIdx; // Size=1 Offset=12
    struct _ITEM_ID_ ScrollID; // Size=8 Offset=13
    unsigned char skillCode; // Size=1 Offset=21
    unsigned char skillLevel; // Size=1 Offset=22
} *PMSG_S2C_LEARN_SKILL;
typedef class MSG_S2C_DONE_SKILL // Size=278
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bySkillIndex; // Size=1 Offset=12
    unsigned char bySkillLevel; // Size=1 Offset=13
    unsigned char byTargetType; // Size=1 Offset=14
    unsigned long dwCurCell; // Size=4 Offset=15
    unsigned long dwBaseCell; // Size=4 Offset=19
    unsigned short wHP; // Size=2 Offset=23
    unsigned short wMP; // Size=2 Offset=25
    unsigned char targetCnt; // Size=1 Offset=27
    struct _SKILL_DAMAGEINFO_ targetInfo[25]; // Size=250 Offset=28
} *PMSG_S2C_DONE_SKILL;
typedef class MSG_S2C_SEE_SKILL // Size=274
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bySkillIndex; // Size=1 Offset=12
    unsigned char bySkillLevel; // Size=1 Offset=13
    unsigned long dwOPCID; // Size=4 Offset=14
    unsigned long dwBaseCell; // Size=4 Offset=18
    unsigned char byTargetType; // Size=1 Offset=22
    unsigned char targetCnt; // Size=1 Offset=23
    struct _SKILL_DAMAGEINFO_ targetInfo[25]; // Size=250 Offset=24
} *PMSG_S2C_SEE_SKILL;
typedef class MSG_S2C_ITEM_DISAPPEAR // Size=24
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned long dwCellIndex; // Size=4 Offset=20
} *PMSG_S2C_ITEM_DISAPPEAR;
typedef class MSG_S2C_DROP_ITEM // Size=25
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned char result; // Size=1 Offset=20
    unsigned long dwDropCell; // Size=4 Offset=21
} *PMSG_S2C_DROP_ITEM;
typedef class MSG_S2C_MOVE_ITEM // Size=30
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char index1; // Size=1 Offset=12
    struct _ITEM_ID_ ItemID1; // Size=8 Offset=13
    unsigned char index2; // Size=1 Offset=21
    struct _ITEM_ID_ ItemID2; // Size=8 Offset=22
} *PMSG_S2C_MOVE_ITEM;
typedef class MSG_S2C_SEE_WEAR // Size=20
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOPCID; // Size=4 Offset=12
    struct _ITEM_APPEAR_ ItemAppear; // Size=4 Offset=16
} *PMSG_S2C_SEE_WEAR;
typedef class MSG_S2C_SELL_ITEM // Size=25
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char errCode; // Size=1 Offset=12
    unsigned long dwMoney; // Size=4 Offset=13
    struct _ITEM_ID_ ItemID; // Size=8 Offset=17
} *PMSG_S2C_SELL_ITEM;
typedef class MSG_S2C_GIVE_ITEM // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned char byResult; // Size=1 Offset=20
} *PMSG_S2C_GIVE_ITEM;
typedef class MSG_S2C_PUTOUT_ITEM // Size=28
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwMoney; // Size=4 Offset=12
    unsigned short wHPotion; // Size=2 Offset=16
    unsigned short wMPotion; // Size=2 Offset=18
    struct _ITEM_ID_ ItemID; // Size=8 Offset=20
} *PMSG_S2C_PUTOUT_ITEM;
typedef class MSG_S2C_SET_PC2STAT // Size=39
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _PC_2STAT_ PC2ndStat; // Size=26 Offset=12
    unsigned char byStatCode; // Size=1 Offset=38
} *PMSG_S2C_SET_PC2STAT;
typedef class MSG_C2S_QUEST_INFO // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned char invenIndex; // Size=1 Offset=20
} *PMSG_C2S_QUEST_INFO;
typedef class MSG_C2S_QUEST_START // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned char invenIndex; // Size=1 Offset=20
} *PMSG_C2S_QUEST_START;
typedef class MSG_S2C_QUEST_START // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned char errCode; // Size=1 Offset=20
} *PMSG_S2C_QUEST_START;
typedef class MSG_S2C_PARTY_IN // Size=40
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _PARTY_MEMBER_ Member; // Size=28 Offset=12
} *PMSG_S2C_PARTY_IN;
typedef class MSG_S2C_PARTY_LIST // Size=124
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _PARTY_MEMBER_ Member[4]; // Size=112 Offset=12
} *PMSG_S2C_PARTY_LIST;
typedef class MSG_S2C_ACTIVE_PET // Size=47
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwActivePetID; // Size=4 Offset=12
    unsigned long dwInactPetID; // Size=4 Offset=16
    unsigned char petIndex; // Size=1 Offset=20
    struct _PC_2STAT_ PC2ndStat; // Size=26 Offset=21
} *PMSG_S2C_ACTIVE_PET;
typedef class MSG_S2C_INACTIVE_PET // Size=43
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwInactPetID; // Size=4 Offset=12
    unsigned char petIndex; // Size=1 Offset=16
    struct _PC_2STAT_ PC2ndStat; // Size=26 Offset=17
} *PMSG_S2C_INACTIVE_PET;
typedef class MSG_S2C_SEE_PET // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwOPCID; // Size=4 Offset=12
    struct _PET_APPEAR_ PetAppear; // Size=4 Offset=16
    unsigned char petStat; // Size=1 Offset=20
} *PMSG_S2C_SEE_PET;
typedef class MSG_S2C_PET_DIE // Size=42
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwPetID; // Size=4 Offset=12
    struct _PC_2STAT_ PC2ndStat; // Size=26 Offset=16
} *PMSG_S2C_PET_DIE;
typedef class MSG_S2C_FEED_PET // Size=28
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned char result; // Size=1 Offset=20
    unsigned long PetID; // Size=4 Offset=21
    unsigned char petIndex; // Size=1 Offset=25
    unsigned short wQuantity; // Size=2 Offset=26
} *PMSG_S2C_FEED_PET;
typedef class MSG_S2C_OPTION // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _GAME_OPTION_ option; // Size=1 Offset=12
} *PMSG_S2C_OPTION;
typedef class MSG_S2C_DERBY_MONSTER_QUERY // Size=64
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short iDerbyIndex; // Size=2 Offset=12
    struct _DERBY_MONSTER_INFO_ arrDerbyMonsterInfo[5]; // Size=50 Offset=14
} *PMSG_S2C_DERBY_MONSTER_QUERY;
typedef class MSG_S2C_DERBY_RESULT_QUERY // Size=30
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short iDerbyIndex; // Size=2 Offset=12
    struct _DERBY_HISTORY_INFO_ dhiResult; // Size=16 Offset=14
} *PMSG_S2C_DERBY_RESULT_QUERY;
typedef class MSG_S2C_DERBY_HISTORY_QUERY // Size=210
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short iDerbyIndex; // Size=2 Offset=12
    unsigned short iLatestIndex; // Size=2 Offset=14
    unsigned char byPage; // Size=1 Offset=16
    unsigned char byNumHistory; // Size=1 Offset=17
    struct _DERBY_HISTORY_INFO_ dhiHistory[12]; // Size=192 Offset=18
} *PMSG_S2C_DERBY_HISTORY_QUERY;
typedef class MSG_S2C_ANS_APPRENTICE_IN // Size=41
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char bResult; // Size=1 Offset=12
    struct _PARTY_MEMBER_ stApprenticeInfo; // Size=28 Offset=13
} *PMSG_S2C_ANS_APPRENTICE_IN;
typedef class MSG_S2M_APPRENTICE_CREATE // Size=46
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    struct _PARTNER_INFO_ stMemberInfo[2]; // Size=40 Offset=2
    unsigned long dwApprenticeID; // Size=4 Offset=42
} *PMSG_S2M_APPRENTICE_CREATE;
typedef class MSG_S2M_APPRENTICE_UPDATE // Size=38
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwApprenticeID; // Size=4 Offset=2
    struct _APPRENTICE_MEMBER_ stMemberInfo; // Size=32 Offset=6
} *PMSG_S2M_APPRENTICE_UPDATE;
typedef class MSG_S2C_ANS_INVEN2STORAGE // Size=27
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrCode; // Size=1 Offset=12
    struct _ITEM_ID_ itemID; // Size=8 Offset=13
    unsigned char byInvenIndex; // Size=1 Offset=21
    unsigned char byStorageIndex; // Size=1 Offset=22
    unsigned long dwMoney; // Size=4 Offset=23
} *PMSG_S2C_ANS_INVEN2STORAGE;
typedef class MSG_S2C_ANS_STORAGE2INVEN // Size=23
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrCode; // Size=1 Offset=12
    struct _ITEM_ID_ itemID; // Size=8 Offset=13
    unsigned char byStorageIndex; // Size=1 Offset=21
    unsigned char byInvenIndex; // Size=1 Offset=22
} *PMSG_S2C_ANS_STORAGE2INVEN;
typedef class MSG_S2C_ANS_MOVE_ITEMINSTORAGE // Size=31
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrCode; // Size=1 Offset=12
    struct _ITEM_ID_ itemID; // Size=8 Offset=13
    unsigned char bySrcIndex; // Size=1 Offset=21
    unsigned char byTargetIndex; // Size=1 Offset=22
    struct _ITEM_ID_ SwapitemID; // Size=8 Offset=23
} *PMSG_S2C_ANS_MOVE_ITEMINSTORAGE;
typedef class MSG_S2C_CLAN // Size=22
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char requestType; // Size=1 Offset=12
    unsigned char result; // Size=1 Offset=13
    unsigned long ClanID; // Size=4 Offset=14
    struct _SOCIALINFO_ mySocialInfo; // Size=4 Offset=18
} *PMSG_S2C_CLAN;
typedef class MSG_S2C_JOIN_CLAN // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char resultCode; // Size=1 Offset=12
    struct _SOCIALINFO_ mySocialInfo; // Size=4 Offset=13
} *PMSG_S2C_JOIN_CLAN;
typedef class MSG_S2C_BOLT_CLAN // Size=17
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char resultCode; // Size=1 Offset=12
    struct _SOCIALINFO_ mySocialInfo; // Size=4 Offset=13
} *PMSG_S2C_BOLT_CLAN;
typedef class MSG_S2C_UPDATE_CLAN // Size=423
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    char szClanName[32]; // Size=32 Offset=12
    unsigned long dwClanID; // Size=4 Offset=44
    unsigned long dwMarkID; // Size=4 Offset=48
    unsigned long dwStorageID; // Size=4 Offset=52
    unsigned char Clan_Rank; // Size=1 Offset=56
    unsigned short wAgit_ID; // Size=2 Offset=57
    struct _KNIGHT_INFO_ arrKnightInfo[13]; // Size=364 Offset=59
} *PMSG_S2C_UPDATE_CLAN;
typedef class MSG_S2C_UPDATE_KNIGHT // Size=41
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byCode; // Size=1 Offset=12
    struct _KNIGHT_INFO_ KnightInfo; // Size=28 Offset=13
} *PMSG_S2C_UPDATE_KNIGHT;
typedef class MSG_S2C_CLAN_FAIL // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrorCode; // Size=1 Offset=12
    unsigned long dwClanID; // Size=4 Offset=13
    struct _SOCIALINFO_ mySocialInfo; // Size=4 Offset=17
} *PMSG_S2C_CLAN_FAIL;
typedef class MSG_S2C_CHANGE_NATION // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrorCode; // Size=1 Offset=12
    struct _SOCIALINFO_ mySocialInfo; // Size=4 Offset=13
    unsigned long dwLore; // Size=4 Offset=17
} *PMSG_S2C_CHANGE_NATION;
typedef class MSG_M2S_CLAN_INFO // Size=418
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    char szClanName[32]; // Size=32 Offset=7
    unsigned long dwClanID; // Size=4 Offset=39
    unsigned long dwMarkID; // Size=4 Offset=43
    unsigned long dwStorageID; // Size=4 Offset=47
    unsigned char Clan_Rank; // Size=1 Offset=51
    unsigned short wAgit_ID; // Size=2 Offset=52
    struct _KNIGHT_INFO_ arrKnightInfo[13]; // Size=364 Offset=54
} *PMSG_M2S_CLAN_INFO;
typedef class MSG_M2S_KNIGHT_INFO // Size=36
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned char byCode; // Size=1 Offset=7
    struct _KNIGHT_INFO_ KnightInfo; // Size=28 Offset=8
} *PMSG_M2S_KNIGHT_INFO;
typedef class MSG_C2S_ASK_WARP_Z2B // Size=20
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _BATTLE_WARP_DATA_ BtWarpData; // Size=8 Offset=12
} *PMSG_C2S_ASK_WARP_Z2B;
typedef class MSG_S2C_AGIT_INFO // Size=1663
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byAgitCount; // Size=1 Offset=12
    struct _AGIT_INFO_ arrAgitInfo[25]; // Size=1650 Offset=13
} *PMSG_S2C_AGIT_INFO;
typedef class MSG_S2C_AUCTION_INFO // Size=973
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byAuctionCount; // Size=1 Offset=12
    struct _AUCTION_INFO arrAuctionInfo[20]; // Size=960 Offset=13
} *PMSG_S2C_AUCTION_INFO;
typedef class MSG_S2C_TYR_INFO // Size=2178
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byTyrStat; // Size=1 Offset=12
    unsigned char byUnitIdx; // Size=1 Offset=13
    unsigned short wEntryCnt; // Size=2 Offset=14
    unsigned short wUnitMemberCnt; // Size=2 Offset=16
    struct _TYR_ENTRY_ EntryList[48]; // Size=2160 Offset=18
} *PMSG_S2C_TYR_INFO;
typedef class CLinkedList // Size=8
{
    struct __ListNODE_ * m_pHead; // Size=4 Offset=0
    struct __ListNODE_ * m_pTail; // Size=4 Offset=4
} *PCLinkedList;
typedef struct __ListNODE_ // Size=12
{
    void * pObj; // Size=4 Offset=0
    struct __ListNODE_ * pPrev; // Size=4 Offset=4
    struct __ListNODE_ * pNext; // Size=4 Offset=8
} _ListNODE_, *P_ListNODE_;
typedef struct _ITEM_TABLE0_DATA // Size=208
{
    char itemName[32]; // Size=32 Offset=0
    unsigned long dwStdPrice; // Size=4 Offset=32
    unsigned char category; // Size=1 Offset=36
    unsigned char kind; // Size=1 Offset=37
    unsigned char byAuth; // Size=1 Offset=38
    unsigned char byAttackRange; // Size=1 Offset=39
    unsigned char byMaxRepeatHit; // Size=1 Offset=40
    unsigned char bySoftSkin; // Size=1 Offset=41
    unsigned char byHardSkin; // Size=1 Offset=42
    unsigned char bySmall; // Size=1 Offset=43
    unsigned char byMiddle; // Size=1 Offset=44
    unsigned char byLarge; // Size=1 Offset=45
    unsigned char byXLarge; // Size=1 Offset=46
    struct _ITEM_LEVEL_ arrLevelData[10]; // Size=160 Offset=48
} ITEM_TABLE0_DATA, *PITEM_TABLE0_DATA;
typedef struct std::pair<unsigned char const ,_ITEM_ *> // Size=8
{
    unsigned char first; // Size=1 Offset=0
    struct _ITEM_ * second; // Size=4 Offset=4
} *Pstd::pair<unsigned char const ,_ITEM_ *>;
typedef class std::list<CPC *,std::allocator<CPC *> > // Size=12
{
    class std::allocator<CPC *> allocator; // Size=1 Offset=0
    struct std::list<CPC *,std::allocator<CPC *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<CPC *,std::allocator<CPC *> >;
typedef struct _DROP_ITEM_ // Size=12
{
    struct _ITEM_ * pItem; // Size=4 Offset=0
    unsigned long dwDropTime; // Size=4 Offset=4
    unsigned long dwPriority; // Size=4 Offset=8
} DROP_ITEM_, *PDROP_ITEM_;
typedef class std::list<CNPC *,std::allocator<CNPC *> > // Size=12
{
    class std::allocator<CNPC *> allocator; // Size=1 Offset=0
    struct std::list<CNPC *,std::allocator<CNPC *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<CNPC *,std::allocator<CNPC *> >;
typedef struct CAStar::__NODE // Size=60
{
    int f; // Size=4 Offset=0
    int h; // Size=4 Offset=4
    int g; // Size=4 Offset=8
    int x; // Size=4 Offset=12
    int y; // Size=4 Offset=16
    struct CAStar::__NODE * Parent; // Size=4 Offset=20
    struct CAStar::__NODE * Child[8]; // Size=32 Offset=24
    struct CAStar::__NODE * NextNode; // Size=4 Offset=56
} *PCAStar::__NODE;
typedef class CMap // Size=296336
{
    unsigned short m_wIndex; // Size=2 Offset=1120
    unsigned short m_wPCCountInMap; // Size=2 Offset=1122
    char m_szName[20]; // Size=20 Offset=1124
    class CCell * m_arrCell; // Size=4 Offset=1144
    class CBlock m_arrBlock[484]; // Size=32912 Offset=1148
    struct _WARP_ m_arrWarp[14]; // Size=112 Offset=34060
    unsigned short m_wSubType; // Size=2 Offset=34172
    unsigned short m_wParentMap; // Size=2 Offset=34174
    unsigned long m_dwParentSafeCell; // Size=4 Offset=34176
    unsigned long m_dwCenterCell; // Size=4 Offset=34180
    unsigned char m_byRange; // Size=1 Offset=34184
    unsigned char m_byCondition_Level; // Size=1 Offset=34185
    unsigned short m_wCapacity; // Size=2 Offset=34186
    unsigned short m_wCondition_Type; // Size=2 Offset=34188
    unsigned short m_wCondition_Item; // Size=2 Offset=34190
} *PCMap;
typedef struct _NPC_DATA_TABLE_ // Size=72
{
    char szNPCName[20]; // Size=20 Offset=0
    unsigned short wNPCType; // Size=2 Offset=20
    unsigned short wRegenTime; // Size=2 Offset=22
    struct
    {
        unsigned long NPCClass: 4; // Size=4 Offset=24 BitOffset=0 BitCount=4
        unsigned long AIPattern: 4; // Size=4 Offset=24 BitOffset=4 BitCount=4
        unsigned long ScanRange: 4; // Size=4 Offset=24 BitOffset=8 BitCount=4
        unsigned long SetTargetType: 4; // Size=4 Offset=24 BitOffset=12 BitCount=4
        unsigned long ChangeTargetType: 1; // Size=4 Offset=24 BitOffset=16 BitCount=1
        unsigned long DefRate: 12; // Size=4 Offset=24 BitOffset=17 BitCount=12
        unsigned long AttkTypeNum: 3; // Size=4 Offset=24 BitOffset=29 BitCount=3
    };
    struct _NPC_DATA_TABLE_::_NPC_ATTACK_INFO_ AttkInfo[3]; // Size=24 Offset=28
    struct
    {
        unsigned long ActionSpeed: 16; // Size=4 Offset=52 BitOffset=0 BitCount=16
        unsigned long MoveSpeed: 16; // Size=4 Offset=52 BitOffset=16 BitCount=16
    };
    struct
    {
        unsigned long Level: 9; // Size=4 Offset=56 BitOffset=0 BitCount=9
        unsigned long Exp: 16; // Size=4 Offset=56 BitOffset=9 BitCount=16
        unsigned long BodySize: 3; // Size=4 Offset=56 BitOffset=25 BitCount=3
        unsigned long Skin: 4; // Size=4 Offset=56 BitOffset=28 BitCount=4
    };
    unsigned long dwMaxHP; // Size=4 Offset=60
    struct
    {
        unsigned long RecallType: 2; // Size=4 Offset=64 BitOffset=0 BitCount=2
        unsigned long RecallFamily: 12; // Size=4 Offset=64 BitOffset=2 BitCount=12
        unsigned long RandomType: 2; // Size=4 Offset=64 BitOffset=14 BitCount=2
        unsigned long FireAttk: 8; // Size=4 Offset=64 BitOffset=16 BitCount=8
        unsigned long FireDef: 8; // Size=4 Offset=64 BitOffset=24 BitCount=8
    };
    struct
    {
        unsigned long IceAttk: 8; // Size=4 Offset=68 BitOffset=0 BitCount=8
        unsigned long IceDef: 8; // Size=4 Offset=68 BitOffset=8 BitCount=8
        unsigned long LightAttk: 8; // Size=4 Offset=68 BitOffset=16 BitCount=8
        unsigned long LightDef: 8; // Size=4 Offset=68 BitOffset=24 BitCount=8
    };
} NPC_DATA_TABLE_, *PNPC_DATA_TABLE_;
typedef struct _NPC_DROPITEM_TABLE_ // Size=500
{
    unsigned short wNPCType; // Size=2 Offset=0
    struct _NPC_DROPITEM_TABLE_::_ITEM_DROPRATE_ ItemDrop[62]; // Size=496 Offset=4
} NPC_DROPITEM_TABLE_, *PNPC_DROPITEM_TABLE_;
typedef class std::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> > // Size=12
{
    class std::allocator<_LOG_DATA_ *> allocator; // Size=1 Offset=0
    struct std::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> >;
typedef class MSG_S2V_ZONE_INFO // Size=10
{
    class MSG_HEADER MsgHeader; // Size=2 Offset=0
    int iTotalUser; // Size=4 Offset=2
    struct _MAP_INFO_ Info; // Size=4 Offset=6
} *PMSG_S2V_ZONE_INFO;
typedef class CPartyQuest // Size=96
{
    int m_bRun; // Size=4 Offset=0
    unsigned char m_byStep; // Size=1 Offset=4
    unsigned char m_byPartyQuestIndex; // Size=1 Offset=5
    unsigned char m_byTimeLimit; // Size=1 Offset=6
    unsigned char m_classCheck; // Size=1 Offset=7
    unsigned short m_wMasterItem; // Size=2 Offset=8
    unsigned short m_wLowLevel; // Size=2 Offset=10
    unsigned short m_wHighLevel; // Size=2 Offset=12
    unsigned short m_wMapIndex; // Size=2 Offset=14
    unsigned short m_wMap2Fail; // Size=2 Offset=16
    unsigned short m_arrQuestItem[6]; // Size=12 Offset=18
    unsigned short m_wRemuneration; // Size=2 Offset=30
    unsigned short m_wQuestNPCs[3]; // Size=6 Offset=32
    unsigned long m_dwNeedLore; // Size=4 Offset=40
    unsigned long m_dwStartTick; // Size=4 Offset=44
    unsigned long m_dwCell2Fail; // Size=4 Offset=48
    class CNPC * m_pQuestNPCs[3]; // Size=12 Offset=52
    struct CPartyQuest::_CHALLENGER_ m_arrPC[4]; // Size=32 Offset=64
} *PCPartyQuest;
typedef struct _AGIT_STORAGE_ // Size=1720
{
    unsigned char m_byOpen; // Size=1 Offset=0
    unsigned long m_dwOpenPCID; // Size=4 Offset=4
    unsigned long m_dwStorageMoney; // Size=4 Offset=8
    char m_szStorageName[21]; // Size=105 Offset=12
    struct _ITEM_ * m_StorageItem[80]; // Size=1600 Offset=120
} AGIT_STORAGE_, *PAGIT_STORAGE_;
typedef class CReignMgr // Size=456
{
    struct _REIGNCLAN_ m_Reign; // Size=456 Offset=0
} *PCReignMgr;
typedef class std::list<_AGIT_REPAY_ *,std::allocator<_AGIT_REPAY_ *> > // Size=12
{
    class std::allocator<_AGIT_REPAY_ *> allocator; // Size=1 Offset=0
    struct std::list<_AGIT_REPAY_ *,std::allocator<_AGIT_REPAY_ *> >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<_AGIT_REPAY_ *,std::allocator<_AGIT_REPAY_ *> >;
typedef class std::binder2nd<std::not_equal_to<CPC *> > // Size=8
{
    struct std::not_equal_to<CPC *> op; // Size=1 Offset=0
    class CPC * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<CPC *> >;
typedef class std::binder2nd<std::not_equal_to<CNPC *> > // Size=8
{
    struct std::not_equal_to<CNPC *> op; // Size=1 Offset=0
    class CNPC * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<CNPC *> >;
typedef struct _s__CatchableTypeArray // Size=4
{
    int nCatchableTypes; // Size=4 Offset=0
} s__CatchableTypeArray, *Ps__CatchableTypeArray;
typedef struct _s__ThrowInfo // Size=16
{
    unsigned int attributes; // Size=4 Offset=0
    void ( * pmfnUnwind)(); // Size=4 Offset=4
    int ( * pForwardCompat)(<NoType>); // Size=4 Offset=8
    struct _s__CatchableTypeArray * pCatchableTypeArray; // Size=4 Offset=12
} s__ThrowInfo, *Ps__ThrowInfo;
typedef struct _LIST_ENTRY // Size=8
{
    struct _LIST_ENTRY * Flink; // Size=4 Offset=0
    struct _LIST_ENTRY * Blink; // Size=4 Offset=4
} LIST_ENTRY, *PLIST_ENTRY;
typedef struct tagHELPINFO // Size=28
{
    unsigned int cbSize; // Size=4 Offset=0
    int iContextType; // Size=4 Offset=4
    int iCtrlId; // Size=4 Offset=8
    void * hItemHandle; // Size=4 Offset=12
    unsigned long dwContextId; // Size=4 Offset=16
    struct tagPOINT MousePos; // Size=8 Offset=20
} *PtagHELPINFO;
typedef struct _RPC_ASYNC_STATE::__unnamed::__unnamed // Size=8
{
    void ( * NotificationRoutine)(struct _RPC_ASYNC_STATE *,void *,enum _RPC_ASYNC_EVENT); // Size=4 Offset=0
    void * hThread; // Size=4 Offset=4
} RPC_ASYNC_STATE::__unnamed::__unnamed, *PRPC_ASYNC_STATE::__unnamed::__unnamed;
typedef struct _RPC_MESSAGE // Size=44
{
    void * Handle; // Size=4 Offset=0
    unsigned long DataRepresentation; // Size=4 Offset=4
    void * Buffer; // Size=4 Offset=8
    unsigned int BufferLength; // Size=4 Offset=12
    unsigned int ProcNum; // Size=4 Offset=16
    struct _RPC_SYNTAX_IDENTIFIER * TransferSyntax; // Size=4 Offset=20
    void * RpcInterfaceInformation; // Size=4 Offset=24
    void * ReservedForRuntime; // Size=4 Offset=28
    void * ManagerEpv; // Size=4 Offset=32
    void * ImportContext; // Size=4 Offset=36
    unsigned long RpcFlags; // Size=4 Offset=40
} RPC_MESSAGE, *PRPC_MESSAGE;
typedef struct _EXCEPTION_RECORD // Size=80
{
    unsigned long ExceptionCode; // Size=4 Offset=0
    unsigned long ExceptionFlags; // Size=4 Offset=4
    struct _EXCEPTION_RECORD * ExceptionRecord; // Size=4 Offset=8
    void * ExceptionAddress; // Size=4 Offset=12
    unsigned long NumberParameters; // Size=4 Offset=16
    unsigned long ExceptionInformation[15]; // Size=60 Offset=20
} EXCEPTION_RECORD, *PEXCEPTION_RECORD;
typedef struct _CONTEXT // Size=716
{
    unsigned long ContextFlags; // Size=4 Offset=0
    unsigned long Dr0; // Size=4 Offset=4
    unsigned long Dr1; // Size=4 Offset=8
    unsigned long Dr2; // Size=4 Offset=12
    unsigned long Dr3; // Size=4 Offset=16
    unsigned long Dr6; // Size=4 Offset=20
    unsigned long Dr7; // Size=4 Offset=24
    struct _FLOATING_SAVE_AREA FloatSave; // Size=112 Offset=28
    unsigned long SegGs; // Size=4 Offset=140
    unsigned long SegFs; // Size=4 Offset=144
    unsigned long SegEs; // Size=4 Offset=148
    unsigned long SegDs; // Size=4 Offset=152
    unsigned long Edi; // Size=4 Offset=156
    unsigned long Esi; // Size=4 Offset=160
    unsigned long Ebx; // Size=4 Offset=164
    unsigned long Edx; // Size=4 Offset=168
    unsigned long Ecx; // Size=4 Offset=172
    unsigned long Eax; // Size=4 Offset=176
    unsigned long Ebp; // Size=4 Offset=180
    unsigned long Eip; // Size=4 Offset=184
    unsigned long SegCs; // Size=4 Offset=188
    unsigned long EFlags; // Size=4 Offset=192
    unsigned long Esp; // Size=4 Offset=196
    unsigned long SegSs; // Size=4 Offset=200
    unsigned char ExtendedRegisters[512]; // Size=512 Offset=204
} CONTEXT, *PCONTEXT;
typedef union _MIDL_STUB_DESC::__unnamed // Size=4
{
    void * * pAutoHandle; // Size=4 Offset=0
    void * * pPrimitiveHandle; // Size=4 Offset=0
    struct __GENERIC_BINDING_INFO * pGenericBindingInfo; // Size=4 Offset=0
} MIDL_STUB_DESC::__unnamed, *PMIDL_STUB_DESC::__unnamed;
typedef struct _FULL_PTR_TO_REFID_ELEMENT // Size=16
{
    struct _FULL_PTR_TO_REFID_ELEMENT * Next; // Size=4 Offset=0
    void * Pointer; // Size=4 Offset=4
    unsigned long RefId; // Size=4 Offset=8
    unsigned char State; // Size=1 Offset=12
} FULL_PTR_TO_REFID_ELEMENT, *PFULL_PTR_TO_REFID_ELEMENT;
typedef class CAgitManager // Size=110304
{
    class CAgit m_arrAgit[29]; // Size=107184 Offset=0
    struct _AGIT_TABLE_INFO_ m_arrAgitTblInfo[65]; // Size=3120 Offset=107184
} *PCAgitManager;
typedef class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > // Size=12
{
    class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > allocator; // Size=1 Offset=0
    struct std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Node * _Head; // Size=4 Offset=4
    unsigned int _Size; // Size=4 Offset=8
} *Pstd::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >;
typedef class MSG_C2S_PICKUP_ITEM // Size=24
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned long dwCellIndex; // Size=4 Offset=20
} *PMSG_C2S_PICKUP_ITEM;
typedef class MSG_C2S_DROP_ITEM // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned char invenIndex; // Size=1 Offset=20
} *PMSG_C2S_DROP_ITEM;
typedef class MSG_C2S_MOVE_ITEM // Size=22
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned char oldIndex; // Size=1 Offset=20
    unsigned char newIndex; // Size=1 Offset=21
} *PMSG_C2S_MOVE_ITEM;
typedef class MSG_C2S_WEAR_ITEM // Size=20
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
} *PMSG_C2S_WEAR_ITEM;
typedef class MSG_C2S_STRIP_ITEM // Size=20
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
} *PMSG_C2S_STRIP_ITEM;
typedef class MSG_C2S_GIVE_ITEM // Size=24
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwToPCID; // Size=4 Offset=12
    struct _ITEM_ID_ ItemID; // Size=8 Offset=16
} *PMSG_C2S_GIVE_ITEM;
typedef class MSG_C2S_PUTIN_ITEM // Size=28
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwMoney; // Size=4 Offset=12
    unsigned short wHPotion; // Size=2 Offset=16
    unsigned short wMPotion; // Size=2 Offset=18
    struct _ITEM_ID_ ItemID; // Size=8 Offset=20
} *PMSG_C2S_PUTIN_ITEM;
typedef class MSG_C2S_PUTOUT_ITEM // Size=28
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwMoney; // Size=4 Offset=12
    unsigned short wHPotion; // Size=2 Offset=16
    unsigned short wMPotion; // Size=2 Offset=18
    struct _ITEM_ID_ ItemID; // Size=8 Offset=20
} *PMSG_C2S_PUTOUT_ITEM;
typedef class MSG_C2S_LEARN_SKILL // Size=21
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ScrollID; // Size=8 Offset=12
    unsigned char invenIdx; // Size=1 Offset=20
} *PMSG_C2S_LEARN_SKILL;
typedef class MSG_C2S_CONFIRM_ITEM // Size=25
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    struct _ITEM_ID_ ItemID; // Size=8 Offset=16
    unsigned char byIndex; // Size=1 Offset=24
} *PMSG_C2S_CONFIRM_ITEM;
typedef class MSG_C2S_REMODEL_ITEM // Size=30
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned char byItemIndex; // Size=1 Offset=20
    struct _ITEM_ID_ StoneID; // Size=8 Offset=21
    unsigned char byStoneIndex; // Size=1 Offset=29
} *PMSG_C2S_REMODEL_ITEM;
typedef class MSG_C2S_ASK_INVEN2STORAGE // Size=26
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    struct _ITEM_ID_ itemID; // Size=8 Offset=16
    unsigned char byInvenIndex; // Size=1 Offset=24
    unsigned char byStorageIndex; // Size=1 Offset=25
} *PMSG_C2S_ASK_INVEN2STORAGE;
typedef class MSG_C2S_ASK_STORAGE2INVEN // Size=26
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    struct _ITEM_ID_ itemID; // Size=8 Offset=16
    unsigned char byStorageIndex; // Size=1 Offset=24
    unsigned char byInvenIndex; // Size=1 Offset=25
} *PMSG_C2S_ASK_STORAGE2INVEN;
typedef class MSG_C2S_ASK_MOVE_ITEMINSTORAGE // Size=26
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    struct _ITEM_ID_ itemID; // Size=8 Offset=16
    unsigned char byFromIndex; // Size=1 Offset=24
    unsigned char byToIndex; // Size=1 Offset=25
} *PMSG_C2S_ASK_MOVE_ITEMINSTORAGE;
typedef class MSG_C2S_OPTION // Size=13
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _GAME_OPTION_ option; // Size=1 Offset=12
} *PMSG_C2S_OPTION;
typedef class MSG_C2S_ITEM_COMBINATION // Size=96
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ arrItemID[10]; // Size=80 Offset=12
    unsigned long dwNPCID; // Size=4 Offset=92
} *PMSG_C2S_ITEM_COMBINATION;
typedef class std::binder2nd<std::not_equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > // Size=20
{
    struct std::not_equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > op; // Size=1 Offset=0
    class std::basic_string<char,std::char_traits<char>,std::allocator<char> > value; // Size=16 Offset=4
} *Pstd::binder2nd<std::not_equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >;
typedef struct EXCEL_ITEM_DATA0 // Size=242
{
    unsigned short Group; // Size=2 Offset=0
    unsigned short Index; // Size=2 Offset=2
    unsigned short ItemType; // Size=2 Offset=4
    unsigned short Category; // Size=2 Offset=6
    char ItemName[32]; // Size=32 Offset=8
    unsigned long StdPrice; // Size=4 Offset=40
    unsigned short Auth; // Size=2 Offset=44
    unsigned short AttackRange; // Size=2 Offset=46
    unsigned short MaxRepeat; // Size=2 Offset=48
    unsigned short SoftSkin; // Size=2 Offset=50
    unsigned short HardSkin; // Size=2 Offset=52
    unsigned short Small; // Size=2 Offset=54
    unsigned short Middle; // Size=2 Offset=56
    unsigned short Large; // Size=2 Offset=58
    unsigned short XLarge; // Size=2 Offset=60
    struct EXCEL_LEVEL_DATA arrLevel[10]; // Size=180 Offset=62
} *PEXCEL_ITEM_DATA0;
typedef struct _ITEM_COUNTER_HEADER // Size=40
{
    unsigned char serverID; // Size=1 Offset=0
    struct tm UpdateDate; // Size=36 Offset=4
} ITEM_COUNTER_HEADER, *PITEM_COUNTER_HEADER;
typedef struct __CRT_LIST_ENTRY // Size=8
{
    struct __CRT_LIST_ENTRY * Flink; // Size=4 Offset=0
    struct __CRT_LIST_ENTRY * Blink; // Size=4 Offset=4
} _CRT_LIST_ENTRY, *P_CRT_LIST_ENTRY;
typedef struct _CRT_CRITICAL_SECTION // Size=24
{
    struct _CRT_CRITICAL_SECTION_DEBUG * DebugInfo; // Size=4 Offset=0
    long LockCount; // Size=4 Offset=4
    long RecursionCount; // Size=4 Offset=8
    void * OwningThread; // Size=4 Offset=12
    void * LockSemaphore; // Size=4 Offset=16
    unsigned long Reserved; // Size=4 Offset=20
} CRT_CRITICAL_SECTION, *PCRT_CRITICAL_SECTION;
typedef class CListenServer // Size=72
{
    unsigned int m_sSocket; // Size=4 Offset=16
    int m_bConnect; // Size=4 Offset=20
    void * m_wsaEvent; // Size=4 Offset=24
    struct _WSANETWORKEVENTS m_netEvent; // Size=44 Offset=28
} *PCListenServer;
typedef struct _tagADDRESS // Size=12
{
    unsigned long Offset; // Size=4 Offset=0
    unsigned short Segment; // Size=2 Offset=4
    enum ADDRESS_MODE Mode; // Size=4 Offset=8
} tagADDRESS, *PtagADDRESS;
typedef struct _IMAGEHLP_MODULE // Size=572
{
    unsigned long SizeOfStruct; // Size=4 Offset=0
    unsigned long BaseOfImage; // Size=4 Offset=4
    unsigned long ImageSize; // Size=4 Offset=8
    unsigned long TimeDateStamp; // Size=4 Offset=12
    unsigned long CheckSum; // Size=4 Offset=16
    unsigned long NumSyms; // Size=4 Offset=20
    enum SYM_TYPE SymType; // Size=4 Offset=24
    char ModuleName[32]; // Size=32 Offset=28
    char ImageName[256]; // Size=256 Offset=60
    char LoadedImageName[256]; // Size=256 Offset=316
} IMAGEHLP_MODULE, *PIMAGEHLP_MODULE;
typedef class CPartyQuestMgr // Size=2008
{
    class CPartyQuest * m_pQeustTable; // Size=4 Offset=0
    struct _QUEST_PORTAL_NPC_ m_PortalNPCTable[100]; // Size=2000 Offset=4
    int m_iQuestMax; // Size=4 Offset=2004
} *PCPartyQuestMgr;
typedef struct _SKILL_DATA_TABLE_ // Size=94
{
    unsigned char Code; // Size=1 Offset=0
    unsigned char Type; // Size=1 Offset=1
    unsigned char SubType; // Size=1 Offset=2
    unsigned char TargetType; // Size=1 Offset=3
    unsigned char NeedItem; // Size=1 Offset=4
    unsigned char Reaction; // Size=1 Offset=5
    unsigned char Abnomalcy; // Size=1 Offset=6
    unsigned char MonsterRate[6]; // Size=6 Offset=7
    struct _SKILL_LEVEL_DATA_ LevelData[3]; // Size=81 Offset=13
} SKILL_DATA_TABLE_, *PSKILL_DATA_TABLE_;
typedef class std::codecvt<unsigned short,char,int> // Size=16
{
    class std::locale::id id; // Size=4 Offset=0
    struct _Cvtvec _Cvt; // Size=8 Offset=8
} *Pstd::codecvt<unsigned short,char,int>;
typedef class std::ctype<char> // Size=24
{
    union
    {
        class std::locale::id id; // Size=4 Offset=0
        unsigned int table_size; // Size=4 Offset=0
        short * _Cltab; // Size=4 Offset=0
    };
    struct _Ctypevec _Ctype; // Size=16 Offset=8
} *Pstd::ctype<char>;
typedef struct std::ios_base::_Iosarray // Size=16
{
    struct std::ios_base::_Iosarray * _Next; // Size=4 Offset=0
    int _Index; // Size=4 Offset=4
    long _Lo; // Size=4 Offset=8
    void * _Vp; // Size=4 Offset=12
} *Pstd::ios_base::_Iosarray;
typedef class std::ctype<unsigned short> // Size=24
{
    class std::locale::id id; // Size=4 Offset=0
    struct _Ctypevec _Ctype; // Size=16 Offset=8
} *Pstd::ctype<unsigned short>;
typedef union in_addr::__unnamed // Size=4
{
    struct in_addr::___unnamed95::___unnamed95 S_un_b; // Size=4 Offset=0
    struct in_addr::___unnamed96::___unnamed96 S_un_w; // Size=4 Offset=0
    unsigned long S_addr; // Size=4 Offset=0
} *Pin_addr::__unnamed;
typedef struct _ITEM_ // Size=16
{
    struct _ITEM_ID_ ItemID; // Size=8 Offset=0
    union _ITEM_INFO_ ItemInfo; // Size=4 Offset=8
    unsigned long ItemKey; // Size=4 Offset=12
} ITEM_, *PITEM_;
typedef struct _ACCOUNT_ITEM_ // Size=16
{
    struct _ITEM_ID_ ItemID; // Size=8 Offset=0
    union _ITEM_INFO_ ItemInfo; // Size=4 Offset=8
    unsigned char byWearIndex; // Size=1 Offset=12
} ACCOUNT_ITEM_, *PACCOUNT_ITEM_;
typedef struct _PC_INFO_ // Size=60
{
    char szPCName[13]; // Size=13 Offset=0
    unsigned char byType; // Size=1 Offset=13
    unsigned short wLevel; // Size=2 Offset=14
    unsigned long dwExp; // Size=4 Offset=16
    unsigned short wMapIndex; // Size=2 Offset=20
    unsigned long dwCellIndex; // Size=4 Offset=24
    struct _SKILL_ SkillList; // Size=12 Offset=28
    unsigned char byPKCount; // Size=1 Offset=40
    unsigned short wRTime; // Size=2 Offset=42
    struct _SOCIALINFO_ SInfo; // Size=4 Offset=44
    unsigned long dwMoney; // Size=4 Offset=48
    unsigned short wStoredHp; // Size=2 Offset=52
    unsigned short wStoredMp; // Size=2 Offset=54
    unsigned long dwLore; // Size=4 Offset=56
} PC_INFO_, *PPC_INFO_;
typedef class MSG_S2C_STAT_AUTOUPDATE // Size=110
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wRTime; // Size=2 Offset=12
    struct _PET_STAT_ PetActive; // Size=16 Offset=14
    struct _PET_STAT_ PetInven[5]; // Size=80 Offset=30
} *PMSG_S2C_STAT_AUTOUPDATE;
typedef class MSG_S2C_PET_BUY // Size=37
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char petIndex; // Size=1 Offset=12
    struct _PET_INFO_ NewPet; // Size=20 Offset=13
    unsigned long dwMoney; // Size=4 Offset=33
} *PMSG_S2C_PET_BUY;
typedef class MSG_S2C_PC_LEVELUP // Size=60
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned short wLevel; // Size=2 Offset=12
    struct _PC_STAT_UPDATE_ PCStatUpdate; // Size=46 Offset=14
} *PMSG_S2C_PC_LEVELUP;
typedef class MSG_S2C_ALLOT_POINT // Size=58
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _PC_STAT_UPDATE_ PCStatUpdate; // Size=46 Offset=12
} *PMSG_S2C_ALLOT_POINT;
typedef class MSG_S2C_ITEM_APPEAR // Size=33
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    union _ITEM_INFO_ ItemInfo; // Size=4 Offset=20
    unsigned char objType; // Size=1 Offset=24
    unsigned long dwObjID; // Size=4 Offset=25
    unsigned long dwCellIndex; // Size=4 Offset=29
} *PMSG_S2C_ITEM_APPEAR;
typedef class MSG_S2C_WEAR_ITEM // Size=56
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char wearIndex; // Size=1 Offset=12
    struct _ITEM_ID_ OnItemID; // Size=8 Offset=13
    unsigned char invenIndex; // Size=1 Offset=21
    struct _ITEM_ID_ OffItemID; // Size=8 Offset=22
    struct _PC_2STAT_ PC2ndStat; // Size=26 Offset=30
} *PMSG_S2C_WEAR_ITEM;
typedef class MSG_S2C_STRIP_ITEM // Size=47
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ID_ ItemID; // Size=8 Offset=12
    unsigned char invenIndex; // Size=1 Offset=20
    struct _PC_2STAT_ PC2ndStat; // Size=26 Offset=21
} *PMSG_S2C_STRIP_ITEM;
typedef class MSG_S2C_PUTIN_PET // Size=32
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _PET_INFO_ Pet; // Size=20 Offset=12
} *PMSG_S2C_PUTIN_PET;
typedef class MSG_S2C_SUCCESS_DEAL_PET // Size=52
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _PET_INFO_ takePetList[2]; // Size=40 Offset=12
} *PMSG_S2C_SUCCESS_DEAL_PET;
typedef class MSG_S2C_REVIVE_PET // Size=32
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwItemID; // Size=4 Offset=12
    struct _PET_STAT_ PetUpdate; // Size=16 Offset=16
} *PMSG_S2C_REVIVE_PET;
typedef class MSG_S2C_SHUE_COMBINATION // Size=38
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byResult; // Size=1 Offset=12
    unsigned int uPresentMoney; // Size=4 Offset=13
    unsigned char byInvenIndex; // Size=1 Offset=17
    struct _PET_INFO_ stPetInfo; // Size=20 Offset=18
} *PMSG_S2C_SHUE_COMBINATION;
typedef struct _ITEM_IN_STORAGE_ // Size=20
{
    struct _ITEM_ID_ ItemID; // Size=8 Offset=0
    union _ITEM_INFO_ ItemInfo; // Size=4 Offset=8
    unsigned long ItemKey; // Size=4 Offset=12
    unsigned char byStorageIndex; // Size=1 Offset=16
} ITEM_IN_STORAGE_, *PITEM_IN_STORAGE_;
typedef class MSG_S2C_RETRIEVE_POINT // Size=63
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byResultCode; // Size=1 Offset=12
    struct _PC_STAT_UPDATE_ PCStatUpdate; // Size=46 Offset=13
    unsigned long dwLore; // Size=4 Offset=59
} *PMSG_S2C_RETRIEVE_POINT;
typedef class CSyncSection // Size=28
{
    struct _RTL_CRITICAL_SECTION m_cs; // Size=24 Offset=0
    unsigned char m_bLocked; // Size=1 Offset=24
} *PCSyncSection;
typedef class CKilledCharManage // Size=32
{
    class CLinkedList m_ListKilledChar; // Size=8 Offset=0
    struct _RTL_CRITICAL_SECTION m_cs; // Size=24 Offset=8
} *PCKilledCharManage;
typedef class CPCManage // Size=18508
{
    int m_iPCCnt; // Size=4 Offset=0
    class std::map<unsigned long,CPC *,std::less<unsigned long>,std::allocator<CPC *> > m_PCTable[100]; // Size=6400 Offset=4
    class std::list<CPC *,std::allocator<CPC *> > m_NameTable[1000]; // Size=12000 Offset=6404
    class CKilledCharManage m_KilledPC; // Size=32 Offset=18404
    class CLinkedList m_LogoutPCList; // Size=8 Offset=18436
    class std::list<CPC *,std::allocator<CPC *> > m_PCFreeList; // Size=12 Offset=18444
    class std::list<CPC *,std::allocator<CPC *> > m_standbyPCList; // Size=12 Offset=18456
    class CLinkedList m_WarpWaitPCList[2]; // Size=16 Offset=18468
    struct _RTL_CRITICAL_SECTION m_cs; // Size=24 Offset=18484
} *PCPCManage;
typedef class CAStar // Size=1120
{
    int m_nPathNum; // Size=4 Offset=4
    unsigned long m_arrPath[256]; // Size=1024 Offset=8
    int m_DestX; // Size=4 Offset=1032
    int m_DestY; // Size=4 Offset=1036
    class CMemManager m_NODEMemMgr; // Size=32 Offset=1040
    class CMemManager m_STACKMemMgr; // Size=32 Offset=1072
    int DIRNUM; // Size=4 Offset=1104
    struct CAStar::__NODE * OPEN; // Size=4 Offset=1108
    struct CAStar::__NODE * CLOSED; // Size=4 Offset=1112
    struct CAStar::__STACK * Stack; // Size=4 Offset=1116
} *PCAStar;
typedef struct CAStar::__STACK // Size=8
{
    struct CAStar::__NODE * Nodes; // Size=4 Offset=0
    struct CAStar::__STACK * NextStack; // Size=4 Offset=4
} *PCAStar::__STACK;
typedef class CNPCWaitRecall // Size=32
{
    class CLinkedList m_ListWaitRecallNPC; // Size=8 Offset=0
    struct _RTL_CRITICAL_SECTION m_cs; // Size=24 Offset=8
} *PCNPCWaitRecall;
typedef class CPetManage // Size=16652
{
    int m_nTotalShueCombiNum; // Size=4 Offset=0
    struct _PET_TABLE_DATA_ m_PetTable[256]; // Size=10240 Offset=4
    struct _ITEM_COMBINATION_TABLE_ m_ShueCombinationTable[200]; // Size=6400 Offset=10244
    int m_nNewPet; // Size=4 Offset=16644
    int m_nMaxPet; // Size=4 Offset=16648
} *PCPetManage;
typedef class CQuest // Size=16
{
    struct _QUEST_TABLE_ * m_pQuestTable; // Size=4 Offset=0
    struct _QUEST_HEADER_ * m_pSortQuestTable; // Size=4 Offset=4
    int m_iDefaultLevelQuest; // Size=4 Offset=8
    int m_iMaxQuestLevel; // Size=4 Offset=12
} *PCQuest;
typedef struct sockaddr_in // Size=16
{
    short sin_family; // Size=2 Offset=0
    unsigned short sin_port; // Size=2 Offset=2
    struct in_addr sin_addr; // Size=4 Offset=4
    char sin_zero[8]; // Size=8 Offset=8
} *Psockaddr_in;
typedef class CLottoManager // Size=152
{
    int m_nLoadedHistoryNum; // Size=4 Offset=4
    struct _LOTTO_LOG_DATA_ m_stNowLottoStatus; // Size=108 Offset=8
    struct _LOTTO_LOG_DATA_ * m_pArrLottoHistory[9]; // Size=36 Offset=116
} *PCLottoManager;
typedef class CDerbyManager // Size=8320
{
    int iDerbyIndex; // Size=4 Offset=0
    int iDerbyTickCount; // Size=4 Offset=4
    struct _DERBY_MONSTER_INFO_ dmiMonster[32]; // Size=320 Offset=8
    struct _DERBY_HISTORY_INFO_ dhiHistory[480]; // Size=7680 Offset=328
    struct _DERBY_MONSTER_INFO_ dmiEntryList[5]; // Size=50 Offset=8008
    float fVelocityCurve[30]; // Size=120 Offset=8060
    int recentBackupFileID; // Size=4 Offset=8180
    int recentBackupStamp; // Size=4 Offset=8184
    int recentHistoryIndex; // Size=4 Offset=8188
    int recentLoggedDerbyIndex; // Size=4 Offset=8192
    unsigned int iBetTotal[15]; // Size=60 Offset=8196
    float fRatioTable[15]; // Size=60 Offset=8256
    unsigned char bIsRatioValid; // Size=1 Offset=8316
} *PCDerbyManager;
typedef struct _s__CatchableType // Size=28
{
    unsigned int properties; // Size=4 Offset=0
    struct _TypeDescriptor * pType; // Size=4 Offset=4
    struct _PMD thisDisplacement; // Size=12 Offset=8
    int sizeOrOffset; // Size=4 Offset=20
    void ( * copyFunction)(); // Size=4 Offset=24
} s__CatchableType, *Ps__CatchableType;
typedef class std::binder2nd<std::not_equal_to<_LOG_DATA_ *> > // Size=8
{
    struct std::not_equal_to<_LOG_DATA_ *> op; // Size=1 Offset=0
    struct _LOG_DATA_ * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<_LOG_DATA_ *> >;
typedef struct _QualityOfService // Size=72
{
    struct _flowspec SendingFlowspec; // Size=32 Offset=0
    struct _flowspec ReceivingFlowspec; // Size=32 Offset=32
    struct _WSABUF ProviderSpecific; // Size=8 Offset=64
} QualityOfService, *PQualityOfService;
typedef struct _EXCEPTION_POINTERS // Size=8
{
    struct _EXCEPTION_RECORD * ExceptionRecord; // Size=4 Offset=0
    struct _CONTEXT * ContextRecord; // Size=4 Offset=4
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
typedef class std::binder2nd<std::not_equal_to<_AGIT_REPAY_ *> > // Size=8
{
    struct std::not_equal_to<_AGIT_REPAY_ *> op; // Size=1 Offset=0
    struct _AGIT_REPAY_ * value; // Size=4 Offset=4
} *Pstd::binder2nd<std::not_equal_to<_AGIT_REPAY_ *> >;
typedef struct _RPC_SYNTAX_IDENTIFIER // Size=20
{
    struct _GUID SyntaxGUID; // Size=16 Offset=0
    struct _RPC_VERSION SyntaxVersion; // Size=4 Offset=16
} RPC_SYNTAX_IDENTIFIER, *PRPC_SYNTAX_IDENTIFIER;
typedef class MSG_C2S_SHUE_COMBINATION // Size=56
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    struct _PET_INFO_ arrPetInfo[2]; // Size=40 Offset=16
} *PMSG_C2S_SHUE_COMBINATION;
typedef class ios // Size=80
{
    union
    {
        struct
        {
            long basefield; // Size=4 Offset=0
            class streambuf * bp; // Size=4 Offset=4
            int state; // Size=4 Offset=8
            int ispecial; // Size=4 Offset=12
            int ospecial; // Size=4 Offset=16
            int isfx_special; // Size=4 Offset=20
            int osfx_special; // Size=4 Offset=24
            int x_delbuf; // Size=4 Offset=28
        };
        long adjustfield; // Size=4 Offset=0
        long floatfield; // Size=4 Offset=0
        void ( * stdioflush)(); // Size=4 Offset=0
        long x_maxbit; // Size=4 Offset=0
        int x_curindex; // Size=4 Offset=0
        int sunk_with_stdio; // Size=4 Offset=0
        long x_statebuf[8]; // Size=32 Offset=0
        int fLockcInit; // Size=4 Offset=0
        struct _CRT_CRITICAL_SECTION x_lockc; // Size=24 Offset=0
    };
    class ostream * x_tie; // Size=4 Offset=32
    long x_flags; // Size=4 Offset=36
    int x_precision; // Size=4 Offset=40
    char x_fill; // Size=1 Offset=44
    int x_width; // Size=4 Offset=48
    int LockFlg; // Size=4 Offset=52
    struct _CRT_CRITICAL_SECTION x_lock; // Size=24 Offset=56
} *Pios;
typedef class streambuf // Size=76
{
    int _fAlloc; // Size=4 Offset=4
    int _fUnbuf; // Size=4 Offset=8
    int x_lastc; // Size=4 Offset=12
    char * _base; // Size=4 Offset=16
    char * _ebuf; // Size=4 Offset=20
    char * _pbase; // Size=4 Offset=24
    char * _pptr; // Size=4 Offset=28
    char * _epptr; // Size=4 Offset=32
    char * _eback; // Size=4 Offset=36
    char * _gptr; // Size=4 Offset=40
    char * _egptr; // Size=4 Offset=44
    int LockFlg; // Size=4 Offset=48
    struct _CRT_CRITICAL_SECTION x_lock; // Size=24 Offset=52
} *Pstreambuf;
typedef class std::ios_base // Size=40
{
    union
    {
        int _Index; // Size=4 Offset=0
        unsigned char _Sync; // Size=1 Offset=0
    };
    int _State; // Size=4 Offset=4
    int _Except; // Size=4 Offset=8
    int _Fmtfl; // Size=4 Offset=12
    int _Prec; // Size=4 Offset=16
    int _Wide; // Size=4 Offset=20
    struct std::ios_base::_Iosarray * _Arr; // Size=4 Offset=24
    struct std::ios_base::_Fnarray * _Calls; // Size=4 Offset=28
    class std::locale _Loc; // Size=4 Offset=32
    unsigned int _Stdstr; // Size=4 Offset=36
} *Pstd::ios_base;
typedef struct std::ios_base::_Fnarray // Size=12
{
    struct std::ios_base::_Fnarray * _Next; // Size=4 Offset=0
    int _Index; // Size=4 Offset=4
    void ( * _Pfn)(enum std::ios_base::event,class std::ios_base *,int); // Size=4 Offset=8
} *Pstd::ios_base::_Fnarray;
typedef struct tagMSG // Size=28
{
    struct HWND__ * hwnd; // Size=4 Offset=0
    unsigned int message; // Size=4 Offset=4
    unsigned int wParam; // Size=4 Offset=8
    long lParam; // Size=4 Offset=12
    unsigned long time; // Size=4 Offset=16
    struct tagPOINT pt; // Size=8 Offset=20
} *PtagMSG;
typedef struct tagPAINTSTRUCT // Size=64
{
    struct HDC__ * hdc; // Size=4 Offset=0
    int fErase; // Size=4 Offset=4
    struct tagRECT rcPaint; // Size=16 Offset=8
    int fRestore; // Size=4 Offset=24
    int fIncUpdate; // Size=4 Offset=28
    unsigned char rgbReserved[32]; // Size=32 Offset=32
} *PtagPAINTSTRUCT;
typedef struct _CONTROL_SERVICE // Size=44
{
    unsigned long Length; // Size=4 Offset=0
    unsigned long Service; // Size=4 Offset=4
    struct _AD_GENERAL_PARAMS Overrides; // Size=20 Offset=8
    union
    {
        struct _AD_GUARANTEED Guaranteed; // Size=16 Offset=28
        struct _PARAM_BUFFER ParamBuffer[1]; // Size=12 Offset=28
    };
} CONTROL_SERVICE, *PCONTROL_SERVICE;
typedef struct _CHARACTER_INFO_ // Size=176
{
    char szPCName[13]; // Size=13 Offset=0
    unsigned char byType; // Size=1 Offset=13
    unsigned short wLevel; // Size=2 Offset=14
    struct _ACCOUNT_ITEM_ WearList[10]; // Size=160 Offset=16
} CHARACTER_INFO_, *PCHARACTER_INFO_;
typedef class CBaseServer // Size=8388728
{
    int m_bConnect; // Size=4 Offset=16
    unsigned int m_sSocket; // Size=4 Offset=20
    void * m_wsaEvent; // Size=4 Offset=24
    struct _WSANETWORKEVENTS m_netEvent; // Size=44 Offset=28
########################################
    int m_nRecvEndPos; // Size=4 Offset=4194380
########################################
    int m_nSendEndPos; // Size=4 Offset=8388692
    int m_iSentCount; // Size=4 Offset=8388696
    int m_iSentSize; // Size=4 Offset=8388700
    struct _RTL_CRITICAL_SECTION m_csSend; // Size=24 Offset=8388704
} *PCBaseServer;
typedef class MSG_S2C_PICKUP_ITEM // Size=29
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ Item; // Size=16 Offset=12
    unsigned char byInvenIndex; // Size=1 Offset=28
} *PMSG_S2C_PICKUP_ITEM;
typedef class MSG_S2C_BUY_ITEM // Size=33
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char invenIndex; // Size=1 Offset=12
    struct _ITEM_ Item; // Size=16 Offset=13
    unsigned long dwMoney; // Size=4 Offset=29
} *PMSG_S2C_BUY_ITEM;
typedef class MSG_S2C_GIVEN_ITEM // Size=42
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    char szPCName[13]; // Size=13 Offset=12
    unsigned char invenIndex; // Size=1 Offset=25
    struct _ITEM_ Item; // Size=16 Offset=26
} *PMSG_S2C_GIVEN_ITEM;
typedef class MSG_S2C_PUTIN_ITEM // Size=36
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwMoney; // Size=4 Offset=12
    unsigned short wHPotion; // Size=2 Offset=16
    unsigned short wMPotion; // Size=2 Offset=18
    struct _ITEM_ Item; // Size=16 Offset=20
} *PMSG_S2C_PUTIN_ITEM;
typedef class MSG_S2C_CONFIRM_ITEM // Size=33
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ Item; // Size=16 Offset=12
    unsigned char byIndex; // Size=1 Offset=28
    unsigned long dwMoney; // Size=4 Offset=29
} *PMSG_S2C_CONFIRM_ITEM;
typedef class MSG_S2C_REMODEL_ITEM // Size=30
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byStoneIndex; // Size=1 Offset=12
    struct _ITEM_ Item; // Size=16 Offset=13
    unsigned char byItemIndex; // Size=1 Offset=29
} *PMSG_S2C_REMODEL_ITEM;
typedef class MSG_S2C_ITEM_COMBINATION // Size=30
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byResult; // Size=1 Offset=12
    unsigned char byInvenIndex; // Size=1 Offset=13
    struct _ITEM_ NewItem; // Size=16 Offset=14
} *PMSG_S2C_ITEM_COMBINATION;
typedef class MSG_S2C_LOTTO_PURCHASE // Size=34
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byResult; // Size=1 Offset=12
    unsigned char byInvenIndex; // Size=1 Offset=13
    struct _ITEM_ itemLotto; // Size=16 Offset=14
    unsigned int uPresentMoney; // Size=4 Offset=30
} *PMSG_S2C_LOTTO_PURCHASE;
typedef class MSG_S2C_DERBY_PURCHASE // Size=34
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byResult; // Size=1 Offset=12
    unsigned char byInvenIndex; // Size=1 Offset=13
    struct _ITEM_ itemDerby; // Size=16 Offset=14
    unsigned long dwPresentMoney; // Size=4 Offset=30
} *PMSG_S2C_DERBY_PURCHASE;
typedef class MSG_S2C_ANS_OPEN_STORAGE // Size=1618
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned char byErrCode; // Size=1 Offset=12
    unsigned long dwMoney; // Size=4 Offset=13
    unsigned char byNumItem; // Size=1 Offset=17
    struct _ITEM_IN_STORAGE_ Storage[80]; // Size=1600 Offset=18
} *PMSG_S2C_ANS_OPEN_STORAGE;
typedef class MSG_M2S_LOAD_STORAGE // Size=1611
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    unsigned char byGateSvrID; // Size=1 Offset=6
    unsigned long dwStorageMoney; // Size=4 Offset=7
    struct _ITEM_IN_STORAGE_ StorageItemList[80]; // Size=1600 Offset=11
} *PMSG_M2S_LOAD_STORAGE;
typedef class MSG_S2M_SAVE_STORAGE // Size=1619
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    char szCharacterName[13]; // Size=13 Offset=2
    unsigned long dwStorageMoney; // Size=4 Offset=15
    struct _ITEM_IN_STORAGE_ StorageItemList[80]; // Size=1600 Offset=19
} *PMSG_S2M_SAVE_STORAGE;
typedef class CCell // Size=36
{
    struct _CELL_ m_cell; // Size=4 Offset=0
    void * m_pStand; // Size=4 Offset=4
    class std::list<CPC *,std::allocator<CPC *> > m_movePCList; // Size=12 Offset=8
    struct _DROP_ITEM_ m_Item; // Size=12 Offset=20
    unsigned char m_byOccupied; // Size=1 Offset=32
} *PCCell;
typedef class CGameLog // Size=132
{
    int m_bConnect; // Size=4 Offset=16
    unsigned int m_sSocket; // Size=4 Offset=20
    void * m_wsaEvent; // Size=4 Offset=24
    struct _WSANETWORKEVENTS m_netEvent; // Size=44 Offset=28
    char m_szAddr[16]; // Size=16 Offset=72
    int m_nPort; // Size=4 Offset=88
    int m_nConnectTryCount; // Size=4 Offset=92
    class std::list<_LOG_DATA_ *,std::allocator<_LOG_DATA_ *> > m_LogDataQ; // Size=12 Offset=96
    struct _RTL_CRITICAL_SECTION m_csSend; // Size=24 Offset=108
} *PCGameLog;
typedef class CAgit // Size=1848
{
    unsigned char m_byGrade; // Size=1 Offset=4
    char m_szMasterName[13]; // Size=13 Offset=5
    int m_bUsed; // Size=4 Offset=20
    int m_bShow; // Size=4 Offset=24
    int m_iRemainingDays; // Size=4 Offset=28
    unsigned long m_dwWarpPos; // Size=4 Offset=32
    unsigned long m_dwUpperLeftPos; // Size=4 Offset=36
    unsigned char m_byNation; // Size=1 Offset=40
    int m_bSelled; // Size=4 Offset=44
    unsigned long m_dwClanID; // Size=4 Offset=48
    unsigned char m_byStorageCnt; // Size=1 Offset=52
    unsigned short m_wNPCType; // Size=2 Offset=54
    unsigned char m_byReserved; // Size=1 Offset=56
    struct _AGIT_STORAGE_ m_AgitStorage; // Size=1720 Offset=60
    struct _AGIT_INFO_ m_AgitInfo; // Size=66 Offset=1780
} *PCAgit;
typedef struct _RTL_CRITICAL_SECTION_DEBUG // Size=32
{
    unsigned short Type; // Size=2 Offset=0
    unsigned short CreatorBackTraceIndex; // Size=2 Offset=2
    struct _RTL_CRITICAL_SECTION * CriticalSection; // Size=4 Offset=4
    struct _LIST_ENTRY ProcessLocksList; // Size=8 Offset=8
    unsigned long EntryCount; // Size=4 Offset=16
    unsigned long ContentionCount; // Size=4 Offset=20
    unsigned long Spare[2]; // Size=8 Offset=24
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG;
typedef struct _RPC_ASYNC_STATE // Size=68
{
    unsigned int Size; // Size=4 Offset=0
    unsigned long Signature; // Size=4 Offset=4
    long Lock; // Size=4 Offset=8
    unsigned long Flags; // Size=4 Offset=12
    void * StubInfo; // Size=4 Offset=16
    void * UserInfo; // Size=4 Offset=20
    void * RuntimeInfo; // Size=4 Offset=24
    enum _RPC_ASYNC_EVENT Event; // Size=4 Offset=28
    enum _RPC_NOTIFICATION_TYPES NotificationType; // Size=4 Offset=32
    union _RPC_ASYNC_STATE::___unnamed943 u; // Size=16 Offset=36
    long Reserved[4]; // Size=16 Offset=52
} RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;
typedef struct _FULL_PTR_XLAT_TABLES // Size=32
{
    struct _FULL_PTR_XLAT_TABLES::___unnamed1083 RefIdToPointer; // Size=12 Offset=0
    struct _FULL_PTR_XLAT_TABLES::___unnamed1084 PointerToRefId; // Size=12 Offset=12
    unsigned long NextRefId; // Size=4 Offset=24
    enum XLAT_SIDE XlatSide; // Size=4 Offset=28
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;
typedef class MSG_C2S_SELL_ITEM // Size=32
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNPCID; // Size=4 Offset=12
    struct _ITEM_ Item; // Size=16 Offset=16
} *PMSG_C2S_SELL_ITEM;
typedef class MSG_C2S_LOTTO_SALE // Size=32
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ itemLotto; // Size=16 Offset=12
    unsigned long dwNPCID; // Size=4 Offset=28
} *PMSG_C2S_LOTTO_SALE;
typedef class MSG_C2S_DERBY_EXCHANGE // Size=32
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _ITEM_ itemDerby; // Size=16 Offset=12
    unsigned long dwNPCID; // Size=4 Offset=28
} *PMSG_C2S_DERBY_EXCHANGE;
typedef struct _CRT_CRITICAL_SECTION_DEBUG // Size=48
{
    unsigned short Type; // Size=2 Offset=0
    unsigned short CreatorBackTraceIndex; // Size=2 Offset=2
    struct _CRT_CRITICAL_SECTION * CriticalSection; // Size=4 Offset=4
    struct __CRT_LIST_ENTRY ProcessLocksList; // Size=8 Offset=8
    unsigned long EntryCount; // Size=4 Offset=16
    unsigned long ContentionCount; // Size=4 Offset=20
    unsigned long Depth; // Size=4 Offset=24
    void * OwnerBackTrace[5]; // Size=20 Offset=28
} CRT_CRITICAL_SECTION_DEBUG, *PCRT_CRITICAL_SECTION_DEBUG;
typedef struct _tagSTACKFRAME // Size=116
{
    struct _tagADDRESS AddrPC; // Size=12 Offset=0
    struct _tagADDRESS AddrReturn; // Size=12 Offset=12
    struct _tagADDRESS AddrFrame; // Size=12 Offset=24
    struct _tagADDRESS AddrStack; // Size=12 Offset=36
    void * FuncTableEntry; // Size=4 Offset=48
    unsigned long Params[4]; // Size=16 Offset=52
    int Far; // Size=4 Offset=68
    int Virtual; // Size=4 Offset=72
    unsigned long Reserved[3]; // Size=12 Offset=76
    struct _KDHELP KdHelp; // Size=28 Offset=88
} tagSTACKFRAME, *PtagSTACKFRAME;
typedef class CSystemMgr // Size=1056
{
    struct sockaddr_in m_peerAddr; // Size=16 Offset=1036
    long m_lShutDownTime; // Size=4 Offset=1052
} *PCSystemMgr;
typedef class MSG_S2C_PC_APPEAR // Size=121
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwPCID; // Size=4 Offset=12
    char szPCName[13]; // Size=13 Offset=16
    unsigned char byPCType; // Size=1 Offset=29
    unsigned char byCaoLevel; // Size=1 Offset=30
    struct
    {
        unsigned char direction: 4; // Size=1 Offset=31 BitOffset=0 BitCount=4
        unsigned char action: 4; // Size=1 Offset=31 BitOffset=4 BitCount=4
    };
    unsigned long dwAppearCell; // Size=4 Offset=32
    struct _SOCIALINFO_ SInfo; // Size=4 Offset=36
    struct _ITEM_APPEAR_ HeadItem; // Size=4 Offset=40
    struct _ITEM_APPEAR_ UpperItem; // Size=4 Offset=44
    struct _ITEM_APPEAR_ LowerItem; // Size=4 Offset=48
    struct _ITEM_APPEAR_ HandItem; // Size=4 Offset=52
    struct _ITEM_APPEAR_ FootItem; // Size=4 Offset=56
    struct _ITEM_APPEAR_ LeftItem; // Size=4 Offset=60
    struct _ITEM_APPEAR_ RightItem; // Size=4 Offset=64
    struct _PET_APPEAR_ ActivePet; // Size=4 Offset=68
    struct _SKILL_CAST_ CastSkillList[4]; // Size=12 Offset=72
    char szClanName[32]; // Size=32 Offset=84
    unsigned long dwMarkID; // Size=4 Offset=116
    unsigned char bWearFlag; // Size=1 Offset=120
} *PMSG_S2C_PC_APPEAR;
typedef class MSG_S2C_CHAR_LIST // Size=892
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _CHARACTER_INFO_ CharInfo[5]; // Size=880 Offset=12
} *PMSG_S2C_CHAR_LIST;
typedef class CNPC // Size=1492
{
    unsigned long m_dwNPCID; // Size=4 Offset=4
    unsigned short m_wNPCType; // Size=2 Offset=8
    unsigned short m_wRegenMap; // Size=2 Offset=10
    unsigned long m_dwRegenCell; // Size=4 Offset=12
    int m_iRegenDir; // Size=4 Offset=16
    enum NPCAI_STATE m_NPCAIState; // Size=4 Offset=20
    int m_iActionSpeed; // Size=4 Offset=24
    int m_iHp; // Size=4 Offset=28
    int m_iMp; // Size=4 Offset=32
    int m_iDirection; // Size=4 Offset=36
    unsigned short m_wLevel; // Size=2 Offset=40
    unsigned short m_wCurMap; // Size=2 Offset=42
    unsigned long m_dwCurCell; // Size=4 Offset=44
    unsigned char m_byAttackType; // Size=1 Offset=48
    unsigned char m_byAttkRangeMin; // Size=1 Offset=49
    unsigned char m_byAttkRangeMax; // Size=1 Offset=50
    unsigned char m_bBoss; // Size=1 Offset=51
    unsigned char m_bQuestNPC; // Size=1 Offset=52
    unsigned char m_byRecallInfo; // Size=1 Offset=53
    class CNPC * m_pMasterNPC; // Size=4 Offset=56
    unsigned long m_dwSlaveNPCID; // Size=4 Offset=60
    unsigned short m_DropItemCode; // Size=2 Offset=64
    int m_iMoveCellIdx; // Size=4 Offset=68
    int m_iMoveCellNum; // Size=4 Offset=72
    unsigned long m_dwMoveCell[8]; // Size=32 Offset=76
    unsigned long m_dwLastTick; // Size=4 Offset=108
    unsigned long m_dwDieTime; // Size=4 Offset=112
    struct CNPC::_NPC_REMEMBER_PC_ m_LastTarget; // Size=12 Offset=116
    struct CNPC::_NPC_REMEMBER_PC_ m_arrAttacker[64]; // Size=768 Offset=128
    int m_iAttackerCnt; // Size=4 Offset=896
    int m_iLastAttackerIdx; // Size=4 Offset=900
    class CNPC::CNPCStatChange m_SkillStatChange; // Size=14 Offset=904
    class CPC * m_parrScanPC[128]; // Size=512 Offset=920
    int m_iScanPCCnt; // Size=4 Offset=1432
    struct _LASTINGSKILL_MANAGEARRARY_ m_NPCSkillCasted; // Size=48 Offset=1436
    class CSimpleSyncSection m_SyncObj; // Size=8 Offset=1484
} *PCNPC;
typedef struct _QUEST_TABLE_ // Size=2460
{
    struct _QUEST_HEADER_ Header; // Size=460 Offset=0
    struct _QUEST_NEEDS_ Needs; // Size=24 Offset=460
    struct _QUEST_REWARD_ Reward; // Size=52 Offset=484
    struct _QUEST_CONTENTS_ Contents[7]; // Size=1540 Offset=536
    char Info[384]; // Size=384 Offset=2076
} QUEST_TABLE_, *PQUEST_TABLE_;
typedef struct tagSTATSTG // Size=72
{
    unsigned short * pwcsName; // Size=4 Offset=0
    unsigned long type; // Size=4 Offset=4
    union _ULARGE_INTEGER cbSize; // Size=8 Offset=8
    struct _FILETIME mtime; // Size=8 Offset=16
    struct _FILETIME ctime; // Size=8 Offset=24
    struct _FILETIME atime; // Size=8 Offset=32
    unsigned long grfMode; // Size=4 Offset=40
    unsigned long grfLocksSupported; // Size=4 Offset=44
    struct _GUID clsid; // Size=16 Offset=48
    unsigned long grfStateBits; // Size=4 Offset=64
    unsigned long reserved; // Size=4 Offset=68
} *PtagSTATSTG;
typedef union _RPC_ASYNC_STATE::__unnamed // Size=16
{
    struct _RPC_ASYNC_STATE::___unnamed1037::___unnamed1037 APC; // Size=8 Offset=0
    struct _RPC_ASYNC_STATE::___unnamed1039::___unnamed1039 IOC; // Size=16 Offset=0
    struct _RPC_ASYNC_STATE::___unnamed1041::___unnamed1041 HWND; // Size=8 Offset=0
    void * hEvent; // Size=4 Offset=0
    void ( * NotificationRoutine)(struct _RPC_ASYNC_STATE *,void *,enum _RPC_ASYNC_EVENT); // Size=4 Offset=0
} RPC_ASYNC_STATE::__unnamed, *PRPC_ASYNC_STATE::__unnamed;
typedef struct _PROPSHEETPAGEW // Size=48
{
    unsigned long dwSize; // Size=4 Offset=0
    unsigned long dwFlags; // Size=4 Offset=4
    struct HINSTANCE__ * hInstance; // Size=4 Offset=8
    union
    {
        unsigned short * pszTemplate; // Size=4 Offset=12
        struct DLGTEMPLATE * pResource; // Size=4 Offset=12
    };
    union
    {
        struct HICON__ * hIcon; // Size=4 Offset=16
        unsigned short * pszIcon; // Size=4 Offset=16
    };
    unsigned short * pszTitle; // Size=4 Offset=20
    int ( * pfnDlgProc)(struct HWND__ *,unsigned int,unsigned int,long); // Size=4 Offset=24
    long lParam; // Size=4 Offset=28
    unsigned int ( * pfnCallback)(struct HWND__ *,unsigned int,struct _PROPSHEETPAGEW *); // Size=4 Offset=32
    unsigned int * pcRefParent; // Size=4 Offset=36
    unsigned short * pszHeaderTitle; // Size=4 Offset=40
    unsigned short * pszHeaderSubTitle; // Size=4 Offset=44
} PROPSHEETPAGEW, *PPROPSHEETPAGEW;
typedef struct _PROPSHEETPAGEA // Size=48
{
    unsigned long dwSize; // Size=4 Offset=0
    unsigned long dwFlags; // Size=4 Offset=4
    struct HINSTANCE__ * hInstance; // Size=4 Offset=8
    union
    {
        char * pszTemplate; // Size=4 Offset=12
        struct DLGTEMPLATE * pResource; // Size=4 Offset=12
    };
    union
    {
        struct HICON__ * hIcon; // Size=4 Offset=16
        char * pszIcon; // Size=4 Offset=16
    };
    char * pszTitle; // Size=4 Offset=20
    int ( * pfnDlgProc)(struct HWND__ *,unsigned int,unsigned int,long); // Size=4 Offset=24
    long lParam; // Size=4 Offset=28
    unsigned int ( * pfnCallback)(struct HWND__ *,unsigned int,struct _PROPSHEETPAGEA *); // Size=4 Offset=32
    unsigned int * pcRefParent; // Size=4 Offset=36
    char * pszHeaderTitle; // Size=4 Offset=40
    char * pszHeaderSubTitle; // Size=4 Offset=44
} PROPSHEETPAGEA, *PPROPSHEETPAGEA;
typedef struct tagWNDCLASSA // Size=40
{
    unsigned int style; // Size=4 Offset=0
    long ( * lpfnWndProc)(struct HWND__ *,unsigned int,unsigned int,long); // Size=4 Offset=4
    int cbClsExtra; // Size=4 Offset=8
    int cbWndExtra; // Size=4 Offset=12
    struct HINSTANCE__ * hInstance; // Size=4 Offset=16
    struct HICON__ * hIcon; // Size=4 Offset=20
    struct HICON__ * hCursor; // Size=4 Offset=24
    struct HBRUSH__ * hbrBackground; // Size=4 Offset=28
    char * lpszMenuName; // Size=4 Offset=32
    char * lpszClassName; // Size=4 Offset=36
} *PtagWNDCLASSA;
typedef union _ITEM_IN_WEAR_ // Size=20
{
    union
    {
        struct _ITEM_ item; // Size=16 Offset=0
        struct
        {
            struct _ITEM_ID_ ItemID; // Size=8 Offset=0
            union _ITEM_INFO_ ItemInfo; // Size=4 Offset=8
            unsigned long ItemKey; // Size=4 Offset=12
        };
    };
    unsigned char byWearIndex; // Size=1 Offset=16
} ITEM_IN_WEAR_, *PITEM_IN_WEAR_;
typedef union _ITEM_IN_INVEN_ // Size=20
{
    union
    {
        struct _ITEM_ item; // Size=16 Offset=0
        struct
        {
            struct _ITEM_ID_ ItemID; // Size=8 Offset=0
            union _ITEM_INFO_ ItemInfo; // Size=4 Offset=8
            unsigned long ItemKey; // Size=4 Offset=12
        };
    };
    unsigned char byInvenIndex; // Size=1 Offset=16
} ITEM_IN_INVEN_, *PITEM_IN_INVEN_;
typedef struct _ZONE_WARP_DATA_ // Size=268
{
    struct _LASTINGSKILL_MANAGEARRARY_ LastingSkillManageArray; // Size=48 Offset=0
    struct _LASTINGITEM_ARRAY_ LastingItemArray[5]; // Size=40 Offset=48
    unsigned long dwPartyID; // Size=4 Offset=88
    struct _PARTISAN_ arrMyParty[3]; // Size=24 Offset=92
    unsigned long dwApprenticeID; // Size=4 Offset=116
    struct _APPRENTICE_INFO_ stApprenticeInfo; // Size=4 Offset=120
    unsigned short wAgitID; // Size=2 Offset=124
    unsigned long dwMarkID; // Size=4 Offset=128
    char szClanName[32]; // Size=32 Offset=132
    char szPasswd[21]; // Size=21 Offset=164
    long RemainTime; // Size=4 Offset=188
    unsigned char PayMode; // Size=1 Offset=192
    int PayNo; // Size=4 Offset=196
    char Reserved1[33]; // Size=33 Offset=200
    char Reserved2[33]; // Size=33 Offset=233
} ZONE_WARP_DATA_, *PZONE_WARP_DATA_;
typedef class MSG_S2C_SUCCESS_DEAL // Size=420
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwMoney; // Size=4 Offset=12
    unsigned short wHPotion; // Size=2 Offset=16
    unsigned short wMPotion; // Size=2 Offset=18
    union _ITEM_IN_INVEN_ takeItemList[20]; // Size=400 Offset=20
} *PMSG_S2C_SUCCESS_DEAL;
typedef struct _MIDL_STUB_DESC // Size=80
{
    void * RpcInterfaceInformation; // Size=4 Offset=0
    void * ( * pfnAllocate)(unsigned int); // Size=4 Offset=4
    void ( * pfnFree)(void *); // Size=4 Offset=8
    union _MIDL_STUB_DESC::___unnamed1072 IMPLICIT_HANDLE_INFO; // Size=4 Offset=12
    void ( * * apfnNdrRundownRoutines)(void *); // Size=4 Offset=16
    struct _GENERIC_BINDING_ROUTINE_PAIR * aGenericBindingRoutinePairs; // Size=4 Offset=20
    void ( * * apfnExprEval)(struct _MIDL_STUB_MESSAGE *); // Size=4 Offset=24
    struct _XMIT_ROUTINE_QUINTUPLE * aXmitQuintuple; // Size=4 Offset=28
    unsigned char * pFormatTypes; // Size=4 Offset=32
    int fCheckBounds; // Size=4 Offset=36
    unsigned long Version; // Size=4 Offset=40
    struct _MALLOC_FREE_STRUCT * pMallocFreeStruct; // Size=4 Offset=44
    long MIDLVersion; // Size=4 Offset=48
    struct _COMM_FAULT_OFFSETS * CommFaultOffsets; // Size=4 Offset=52
    struct _USER_MARSHAL_ROUTINE_QUADRUPLE * aUserMarshalQuadruple; // Size=4 Offset=56
    long Reserved1; // Size=4 Offset=60
    long Reserved2; // Size=4 Offset=64
    long Reserved3; // Size=4 Offset=68
    long Reserved4; // Size=4 Offset=72
    long Reserved5; // Size=4 Offset=76
} MIDL_STUB_DESC, *PMIDL_STUB_DESC;
typedef class CItemManage // Size=556548
{
    struct _ITEM_TABLE0_DATA m_ItemTable0[1024]; // Size=212992 Offset=0
    struct _ITEM_COUNTER m_ItemCountTable[1024]; // Size=24576 Offset=339968
    struct _ITEM_TABLE1_DATA_ m_ItemTable1[1024]; // Size=45056 Offset=212992
    int m_nTotalItemTable; // Size=4 Offset=556544
} *PCItemManage;
typedef struct _MIDL_STUB_MESSAGE // Size=180
{
    struct _RPC_MESSAGE * RpcMsg; // Size=4 Offset=0
    unsigned char * Buffer; // Size=4 Offset=4
    unsigned char * BufferStart; // Size=4 Offset=8
    unsigned char * BufferEnd; // Size=4 Offset=12
    unsigned char * BufferMark; // Size=4 Offset=16
    unsigned long BufferLength; // Size=4 Offset=20
    unsigned long MemorySize; // Size=4 Offset=24
    unsigned char * Memory; // Size=4 Offset=28
    int IsClient; // Size=4 Offset=32
    int ReuseBuffer; // Size=4 Offset=36
    unsigned char * AllocAllNodesMemory; // Size=4 Offset=40
    unsigned char * AllocAllNodesMemoryEnd; // Size=4 Offset=44
    int IgnoreEmbeddedPointers; // Size=4 Offset=48
    unsigned char * PointerBufferMark; // Size=4 Offset=52
    unsigned char fBufferValid; // Size=1 Offset=56
    unsigned char Unused; // Size=1 Offset=57
    unsigned long MaxCount; // Size=4 Offset=60
    unsigned long Offset; // Size=4 Offset=64
    unsigned long ActualCount; // Size=4 Offset=68
    void * ( * pfnAllocate)(unsigned int); // Size=4 Offset=72
    void ( * pfnFree)(void *); // Size=4 Offset=76
    unsigned char * StackTop; // Size=4 Offset=80
    unsigned char * pPresentedType; // Size=4 Offset=84
    unsigned char * pTransmitType; // Size=4 Offset=88
    void * SavedHandle; // Size=4 Offset=92
    struct _MIDL_STUB_DESC * StubDesc; // Size=4 Offset=96
    struct _FULL_PTR_XLAT_TABLES * FullPtrXlatTables; // Size=4 Offset=100
    unsigned long FullPtrRefId; // Size=4 Offset=104
    int fCheckBounds; // Size=4 Offset=108
    struct
    {
        int fInDontFree: 1; // Size=4 Offset=112 BitOffset=0 BitCount=1
        int fDontCallFreeInst: 1; // Size=4 Offset=112 BitOffset=1 BitCount=1
        int fInOnlyParam: 1; // Size=4 Offset=112 BitOffset=2 BitCount=1
        int fHasReturn: 1; // Size=4 Offset=112 BitOffset=3 BitCount=1
    };
    unsigned long dwDestContext; // Size=4 Offset=116
    void * pvDestContext; // Size=4 Offset=120
    struct ___unnamed962 * * SavedContextHandles; // Size=4 Offset=124
    long ParamNumber; // Size=4 Offset=128
    struct IRpcChannelBuffer * pRpcChannelBuffer; // Size=4 Offset=132
    struct ARRAY_INFO * pArrayInfo; // Size=4 Offset=136
    unsigned long * SizePtrCountArray; // Size=4 Offset=140
    unsigned long * SizePtrOffsetArray; // Size=4 Offset=144
    unsigned long * SizePtrLengthArray; // Size=4 Offset=148
    void * pArgQueue; // Size=4 Offset=152
    unsigned long dwStubPhase; // Size=4 Offset=156
    struct _NDR_PIPE_DESC * pPipeDesc; // Size=4 Offset=160
    struct _NDR_ASYNC_MESSAGE * pAsyncMsg; // Size=4 Offset=164
    unsigned long Reserved[3]; // Size=12 Offset=168
} MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;
typedef class CPC // Size=1508
{
    enum _ENUM_PC_STAT m_PCstat; // Size=4 Offset=4
    class CSimpleSyncSection m_syncObj; // Size=8 Offset=8
    char m_szIP[16]; // Size=16 Offset=16
    char m_szPCName[13]; // Size=13 Offset=32
    unsigned long m_dwPCID; // Size=4 Offset=48
    unsigned long m_dwCurCell; // Size=4 Offset=52
    unsigned long m_dwDestCell; // Size=4 Offset=56
    unsigned long m_dwExp; // Size=4 Offset=60
    unsigned long m_dwMoney; // Size=4 Offset=64
    int m_iDir; // Size=4 Offset=68
    unsigned short m_wCurMap; // Size=2 Offset=72
    unsigned short m_wLevel; // Size=2 Offset=74
    unsigned short m_wPoint; // Size=2 Offset=76
    unsigned short m_wRTime; // Size=2 Offset=78
    unsigned char m_byPKCount; // Size=1 Offset=80
    unsigned char m_byGateSvrID; // Size=1 Offset=81
    unsigned char m_byPCType; // Size=1 Offset=82
    unsigned char m_byMoveSpeed; // Size=1 Offset=83
    unsigned char m_byAction; // Size=1 Offset=84
    unsigned char m_byPartyQuest; // Size=1 Offset=85
    unsigned char m_byPartyStep; // Size=1 Offset=86
    unsigned char m_byExStatus; // Size=1 Offset=87
    long m_lLogoutTick; // Size=4 Offset=88
    class CSkill m_PCSkill; // Size=12 Offset=92
    struct _SOCIALINFO_ m_SInfo; // Size=4 Offset=104
    long m_lLastSaveTick; // Size=4 Offset=108
    long m_iHp; // Size=4 Offset=112
    long m_iMp; // Size=4 Offset=116
    unsigned short m_wStoredHp; // Size=2 Offset=120
    unsigned short m_wStoredMp; // Size=2 Offset=122
    unsigned short m_wStr; // Size=2 Offset=124
    unsigned short m_wMagic; // Size=2 Offset=126
    unsigned short m_wDex; // Size=2 Offset=128
    unsigned short m_wVit; // Size=2 Offset=130
    unsigned short m_wMana; // Size=2 Offset=132
    unsigned short m_wHitAttack; // Size=2 Offset=134
    unsigned short m_wMagicAttack; // Size=2 Offset=136
    unsigned short m_wDefense; // Size=2 Offset=138
    unsigned short m_wFireAttack; // Size=2 Offset=140
    unsigned short m_wFireDefense; // Size=2 Offset=142
    unsigned short m_wIceAttack; // Size=2 Offset=144
    unsigned short m_wIceDefense; // Size=2 Offset=146
    unsigned short m_wLightAttack; // Size=2 Offset=148
    unsigned short m_wLightDefense; // Size=2 Offset=150
    unsigned short m_wMaxHp; // Size=2 Offset=152
    unsigned short m_wMaxMp; // Size=2 Offset=154
    unsigned short m_wHitAddition; // Size=2 Offset=156
    unsigned short m_wMagAddition; // Size=2 Offset=158
    unsigned char m_byAttackRange; // Size=1 Offset=160
    unsigned char m_byWeaponStep; // Size=1 Offset=161
    unsigned char m_byHitRate; // Size=1 Offset=162
    unsigned char m_byDodge; // Size=1 Offset=163
    unsigned char m_bySkillDodge; // Size=1 Offset=164
    unsigned char m_byCriticalHit; // Size=1 Offset=165
    unsigned char m_byCriticalDodge; // Size=1 Offset=166
    unsigned char m_byGreen; // Size=1 Offset=167
    unsigned char m_byBlue; // Size=1 Offset=168
    unsigned char m_byRed; // Size=1 Offset=169
    unsigned char m_byYellow; // Size=1 Offset=170
    unsigned char m_byBlack; // Size=1 Offset=171
    unsigned long m_dwGreenTime; // Size=4 Offset=172
    unsigned long m_dwBlueTime; // Size=4 Offset=176
    unsigned long m_dwRedTime; // Size=4 Offset=180
    unsigned long m_dwYellowTime; // Size=4 Offset=184
    unsigned long m_dwBlackTime; // Size=4 Offset=188
    unsigned char m_byFatiguePt; // Size=1 Offset=192
    unsigned char m_byFatigueCnt; // Size=1 Offset=193
    struct _PET_INFO_ * m_PetActive; // Size=4 Offset=196
    struct _PET_INFO_ * m_PetInven[5]; // Size=20 Offset=200
    struct _ITEM_ * m_ItemInWear[10]; // Size=40 Offset=220
    struct _ITEM_ * m_ItemInInven[30]; // Size=120 Offset=260
    class std::map<unsigned char,_ITEM_ *,std::less<unsigned char>,std::allocator<_ITEM_ *> > m_DealItemMap; // Size=16 Offset=380
    struct _PET_INFO_ * m_arrDealPet[2]; // Size=8 Offset=396
    unsigned long m_dwDealMoney; // Size=4 Offset=404
    unsigned long m_dwDealPC; // Size=4 Offset=408
    unsigned short m_wDealHP; // Size=2 Offset=412
    unsigned short m_wDealMP; // Size=2 Offset=414
    unsigned char m_bDealOK; // Size=1 Offset=416
    unsigned char m_bDealConfirm; // Size=1 Offset=417
    struct _GAME_OPTION_ m_option; // Size=1 Offset=418
    unsigned long m_dwStepTime; // Size=4 Offset=420
    unsigned long m_dwPreNPCID; // Size=4 Offset=424
    unsigned long m_dwPrePCID; // Size=4 Offset=428
    unsigned char m_byCurrentStep; // Size=1 Offset=432
    int m_bAskPvp; // Size=4 Offset=436
    int m_bNegotiatePvp; // Size=4 Offset=440
    class CPC::CPCStatChange m_PCStatChange; // Size=20 Offset=444
    struct _LASTINGSKILL_MANAGEARRARY_ m_PCSkillCasted; // Size=48 Offset=464
    char m_szAccountName[21]; // Size=21 Offset=512
    unsigned long m_dwLore; // Size=4 Offset=536
    unsigned short m_wLastQuest; // Size=2 Offset=540
    unsigned long m_dwLastRTime; // Size=4 Offset=544
    struct _PC_QUEST_INFO_ * m_pQuestInfo; // Size=4 Offset=548
    class CCheckHACK m_CheckHack; // Size=36 Offset=552
    unsigned long m_dwPartyAskID; // Size=4 Offset=588
    unsigned long m_dwPartyID; // Size=4 Offset=592
    struct _PARTISAN_ m_arrMyParty[3]; // Size=24 Offset=596
    unsigned char m_byStorage_Open; // Size=1 Offset=620
    struct _ITEM_ * m_StorageItem[80]; // Size=320 Offset=624
    unsigned long m_dwStorageMoney; // Size=4 Offset=944
    struct CPC::_REMEMBER_ENEMY_ m_arrEnemy[16]; // Size=384 Offset=948
    char m_szClanName[32]; // Size=32 Offset=1332
    unsigned long m_dwClanID; // Size=4 Offset=1364
    unsigned short m_wAgitID; // Size=2 Offset=1368
    unsigned char m_ClanRank; // Size=1 Offset=1370
    unsigned long m_dwMarkID; // Size=4 Offset=1372
    unsigned long m_dwAppBeingAskedID; // Size=4 Offset=1376
    unsigned long m_dwApprenticeID; // Size=4 Offset=1380
    struct _APPRENTICE_INFO_ m_stApprenticePartner; // Size=4 Offset=1384
    char m_Reserved1[33]; // Size=33 Offset=1388
    char m_Reserved2[33]; // Size=33 Offset=1421
    int m_bPayTimeout; // Size=4 Offset=1456
    char m_szPasswd[21]; // Size=21 Offset=1460
    long m_DeadLine; // Size=4 Offset=1484
    int m_wgsPayMode; // Size=4 Offset=1488
    long m_RemainTime; // Size=4 Offset=1492
    unsigned char m_PayMode; // Size=1 Offset=1496
    int m_PayNo; // Size=4 Offset=1500
    int m_nLowerLevelRatio; // Size=4 Offset=1504
} *PCPC;
typedef class MSG_S2C_WARP_LOGIN // Size=936
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNewCell; // Size=4 Offset=12
    union _ITEM_IN_WEAR_ WearList[10]; // Size=200 Offset=16
    union _ITEM_IN_INVEN_ HaveList[30]; // Size=600 Offset=216
    struct _PET_INFO_ PetActive; // Size=20 Offset=816
    struct _PET_INFO_ PetInven[5]; // Size=100 Offset=836
} *PMSG_S2C_WARP_LOGIN;
typedef class MSG_S2C_ANS_WARP_B2Z // Size=936
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    unsigned long dwNewCell; // Size=4 Offset=12
    union _ITEM_IN_WEAR_ WearList[10]; // Size=200 Offset=16
    union _ITEM_IN_INVEN_ HaveList[30]; // Size=600 Offset=216
    struct _PET_INFO_ PetActive; // Size=20 Offset=816
    struct _PET_INFO_ PetInven[5]; // Size=100 Offset=836
} *PMSG_S2C_ANS_WARP_B2Z;
typedef struct _PCDATA_ // Size=1044
{
    char szPCName[13]; // Size=13 Offset=0
    char szAccountName[21]; // Size=21 Offset=13
    unsigned char byType; // Size=1 Offset=34
    unsigned short wLevel; // Size=2 Offset=36
    unsigned long dwExp; // Size=4 Offset=40
    unsigned short wStr; // Size=2 Offset=44
    unsigned short wMagic; // Size=2 Offset=46
    unsigned short wDex; // Size=2 Offset=48
    unsigned short wVit; // Size=2 Offset=50
    unsigned short wMana; // Size=2 Offset=52
    unsigned short wPoint; // Size=2 Offset=54
    unsigned short wHp; // Size=2 Offset=56
    unsigned short wMp; // Size=2 Offset=58
    unsigned short wStoredHp; // Size=2 Offset=60
    unsigned short wStoredMp; // Size=2 Offset=62
    unsigned short wMapIndex; // Size=2 Offset=64
    unsigned long dwCellIndex; // Size=4 Offset=68
    struct _SKILL_ SkillList; // Size=12 Offset=72
    unsigned char byPKCount; // Size=1 Offset=84
    unsigned short wRTime; // Size=2 Offset=86
    struct _SOCIALINFO_ SInfo; // Size=4 Offset=88
    unsigned long dwMoney; // Size=4 Offset=92
    unsigned long dwLore; // Size=4 Offset=96
    unsigned short wLastQuest; // Size=2 Offset=100
    unsigned long dwLastRTime; // Size=4 Offset=104
    unsigned long dwFatigue; // Size=4 Offset=108
    union _ITEM_IN_WEAR_ WearList[10]; // Size=200 Offset=112
    union _ITEM_IN_INVEN_ HaveList[30]; // Size=600 Offset=312
    struct _PET_INFO_ PetActive; // Size=20 Offset=912
    struct _PET_INFO_ PetInven[5]; // Size=100 Offset=932
    struct _SAVE_QUEST_INFO_ SaveQuestInfo; // Size=12 Offset=1032
} PCDATA_, *PPCDATA_;
typedef class MSG_S2C_WORLD_LOGIN // Size=1038
{
    class MSG_S2C_HEADER MsgHeader; // Size=12 Offset=0
    struct _PC_INFO_ PCInfo; // Size=60 Offset=12
    struct _PC_STAT_UPDATE_ PCStatUpdate; // Size=46 Offset=72
    union _ITEM_IN_WEAR_ WearList[10]; // Size=200 Offset=118
    union _ITEM_IN_INVEN_ HaveList[30]; // Size=600 Offset=318
    struct _PET_INFO_ PetActive; // Size=20 Offset=918
    struct _PET_INFO_ PetInven[5]; // Size=100 Offset=938
} *PMSG_S2C_WORLD_LOGIN;
typedef class MSG_M2S_WORLD_LOGIN // Size=1165
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    struct _PCDATA_ PCData; // Size=1044 Offset=6
    char szPasswd[21]; // Size=21 Offset=1050
    char szIP[16]; // Size=16 Offset=1071
    unsigned long RemainTime; // Size=4 Offset=1087
    char PayMode[4]; // Size=4 Offset=1091
    long PayNo; // Size=4 Offset=1095
    char Reserved1[33]; // Size=33 Offset=1099
    char Reserved2[33]; // Size=33 Offset=1132
} *PMSG_M2S_WORLD_LOGIN;
typedef class MSG_S2M_CHAR_LOGOUT // Size=1050
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    struct _PCDATA_ PCData; // Size=1044 Offset=6
} *PMSG_S2M_CHAR_LOGOUT;
typedef class MSG_S2M_DATA_UPDATE // Size=1050
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned long dwPCID; // Size=4 Offset=2
    struct _PCDATA_ PCData; // Size=1044 Offset=6
} *PMSG_S2M_DATA_UPDATE;
typedef class MSG_M2S_ANS_WARP_B2Z // Size=1067
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    char szIP[16]; // Size=16 Offset=7
    struct _PCDATA_ PCData; // Size=1044 Offset=23
} *PMSG_M2S_ANS_WARP_B2Z;
typedef class MSG_S2M_ASK_WARP_Z2B // Size=1059
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    struct _PCDATA_ PCData; // Size=1044 Offset=7
    struct _BATTLE_WARP_DATA_ BtWarpData; // Size=8 Offset=1051
} *PMSG_S2M_ASK_WARP_Z2B;
typedef class MSG_S2M_WARP_ZONE // Size=1319
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    struct _PCDATA_ PCData; // Size=1044 Offset=7
    struct _ZONE_WARP_DATA_ WarpData; // Size=268 Offset=1051
} *PMSG_S2M_WARP_ZONE;
typedef class MSG_M2S_WARP_LOGIN // Size=1335
{
    class MSG_S2S_HEADER MsgHeader; // Size=2 Offset=0
    unsigned char byGateSvrID; // Size=1 Offset=2
    unsigned long dwPCID; // Size=4 Offset=3
    char szIP[16]; // Size=16 Offset=7
    struct _PCDATA_ PCData; // Size=1044 Offset=23
    struct _ZONE_WARP_DATA_ WarpData; // Size=268 Offset=1067
} *PMSG_M2S_WARP_LOGIN;
typedef struct tagPROPVARIANT // Size=16
{
    unsigned short vt; // Size=2 Offset=0
    unsigned short wReserved1; // Size=2 Offset=2
    unsigned short wReserved2; // Size=2 Offset=4
    unsigned short wReserved3; // Size=2 Offset=6
    union
    {
        unsigned char bVal; // Size=1 Offset=8
        short iVal; // Size=2 Offset=8
        unsigned short uiVal; // Size=2 Offset=8
        short boolVal; // Size=2 Offset=8
        long lVal; // Size=4 Offset=8
        unsigned long ulVal; // Size=4 Offset=8
        float fltVal; // Size=4 Offset=8
        long scode; // Size=4 Offset=8
        union _LARGE_INTEGER hVal; // Size=8 Offset=8
        union _ULARGE_INTEGER uhVal; // Size=8 Offset=8
        double dblVal; // Size=8 Offset=8
        union tagCY cyVal; // Size=8 Offset=8
        double date; // Size=8 Offset=8
        struct _FILETIME filetime; // Size=8 Offset=8
        struct _GUID * puuid; // Size=4 Offset=8
        struct tagBLOB blob; // Size=8 Offset=8
        struct tagCLIPDATA * pclipdata; // Size=4 Offset=8
        struct IStream * pStream; // Size=4 Offset=8
        struct IStorage * pStorage; // Size=4 Offset=8
        unsigned short * bstrVal; // Size=4 Offset=8
        struct tagBSTRBLOB bstrblobVal; // Size=8 Offset=8
        char * pszVal; // Size=4 Offset=8
        unsigned short * pwszVal; // Size=4 Offset=8
        struct tagCAUB caub; // Size=8 Offset=8
        struct tagCAI cai; // Size=8 Offset=8
        struct tagCAUI caui; // Size=8 Offset=8
        struct tagCABOOL cabool; // Size=8 Offset=8
        struct tagCAL cal; // Size=8 Offset=8
        struct tagCAUL caul; // Size=8 Offset=8
        struct tagCAFLT caflt; // Size=8 Offset=8
        struct tagCASCODE cascode; // Size=8 Offset=8
        struct tagCAH cah; // Size=8 Offset=8
        struct tagCAUH cauh; // Size=8 Offset=8
        struct tagCADBL cadbl; // Size=8 Offset=8
        struct tagCACY cacy; // Size=8 Offset=8
        struct tagCADATE cadate; // Size=8 Offset=8
        struct tagCAFILETIME cafiletime; // Size=8 Offset=8
        struct tagCACLSID cauuid; // Size=8 Offset=8
        struct tagCACLIPDATA caclipdata; // Size=8 Offset=8
        struct tagCABSTR cabstr; // Size=8 Offset=8
        struct tagCABSTRBLOB cabstrblob; // Size=8 Offset=8
        struct tagCALPSTR calpstr; // Size=8 Offset=8
        struct tagCALPWSTR calpwstr; // Size=8 Offset=8
        struct tagCAPROPVARIANT capropvar; // Size=8 Offset=8
    };
} *PtagPROPVARIANT;

#endif
